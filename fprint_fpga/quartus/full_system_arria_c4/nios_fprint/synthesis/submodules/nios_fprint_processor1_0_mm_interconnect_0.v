// nios_fprint_processor1_0_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2016.01.16.18:28:14

`timescale 1 ps / 1 ps
module nios_fprint_processor1_0_mm_interconnect_0 (
		input  wire        clk_clk_clk,                             //                           clk_clk.clk
		input  wire        dma_0_reset_reset_bridge_in_reset_reset, // dma_0_reset_reset_bridge_in_reset.reset
		input  wire [26:0] dma_0_read_master_address,               //                 dma_0_read_master.address
		output wire        dma_0_read_master_waitrequest,           //                                  .waitrequest
		input  wire        dma_0_read_master_chipselect,            //                                  .chipselect
		input  wire        dma_0_read_master_read,                  //                                  .read
		output wire [31:0] dma_0_read_master_readdata,              //                                  .readdata
		output wire        dma_0_read_master_readdatavalid,         //                                  .readdatavalid
		input  wire [26:0] dma_0_write_master_address,              //                dma_0_write_master.address
		output wire        dma_0_write_master_waitrequest,          //                                  .waitrequest
		input  wire [3:0]  dma_0_write_master_byteenable,           //                                  .byteenable
		input  wire        dma_0_write_master_chipselect,           //                                  .chipselect
		input  wire        dma_0_write_master_write,                //                                  .write
		input  wire [31:0] dma_0_write_master_writedata,            //                                  .writedata
		input  wire [26:0] utlb_0_avalon_master_address,            //              utlb_0_avalon_master.address
		output wire        utlb_0_avalon_master_waitrequest,        //                                  .waitrequest
		input  wire [3:0]  utlb_0_avalon_master_byteenable,         //                                  .byteenable
		input  wire        utlb_0_avalon_master_read,               //                                  .read
		output wire [31:0] utlb_0_avalon_master_readdata,           //                                  .readdata
		input  wire        utlb_0_avalon_master_write,              //                                  .write
		input  wire [31:0] utlb_0_avalon_master_writedata,          //                                  .writedata
		output wire [25:0] out_system_bridge_s0_address,            //              out_system_bridge_s0.address
		output wire        out_system_bridge_s0_write,              //                                  .write
		output wire        out_system_bridge_s0_read,               //                                  .read
		input  wire [31:0] out_system_bridge_s0_readdata,           //                                  .readdata
		output wire [31:0] out_system_bridge_s0_writedata,          //                                  .writedata
		output wire [0:0]  out_system_bridge_s0_burstcount,         //                                  .burstcount
		output wire [3:0]  out_system_bridge_s0_byteenable,         //                                  .byteenable
		input  wire        out_system_bridge_s0_readdatavalid,      //                                  .readdatavalid
		input  wire        out_system_bridge_s0_waitrequest,        //                                  .waitrequest
		output wire        out_system_bridge_s0_debugaccess,        //                                  .debugaccess
		output wire [11:0] scratchpad_0_s1_address,                 //                   scratchpad_0_s1.address
		output wire        scratchpad_0_s1_write,                   //                                  .write
		input  wire [31:0] scratchpad_0_s1_readdata,                //                                  .readdata
		output wire [31:0] scratchpad_0_s1_writedata,               //                                  .writedata
		output wire [3:0]  scratchpad_0_s1_byteenable,              //                                  .byteenable
		output wire        scratchpad_0_s1_chipselect,              //                                  .chipselect
		output wire        scratchpad_0_s1_clken,                   //                                  .clken
		output wire [11:0] scratchpad_1_s1_address,                 //                   scratchpad_1_s1.address
		output wire        scratchpad_1_s1_write,                   //                                  .write
		input  wire [31:0] scratchpad_1_s1_readdata,                //                                  .readdata
		output wire [31:0] scratchpad_1_s1_writedata,               //                                  .writedata
		output wire [3:0]  scratchpad_1_s1_byteenable,              //                                  .byteenable
		output wire        scratchpad_1_s1_chipselect,              //                                  .chipselect
		output wire        scratchpad_1_s1_clken                    //                                  .clken
	);

	wire         dma_0_read_master_translator_avalon_universal_master_0_waitrequest;                        // dma_0_read_master_translator_avalon_universal_master_0_agent:av_waitrequest -> dma_0_read_master_translator:uav_waitrequest
	wire   [2:0] dma_0_read_master_translator_avalon_universal_master_0_burstcount;                         // dma_0_read_master_translator:uav_burstcount -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] dma_0_read_master_translator_avalon_universal_master_0_writedata;                          // dma_0_read_master_translator:uav_writedata -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [26:0] dma_0_read_master_translator_avalon_universal_master_0_address;                            // dma_0_read_master_translator:uav_address -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_address
	wire         dma_0_read_master_translator_avalon_universal_master_0_lock;                               // dma_0_read_master_translator:uav_lock -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_lock
	wire         dma_0_read_master_translator_avalon_universal_master_0_write;                              // dma_0_read_master_translator:uav_write -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_write
	wire         dma_0_read_master_translator_avalon_universal_master_0_read;                               // dma_0_read_master_translator:uav_read -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] dma_0_read_master_translator_avalon_universal_master_0_readdata;                           // dma_0_read_master_translator_avalon_universal_master_0_agent:av_readdata -> dma_0_read_master_translator:uav_readdata
	wire         dma_0_read_master_translator_avalon_universal_master_0_debugaccess;                        // dma_0_read_master_translator:uav_debugaccess -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] dma_0_read_master_translator_avalon_universal_master_0_byteenable;                         // dma_0_read_master_translator:uav_byteenable -> dma_0_read_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         dma_0_read_master_translator_avalon_universal_master_0_readdatavalid;                      // dma_0_read_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> dma_0_read_master_translator:uav_readdatavalid
	wire         dma_0_write_master_translator_avalon_universal_master_0_waitrequest;                       // dma_0_write_master_translator_avalon_universal_master_0_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire   [2:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;                        // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;                         // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [26:0] dma_0_write_master_translator_avalon_universal_master_0_address;                           // dma_0_write_master_translator:uav_address -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_address
	wire         dma_0_write_master_translator_avalon_universal_master_0_lock;                              // dma_0_write_master_translator:uav_lock -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_lock
	wire         dma_0_write_master_translator_avalon_universal_master_0_write;                             // dma_0_write_master_translator:uav_write -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_write
	wire         dma_0_write_master_translator_avalon_universal_master_0_read;                              // dma_0_write_master_translator:uav_read -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;                          // dma_0_write_master_translator_avalon_universal_master_0_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire         dma_0_write_master_translator_avalon_universal_master_0_debugaccess;                       // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;                        // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         dma_0_write_master_translator_avalon_universal_master_0_readdatavalid;                     // dma_0_write_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_001_src_endofpacket;                                                          // rsp_xbar_mux_001:src_endofpacket -> dma_0_write_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_001_src_valid;                                                                // rsp_xbar_mux_001:src_valid -> dma_0_write_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_001_src_startofpacket;                                                        // rsp_xbar_mux_001:src_startofpacket -> dma_0_write_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [98:0] rsp_xbar_mux_001_src_data;                                                                 // rsp_xbar_mux_001:src_data -> dma_0_write_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [2:0] rsp_xbar_mux_001_src_channel;                                                              // rsp_xbar_mux_001:src_channel -> dma_0_write_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_001_src_ready;                                                                // dma_0_write_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_waitrequest;                     // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> utlb_0_avalon_master_translator:uav_waitrequest
	wire   [2:0] utlb_0_avalon_master_translator_avalon_universal_master_0_burstcount;                      // utlb_0_avalon_master_translator:uav_burstcount -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] utlb_0_avalon_master_translator_avalon_universal_master_0_writedata;                       // utlb_0_avalon_master_translator:uav_writedata -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [26:0] utlb_0_avalon_master_translator_avalon_universal_master_0_address;                         // utlb_0_avalon_master_translator:uav_address -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_lock;                            // utlb_0_avalon_master_translator:uav_lock -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_write;                           // utlb_0_avalon_master_translator:uav_write -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_read;                            // utlb_0_avalon_master_translator:uav_read -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] utlb_0_avalon_master_translator_avalon_universal_master_0_readdata;                        // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> utlb_0_avalon_master_translator:uav_readdata
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_debugaccess;                     // utlb_0_avalon_master_translator:uav_debugaccess -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] utlb_0_avalon_master_translator_avalon_universal_master_0_byteenable;                      // utlb_0_avalon_master_translator:uav_byteenable -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;                   // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> utlb_0_avalon_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_002_src_endofpacket;                                                          // rsp_xbar_mux_002:src_endofpacket -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_002_src_valid;                                                                // rsp_xbar_mux_002:src_valid -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_002_src_startofpacket;                                                        // rsp_xbar_mux_002:src_startofpacket -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [98:0] rsp_xbar_mux_002_src_data;                                                                 // rsp_xbar_mux_002:src_data -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [2:0] rsp_xbar_mux_002_src_channel;                                                              // rsp_xbar_mux_002:src_channel -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_002_src_ready;                                                                // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_002:src_ready
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                  // scratchpad_0_s1_translator:uav_waitrequest -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                   // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> scratchpad_0_s1_translator:uav_burstcount
	wire  [31:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                    // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> scratchpad_0_s1_translator:uav_writedata
	wire  [26:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                      // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> scratchpad_0_s1_translator:uav_address
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                        // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> scratchpad_0_s1_translator:uav_write
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                         // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> scratchpad_0_s1_translator:uav_lock
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                         // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> scratchpad_0_s1_translator:uav_read
	wire  [31:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                     // scratchpad_0_s1_translator:uav_readdata -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                // scratchpad_0_s1_translator:uav_readdatavalid -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                  // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> scratchpad_0_s1_translator:uav_debugaccess
	wire   [3:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                   // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> scratchpad_0_s1_translator:uav_byteenable
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;           // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                 // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;         // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [99:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                  // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                 // scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;        // scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;              // scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;      // scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [99:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;               // scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;              // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;            // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;             // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;            // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_src_endofpacket;                                                              // cmd_xbar_mux:src_endofpacket -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_src_valid;                                                                    // cmd_xbar_mux:src_valid -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_src_startofpacket;                                                            // cmd_xbar_mux:src_startofpacket -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [98:0] cmd_xbar_mux_src_data;                                                                     // cmd_xbar_mux:src_data -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [2:0] cmd_xbar_mux_src_channel;                                                                  // cmd_xbar_mux:src_channel -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_src_ready;                                                                    // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // out_system_bridge_s0_translator:uav_waitrequest -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;              // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> out_system_bridge_s0_translator:uav_burstcount
	wire  [31:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_writedata;               // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> out_system_bridge_s0_translator:uav_writedata
	wire  [26:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_address;                 // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_address -> out_system_bridge_s0_translator:uav_address
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_write;                   // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_write -> out_system_bridge_s0_translator:uav_write
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_lock;                    // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_lock -> out_system_bridge_s0_translator:uav_lock
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_read;                    // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_read -> out_system_bridge_s0_translator:uav_read
	wire  [31:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                // out_system_bridge_s0_translator:uav_readdata -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // out_system_bridge_s0_translator:uav_readdatavalid -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> out_system_bridge_s0_translator:uav_debugaccess
	wire   [3:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;              // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> out_system_bridge_s0_translator:uav_byteenable
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;            // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [99:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_data;             // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;            // out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [99:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_001_src_endofpacket;                                                          // cmd_xbar_mux_001:src_endofpacket -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_001_src_valid;                                                                // cmd_xbar_mux_001:src_valid -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_001_src_startofpacket;                                                        // cmd_xbar_mux_001:src_startofpacket -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [98:0] cmd_xbar_mux_001_src_data;                                                                 // cmd_xbar_mux_001:src_data -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [2:0] cmd_xbar_mux_001_src_channel;                                                              // cmd_xbar_mux_001:src_channel -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_001_src_ready;                                                                // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_001:src_ready
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                  // scratchpad_1_s1_translator:uav_waitrequest -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                   // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> scratchpad_1_s1_translator:uav_burstcount
	wire  [31:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                    // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> scratchpad_1_s1_translator:uav_writedata
	wire  [26:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_address;                      // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_address -> scratchpad_1_s1_translator:uav_address
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_write;                        // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_write -> scratchpad_1_s1_translator:uav_write
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_lock;                         // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_lock -> scratchpad_1_s1_translator:uav_lock
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_read;                         // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_read -> scratchpad_1_s1_translator:uav_read
	wire  [31:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                     // scratchpad_1_s1_translator:uav_readdata -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                // scratchpad_1_s1_translator:uav_readdatavalid -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                  // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> scratchpad_1_s1_translator:uav_debugaccess
	wire   [3:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                   // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> scratchpad_1_s1_translator:uav_byteenable
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;           // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                 // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;         // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [99:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                  // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                 // scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;        // scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;              // scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;      // scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [99:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;               // scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;              // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;            // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;             // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;            // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_002_src_endofpacket;                                                          // cmd_xbar_mux_002:src_endofpacket -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_002_src_valid;                                                                // cmd_xbar_mux_002:src_valid -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_002_src_startofpacket;                                                        // cmd_xbar_mux_002:src_startofpacket -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [98:0] cmd_xbar_mux_002_src_data;                                                                 // cmd_xbar_mux_002:src_data -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [2:0] cmd_xbar_mux_002_src_channel;                                                              // cmd_xbar_mux_002:src_channel -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_002_src_ready;                                                                // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_002:src_ready
	wire         dma_0_read_master_translator_avalon_universal_master_0_agent_cp_endofpacket;               // dma_0_read_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire         dma_0_read_master_translator_avalon_universal_master_0_agent_cp_valid;                     // dma_0_read_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire         dma_0_read_master_translator_avalon_universal_master_0_agent_cp_startofpacket;             // dma_0_read_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [98:0] dma_0_read_master_translator_avalon_universal_master_0_agent_cp_data;                      // dma_0_read_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire         dma_0_read_master_translator_avalon_universal_master_0_agent_cp_ready;                     // addr_router:sink_ready -> dma_0_read_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         dma_0_write_master_translator_avalon_universal_master_0_agent_cp_endofpacket;              // dma_0_write_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire         dma_0_write_master_translator_avalon_universal_master_0_agent_cp_valid;                    // dma_0_write_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire         dma_0_write_master_translator_avalon_universal_master_0_agent_cp_startofpacket;            // dma_0_write_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [98:0] dma_0_write_master_translator_avalon_universal_master_0_agent_cp_data;                     // dma_0_write_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire         dma_0_write_master_translator_avalon_universal_master_0_agent_cp_ready;                    // addr_router_001:sink_ready -> dma_0_write_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_001_src_endofpacket;                                                           // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire         addr_router_001_src_valid;                                                                 // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire         addr_router_001_src_startofpacket;                                                         // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [98:0] addr_router_001_src_data;                                                                  // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire   [2:0] addr_router_001_src_channel;                                                               // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire         addr_router_001_src_ready;                                                                 // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;            // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;                  // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket;          // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [98:0] utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data;                   // utlb_0_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire         utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;                  // addr_router_002:sink_ready -> utlb_0_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_002_src_endofpacket;                                                           // addr_router_002:src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire         addr_router_002_src_valid;                                                                 // addr_router_002:src_valid -> cmd_xbar_demux_002:sink_valid
	wire         addr_router_002_src_startofpacket;                                                         // addr_router_002:src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [98:0] addr_router_002_src_data;                                                                  // addr_router_002:src_data -> cmd_xbar_demux_002:sink_data
	wire   [2:0] addr_router_002_src_channel;                                                               // addr_router_002:src_channel -> cmd_xbar_demux_002:sink_channel
	wire         addr_router_002_src_ready;                                                                 // cmd_xbar_demux_002:sink_ready -> addr_router_002:src_ready
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                  // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                        // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [98:0] scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                         // scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire         scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                        // id_router:sink_ready -> scratchpad_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_src_endofpacket;                                                                 // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire         id_router_src_valid;                                                                       // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire         id_router_src_startofpacket;                                                               // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [98:0] id_router_src_data;                                                                        // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [2:0] id_router_src_channel;                                                                     // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire         id_router_src_ready;                                                                       // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_valid;                   // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [98:0] out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_data;                    // out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire         out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> out_system_bridge_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_001_src_endofpacket;                                                             // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire         id_router_001_src_valid;                                                                   // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire         id_router_001_src_startofpacket;                                                           // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [98:0] id_router_001_src_data;                                                                    // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [2:0] id_router_001_src_channel;                                                                 // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire         id_router_001_src_ready;                                                                   // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                  // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_valid;                        // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [98:0] scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_data;                         // scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire         scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_ready;                        // id_router_002:sink_ready -> scratchpad_1_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_002_src_endofpacket;                                                             // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire         id_router_002_src_valid;                                                                   // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire         id_router_002_src_startofpacket;                                                           // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [98:0] id_router_002_src_data;                                                                    // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire   [2:0] id_router_002_src_channel;                                                                 // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire         id_router_002_src_ready;                                                                   // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire         addr_router_src_endofpacket;                                                               // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire         addr_router_src_valid;                                                                     // addr_router:src_valid -> limiter:cmd_sink_valid
	wire         addr_router_src_startofpacket;                                                             // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [98:0] addr_router_src_data;                                                                      // addr_router:src_data -> limiter:cmd_sink_data
	wire   [2:0] addr_router_src_channel;                                                                   // addr_router:src_channel -> limiter:cmd_sink_channel
	wire         addr_router_src_ready;                                                                     // limiter:cmd_sink_ready -> addr_router:src_ready
	wire         limiter_cmd_src_endofpacket;                                                               // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire         limiter_cmd_src_startofpacket;                                                             // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [98:0] limiter_cmd_src_data;                                                                      // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [2:0] limiter_cmd_src_channel;                                                                   // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire         limiter_cmd_src_ready;                                                                     // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire         rsp_xbar_mux_src_endofpacket;                                                              // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire         rsp_xbar_mux_src_valid;                                                                    // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire         rsp_xbar_mux_src_startofpacket;                                                            // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [98:0] rsp_xbar_mux_src_data;                                                                     // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [2:0] rsp_xbar_mux_src_channel;                                                                  // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire         rsp_xbar_mux_src_ready;                                                                    // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire         limiter_rsp_src_endofpacket;                                                               // limiter:rsp_src_endofpacket -> dma_0_read_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         limiter_rsp_src_valid;                                                                     // limiter:rsp_src_valid -> dma_0_read_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         limiter_rsp_src_startofpacket;                                                             // limiter:rsp_src_startofpacket -> dma_0_read_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [98:0] limiter_rsp_src_data;                                                                      // limiter:rsp_src_data -> dma_0_read_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [2:0] limiter_rsp_src_channel;                                                                   // limiter:rsp_src_channel -> dma_0_read_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         limiter_rsp_src_ready;                                                                     // dma_0_read_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire         cmd_xbar_demux_src0_endofpacket;                                                           // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire         cmd_xbar_demux_src0_valid;                                                                 // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire         cmd_xbar_demux_src0_startofpacket;                                                         // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [98:0] cmd_xbar_demux_src0_data;                                                                  // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [2:0] cmd_xbar_demux_src0_channel;                                                               // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire         cmd_xbar_demux_src0_ready;                                                                 // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire         cmd_xbar_demux_src1_endofpacket;                                                           // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire         cmd_xbar_demux_src1_valid;                                                                 // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire         cmd_xbar_demux_src1_startofpacket;                                                         // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [98:0] cmd_xbar_demux_src1_data;                                                                  // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [2:0] cmd_xbar_demux_src1_channel;                                                               // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire         cmd_xbar_demux_src1_ready;                                                                 // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire         cmd_xbar_demux_src2_endofpacket;                                                           // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire         cmd_xbar_demux_src2_valid;                                                                 // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire         cmd_xbar_demux_src2_startofpacket;                                                         // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [98:0] cmd_xbar_demux_src2_data;                                                                  // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [2:0] cmd_xbar_demux_src2_channel;                                                               // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire         cmd_xbar_demux_src2_ready;                                                                 // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire         cmd_xbar_demux_001_src0_endofpacket;                                                       // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire         cmd_xbar_demux_001_src0_valid;                                                             // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire         cmd_xbar_demux_001_src0_startofpacket;                                                     // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [98:0] cmd_xbar_demux_001_src0_data;                                                              // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [2:0] cmd_xbar_demux_001_src0_channel;                                                           // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire         cmd_xbar_demux_001_src0_ready;                                                             // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire         cmd_xbar_demux_001_src1_endofpacket;                                                       // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire         cmd_xbar_demux_001_src1_valid;                                                             // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire         cmd_xbar_demux_001_src1_startofpacket;                                                     // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [98:0] cmd_xbar_demux_001_src1_data;                                                              // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [2:0] cmd_xbar_demux_001_src1_channel;                                                           // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire         cmd_xbar_demux_001_src1_ready;                                                             // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire         cmd_xbar_demux_001_src2_endofpacket;                                                       // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire         cmd_xbar_demux_001_src2_valid;                                                             // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire         cmd_xbar_demux_001_src2_startofpacket;                                                     // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [98:0] cmd_xbar_demux_001_src2_data;                                                              // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire   [2:0] cmd_xbar_demux_001_src2_channel;                                                           // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire         cmd_xbar_demux_001_src2_ready;                                                             // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire         cmd_xbar_demux_002_src0_endofpacket;                                                       // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux:sink2_endofpacket
	wire         cmd_xbar_demux_002_src0_valid;                                                             // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux:sink2_valid
	wire         cmd_xbar_demux_002_src0_startofpacket;                                                     // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux:sink2_startofpacket
	wire  [98:0] cmd_xbar_demux_002_src0_data;                                                              // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux:sink2_data
	wire   [2:0] cmd_xbar_demux_002_src0_channel;                                                           // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux:sink2_channel
	wire         cmd_xbar_demux_002_src0_ready;                                                             // cmd_xbar_mux:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire         cmd_xbar_demux_002_src1_endofpacket;                                                       // cmd_xbar_demux_002:src1_endofpacket -> cmd_xbar_mux_001:sink2_endofpacket
	wire         cmd_xbar_demux_002_src1_valid;                                                             // cmd_xbar_demux_002:src1_valid -> cmd_xbar_mux_001:sink2_valid
	wire         cmd_xbar_demux_002_src1_startofpacket;                                                     // cmd_xbar_demux_002:src1_startofpacket -> cmd_xbar_mux_001:sink2_startofpacket
	wire  [98:0] cmd_xbar_demux_002_src1_data;                                                              // cmd_xbar_demux_002:src1_data -> cmd_xbar_mux_001:sink2_data
	wire   [2:0] cmd_xbar_demux_002_src1_channel;                                                           // cmd_xbar_demux_002:src1_channel -> cmd_xbar_mux_001:sink2_channel
	wire         cmd_xbar_demux_002_src1_ready;                                                             // cmd_xbar_mux_001:sink2_ready -> cmd_xbar_demux_002:src1_ready
	wire         cmd_xbar_demux_002_src2_endofpacket;                                                       // cmd_xbar_demux_002:src2_endofpacket -> cmd_xbar_mux_002:sink2_endofpacket
	wire         cmd_xbar_demux_002_src2_valid;                                                             // cmd_xbar_demux_002:src2_valid -> cmd_xbar_mux_002:sink2_valid
	wire         cmd_xbar_demux_002_src2_startofpacket;                                                     // cmd_xbar_demux_002:src2_startofpacket -> cmd_xbar_mux_002:sink2_startofpacket
	wire  [98:0] cmd_xbar_demux_002_src2_data;                                                              // cmd_xbar_demux_002:src2_data -> cmd_xbar_mux_002:sink2_data
	wire   [2:0] cmd_xbar_demux_002_src2_channel;                                                           // cmd_xbar_demux_002:src2_channel -> cmd_xbar_mux_002:sink2_channel
	wire         cmd_xbar_demux_002_src2_ready;                                                             // cmd_xbar_mux_002:sink2_ready -> cmd_xbar_demux_002:src2_ready
	wire         rsp_xbar_demux_src0_endofpacket;                                                           // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire         rsp_xbar_demux_src0_valid;                                                                 // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire         rsp_xbar_demux_src0_startofpacket;                                                         // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [98:0] rsp_xbar_demux_src0_data;                                                                  // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [2:0] rsp_xbar_demux_src0_channel;                                                               // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire         rsp_xbar_demux_src0_ready;                                                                 // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire         rsp_xbar_demux_src1_endofpacket;                                                           // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire         rsp_xbar_demux_src1_valid;                                                                 // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire         rsp_xbar_demux_src1_startofpacket;                                                         // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [98:0] rsp_xbar_demux_src1_data;                                                                  // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [2:0] rsp_xbar_demux_src1_channel;                                                               // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire         rsp_xbar_demux_src1_ready;                                                                 // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire         rsp_xbar_demux_src2_endofpacket;                                                           // rsp_xbar_demux:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire         rsp_xbar_demux_src2_valid;                                                                 // rsp_xbar_demux:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire         rsp_xbar_demux_src2_startofpacket;                                                         // rsp_xbar_demux:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [98:0] rsp_xbar_demux_src2_data;                                                                  // rsp_xbar_demux:src2_data -> rsp_xbar_mux_002:sink0_data
	wire   [2:0] rsp_xbar_demux_src2_channel;                                                               // rsp_xbar_demux:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire         rsp_xbar_demux_src2_ready;                                                                 // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux:src2_ready
	wire         rsp_xbar_demux_001_src0_endofpacket;                                                       // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire         rsp_xbar_demux_001_src0_valid;                                                             // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire         rsp_xbar_demux_001_src0_startofpacket;                                                     // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [98:0] rsp_xbar_demux_001_src0_data;                                                              // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [2:0] rsp_xbar_demux_001_src0_channel;                                                           // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire         rsp_xbar_demux_001_src0_ready;                                                             // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire         rsp_xbar_demux_001_src1_endofpacket;                                                       // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire         rsp_xbar_demux_001_src1_valid;                                                             // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire         rsp_xbar_demux_001_src1_startofpacket;                                                     // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [98:0] rsp_xbar_demux_001_src1_data;                                                              // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [2:0] rsp_xbar_demux_001_src1_channel;                                                           // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire         rsp_xbar_demux_001_src1_ready;                                                             // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire         rsp_xbar_demux_001_src2_endofpacket;                                                       // rsp_xbar_demux_001:src2_endofpacket -> rsp_xbar_mux_002:sink1_endofpacket
	wire         rsp_xbar_demux_001_src2_valid;                                                             // rsp_xbar_demux_001:src2_valid -> rsp_xbar_mux_002:sink1_valid
	wire         rsp_xbar_demux_001_src2_startofpacket;                                                     // rsp_xbar_demux_001:src2_startofpacket -> rsp_xbar_mux_002:sink1_startofpacket
	wire  [98:0] rsp_xbar_demux_001_src2_data;                                                              // rsp_xbar_demux_001:src2_data -> rsp_xbar_mux_002:sink1_data
	wire   [2:0] rsp_xbar_demux_001_src2_channel;                                                           // rsp_xbar_demux_001:src2_channel -> rsp_xbar_mux_002:sink1_channel
	wire         rsp_xbar_demux_001_src2_ready;                                                             // rsp_xbar_mux_002:sink1_ready -> rsp_xbar_demux_001:src2_ready
	wire         rsp_xbar_demux_002_src0_endofpacket;                                                       // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire         rsp_xbar_demux_002_src0_valid;                                                             // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire         rsp_xbar_demux_002_src0_startofpacket;                                                     // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [98:0] rsp_xbar_demux_002_src0_data;                                                              // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire   [2:0] rsp_xbar_demux_002_src0_channel;                                                           // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire         rsp_xbar_demux_002_src0_ready;                                                             // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire         rsp_xbar_demux_002_src1_endofpacket;                                                       // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire         rsp_xbar_demux_002_src1_valid;                                                             // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire         rsp_xbar_demux_002_src1_startofpacket;                                                     // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [98:0] rsp_xbar_demux_002_src1_data;                                                              // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire   [2:0] rsp_xbar_demux_002_src1_channel;                                                           // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire         rsp_xbar_demux_002_src1_ready;                                                             // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire         rsp_xbar_demux_002_src2_endofpacket;                                                       // rsp_xbar_demux_002:src2_endofpacket -> rsp_xbar_mux_002:sink2_endofpacket
	wire         rsp_xbar_demux_002_src2_valid;                                                             // rsp_xbar_demux_002:src2_valid -> rsp_xbar_mux_002:sink2_valid
	wire         rsp_xbar_demux_002_src2_startofpacket;                                                     // rsp_xbar_demux_002:src2_startofpacket -> rsp_xbar_mux_002:sink2_startofpacket
	wire  [98:0] rsp_xbar_demux_002_src2_data;                                                              // rsp_xbar_demux_002:src2_data -> rsp_xbar_mux_002:sink2_data
	wire   [2:0] rsp_xbar_demux_002_src2_channel;                                                           // rsp_xbar_demux_002:src2_channel -> rsp_xbar_mux_002:sink2_channel
	wire         rsp_xbar_demux_002_src2_ready;                                                             // rsp_xbar_mux_002:sink2_ready -> rsp_xbar_demux_002:src2_ready
	wire   [2:0] limiter_cmd_valid_data;                                                                    // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_read_master_translator (
		.clk                      (clk_clk_clk),                                                          //                       clk.clk
		.reset                    (dma_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address              (dma_0_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (dma_0_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (dma_0_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (dma_0_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (dma_0_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (dma_0_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect            (dma_0_read_master_chipselect),                                         //                          .chipselect
		.av_read                  (dma_0_read_master_read),                                               //                          .read
		.av_readdata              (dma_0_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (dma_0_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                 //               (terminated)
		.av_byteenable            (4'b1111),                                                              //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_write                 (1'b0),                                                                 //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                 //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_write_master_translator (
		.clk                      (clk_clk_clk),                                                           //                       clk.clk
		.reset                    (dma_0_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address              (dma_0_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (dma_0_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (dma_0_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (dma_0_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (dma_0_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (dma_0_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (dma_0_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect            (dma_0_write_master_chipselect),                                         //                          .chipselect
		.av_write                 (dma_0_write_master_write),                                              //                          .write
		.av_writedata             (dma_0_write_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                  //               (terminated)
		.av_begintransfer         (1'b0),                                                                  //               (terminated)
		.av_read                  (1'b0),                                                                  //               (terminated)
		.av_readdata              (),                                                                      //               (terminated)
		.av_readdatavalid         (),                                                                      //               (terminated)
		.av_lock                  (1'b0),                                                                  //               (terminated)
		.av_debugaccess           (1'b0),                                                                  //               (terminated)
		.uav_clken                (),                                                                      //               (terminated)
		.av_clken                 (1'b1),                                                                  //               (terminated)
		.uav_response             (2'b00),                                                                 //               (terminated)
		.av_response              (),                                                                      //               (terminated)
		.uav_writeresponserequest (),                                                                      //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                  //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid    ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) utlb_0_avalon_master_translator (
		.clk                      (clk_clk_clk),                                                             //                       clk.clk
		.reset                    (dma_0_reset_reset_bridge_in_reset_reset),                                 //                     reset.reset
		.uav_address              (utlb_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (utlb_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (utlb_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (utlb_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (utlb_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (utlb_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (utlb_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (utlb_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (utlb_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (utlb_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (utlb_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (utlb_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (utlb_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (utlb_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                  (utlb_0_avalon_master_read),                                               //                          .read
		.av_readdata              (utlb_0_avalon_master_readdata),                                           //                          .readdata
		.av_write                 (utlb_0_avalon_master_write),                                              //                          .write
		.av_writedata             (utlb_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                    //               (terminated)
		.av_readdatavalid         (),                                                                        //               (terminated)
		.av_lock                  (1'b0),                                                                    //               (terminated)
		.av_debugaccess           (1'b0),                                                                    //               (terminated)
		.uav_clken                (),                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                   //               (terminated)
		.av_response              (),                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) scratchpad_0_s1_translator (
		.clk                      (clk_clk_clk),                                                                //                      clk.clk
		.reset                    (dma_0_reset_reset_bridge_in_reset_reset),                                    //                    reset.reset
		.uav_address              (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (scratchpad_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (scratchpad_0_s1_write),                                                      //                         .write
		.av_readdata              (scratchpad_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (scratchpad_0_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (scratchpad_0_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (scratchpad_0_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (scratchpad_0_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                           //              (terminated)
		.av_begintransfer         (),                                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                                           //              (terminated)
		.av_burstcount            (),                                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                                       //              (terminated)
		.av_waitrequest           (1'b0),                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                           //              (terminated)
		.av_lock                  (),                                                                           //              (terminated)
		.uav_clken                (1'b0),                                                                       //              (terminated)
		.av_debugaccess           (),                                                                           //              (terminated)
		.av_outputenable          (),                                                                           //              (terminated)
		.uav_response             (),                                                                           //              (terminated)
		.av_response              (2'b00),                                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                                           //              (terminated)
		.av_writeresponserequest  (),                                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) out_system_bridge_s0_translator (
		.clk                      (clk_clk_clk),                                                                     //                      clk.clk
		.reset                    (dma_0_reset_reset_bridge_in_reset_reset),                                         //                    reset.reset
		.uav_address              (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (out_system_bridge_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (out_system_bridge_s0_write),                                                      //                         .write
		.av_read                  (out_system_bridge_s0_read),                                                       //                         .read
		.av_readdata              (out_system_bridge_s0_readdata),                                                   //                         .readdata
		.av_writedata             (out_system_bridge_s0_writedata),                                                  //                         .writedata
		.av_burstcount            (out_system_bridge_s0_burstcount),                                                 //                         .burstcount
		.av_byteenable            (out_system_bridge_s0_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (out_system_bridge_s0_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (out_system_bridge_s0_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (out_system_bridge_s0_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                //              (terminated)
		.av_beginbursttransfer    (),                                                                                //              (terminated)
		.av_writebyteenable       (),                                                                                //              (terminated)
		.av_lock                  (),                                                                                //              (terminated)
		.av_chipselect            (),                                                                                //              (terminated)
		.av_clken                 (),                                                                                //              (terminated)
		.uav_clken                (1'b0),                                                                            //              (terminated)
		.av_outputenable          (),                                                                                //              (terminated)
		.uav_response             (),                                                                                //              (terminated)
		.av_response              (2'b00),                                                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                                                //              (terminated)
		.av_writeresponserequest  (),                                                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) scratchpad_1_s1_translator (
		.clk                      (clk_clk_clk),                                                                //                      clk.clk
		.reset                    (dma_0_reset_reset_bridge_in_reset_reset),                                    //                    reset.reset
		.uav_address              (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (scratchpad_1_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (scratchpad_1_s1_write),                                                      //                         .write
		.av_readdata              (scratchpad_1_s1_readdata),                                                   //                         .readdata
		.av_writedata             (scratchpad_1_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (scratchpad_1_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (scratchpad_1_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (scratchpad_1_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                           //              (terminated)
		.av_begintransfer         (),                                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                                           //              (terminated)
		.av_burstcount            (),                                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                                       //              (terminated)
		.av_waitrequest           (1'b0),                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                           //              (terminated)
		.av_lock                  (),                                                                           //              (terminated)
		.uav_clken                (1'b0),                                                                       //              (terminated)
		.av_debugaccess           (),                                                                           //              (terminated)
		.av_outputenable          (),                                                                           //              (terminated)
		.uav_response             (),                                                                           //              (terminated)
		.av_response              (2'b00),                                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                                           //              (terminated)
		.av_writeresponserequest  (),                                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_read_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_clk_clk),                                                                   //       clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.av_address              (dma_0_read_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (dma_0_read_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (dma_0_read_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (dma_0_read_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (dma_0_read_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (dma_0_read_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (dma_0_read_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (dma_0_read_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                         //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                          //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                       //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                   //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                         //          .ready
		.av_response             (),                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_write_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_clk_clk),                                                                    //       clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.av_address              (dma_0_write_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (dma_0_write_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (dma_0_write_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (dma_0_write_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (dma_0_write_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (dma_0_write_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (dma_0_write_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (dma_0_write_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                     //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                      //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                     //          .ready
		.av_response             (),                                                                               // (terminated)
		.av_writeresponserequest (1'b0),                                                                           // (terminated)
		.av_writeresponsevalid   ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) utlb_0_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_clk_clk),                                                                      //       clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address              (utlb_0_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (utlb_0_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (utlb_0_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (utlb_0_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (utlb_0_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (utlb_0_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (utlb_0_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (utlb_0_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (utlb_0_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (utlb_0_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (utlb_0_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_002_src_valid),                                                       //        rp.valid
		.rp_data                 (rsp_xbar_mux_002_src_data),                                                        //          .data
		.rp_channel              (rsp_xbar_mux_002_src_channel),                                                     //          .channel
		.rp_startofpacket        (rsp_xbar_mux_002_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_002_src_endofpacket),                                                 //          .endofpacket
		.rp_ready                (rsp_xbar_mux_002_src_ready),                                                       //          .ready
		.av_response             (),                                                                                 // (terminated)
		.av_writeresponserequest (1'b0),                                                                             // (terminated)
		.av_writeresponsevalid   ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) scratchpad_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_clk_clk),                                                                          //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                                              //       clk_reset.reset
		.m0_address              (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                               //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                               //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                                //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                                       //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                         //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                             //                .channel
		.rf_sink_ready           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                //     (terminated)
		.m0_writeresponserequest (),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                          //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_data           (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) out_system_bridge_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_clk_clk),                                                                               //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                                                   //       clk_reset.reset
		.m0_address              (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_001_src_ready),                                                                //              cp.ready
		.cp_valid                (cmd_xbar_mux_001_src_valid),                                                                //                .valid
		.cp_data                 (cmd_xbar_mux_001_src_data),                                                                 //                .data
		.cp_startofpacket        (cmd_xbar_mux_001_src_startofpacket),                                                        //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_001_src_endofpacket),                                                          //                .endofpacket
		.cp_channel              (cmd_xbar_mux_001_src_channel),                                                              //                .channel
		.rf_sink_ready           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponserequest (),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                               //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.in_data           (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                     // (terminated)
		.csr_read          (1'b0),                                                                                      // (terminated)
		.csr_write         (1'b0),                                                                                      // (terminated)
		.csr_readdata      (),                                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                      // (terminated)
		.almost_full_data  (),                                                                                          // (terminated)
		.almost_empty_data (),                                                                                          // (terminated)
		.in_empty          (1'b0),                                                                                      // (terminated)
		.out_empty         (),                                                                                          // (terminated)
		.in_error          (1'b0),                                                                                      // (terminated)
		.out_error         (),                                                                                          // (terminated)
		.in_channel        (1'b0),                                                                                      // (terminated)
		.out_channel       ()                                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) scratchpad_1_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_clk_clk),                                                                          //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                                              //       clk_reset.reset
		.m0_address              (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_002_src_ready),                                                           //              cp.ready
		.cp_valid                (cmd_xbar_mux_002_src_valid),                                                           //                .valid
		.cp_data                 (cmd_xbar_mux_002_src_data),                                                            //                .data
		.cp_startofpacket        (cmd_xbar_mux_002_src_startofpacket),                                                   //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_002_src_endofpacket),                                                     //                .endofpacket
		.cp_channel              (cmd_xbar_mux_002_src_channel),                                                         //                .channel
		.rf_sink_ready           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                //     (terminated)
		.m0_writeresponserequest (),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                          //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_data           (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	nios_fprint_processor1_0_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_read_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                   //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                         //       src.ready
		.src_valid          (addr_router_src_valid),                                                         //          .valid
		.src_data           (addr_router_src_data),                                                          //          .data
		.src_channel        (addr_router_src_channel),                                                       //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                    //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_addr_router addr_router_001 (
		.sink_ready         (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_write_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                    //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                      //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                      //          .valid
		.src_data           (addr_router_001_src_data),                                                       //          .data
		.src_channel        (addr_router_001_src_channel),                                                    //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                 //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_addr_router addr_router_002 (
		.sink_ready         (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (utlb_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                      //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                        //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                        //          .valid
		.src_data           (addr_router_002_src_data),                                                         //          .data
		.src_channel        (addr_router_002_src_channel),                                                      //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                   //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_id_router id_router (
		.sink_ready         (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (scratchpad_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                        //       src.ready
		.src_valid          (id_router_src_valid),                                                        //          .valid
		.src_data           (id_router_src_data),                                                         //          .data
		.src_channel        (id_router_src_channel),                                                      //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                   //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_id_router id_router_001 (
		.sink_ready         (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (out_system_bridge_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                     //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                         //       src.ready
		.src_valid          (id_router_001_src_valid),                                                         //          .valid
		.src_data           (id_router_001_src_data),                                                          //          .data
		.src_channel        (id_router_001_src_channel),                                                       //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                    //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_id_router id_router_002 (
		.sink_ready         (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (scratchpad_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                    //       src.ready
		.src_valid          (id_router_002_src_valid),                                                    //          .valid
		.src_data           (id_router_002_src_data),                                                     //          .data
		.src_channel        (id_router_002_src_channel),                                                  //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (84),
		.PKT_SRC_ID_H              (83),
		.PKT_SRC_ID_L              (82),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (clk_clk_clk),                             //       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                   //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                   //          .valid
		.cmd_sink_data          (addr_router_src_data),                    //          .data
		.cmd_sink_channel       (addr_router_src_channel),                 //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),           //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),             //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                   //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                    //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                 //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),           //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),             //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                  //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                   //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),            //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                   //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                   //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                    //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                 //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),           //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),             //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                   // cmd_valid.data
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_clk_clk),                             //        clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                   //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                 //           .channel
		.sink_data          (limiter_cmd_src_data),                    //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),           //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),             //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                  // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),               //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),               //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),             //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),       //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),         //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),               //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),               //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),             //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),       //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),         //           .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),               //       src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),               //           .valid
		.src2_data          (cmd_xbar_demux_src2_data),                //           .data
		.src2_channel       (cmd_xbar_demux_src2_channel),             //           .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),       //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket)          //           .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_001 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),               //      sink.ready
		.sink_channel       (addr_router_001_src_channel),             //          .channel
		.sink_data          (addr_router_001_src_data),                //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),           //      src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),           //          .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),            //          .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),         //          .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),           //      src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),           //          .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),            //          .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),         //          .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_002 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_002_src_ready),               //      sink.ready
		.sink_channel       (addr_router_002_src_channel),             //          .channel
		.sink_data          (addr_router_002_src_data),                //          .data
		.sink_startofpacket (addr_router_002_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_002_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_002_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_002_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket),     //          .endofpacket
		.src1_ready         (cmd_xbar_demux_002_src1_ready),           //      src1.ready
		.src1_valid         (cmd_xbar_demux_002_src1_valid),           //          .valid
		.src1_data          (cmd_xbar_demux_002_src1_data),            //          .data
		.src1_channel       (cmd_xbar_demux_002_src1_channel),         //          .channel
		.src1_startofpacket (cmd_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_002_src1_endofpacket),     //          .endofpacket
		.src2_ready         (cmd_xbar_demux_002_src2_ready),           //      src2.ready
		.src2_valid         (cmd_xbar_demux_002_src2_valid),           //          .valid
		.src2_data          (cmd_xbar_demux_002_src2_data),            //          .data
		.src2_channel       (cmd_xbar_demux_002_src2_channel),         //          .channel
		.src2_startofpacket (cmd_xbar_demux_002_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_002_src2_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),           //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),           //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),         //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),            //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src1_ready),           //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src1_valid),           //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src1_channel),         //          .channel
		.sink2_data          (cmd_xbar_demux_002_src1_data),            //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src1_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket),     //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src2_ready),           //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src2_valid),           //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src2_channel),         //          .channel
		.sink2_data          (cmd_xbar_demux_002_src2_data),            //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src2_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src2_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_demux_001 rsp_xbar_demux (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                     //      sink.ready
		.sink_channel       (id_router_src_channel),                   //          .channel
		.sink_data          (id_router_src_data),                      //          .data
		.sink_startofpacket (id_router_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket),         //          .endofpacket
		.src2_ready         (rsp_xbar_demux_src2_ready),               //      src2.ready
		.src2_valid         (rsp_xbar_demux_src2_valid),               //          .valid
		.src2_data          (rsp_xbar_demux_src2_data),                //          .data
		.src2_channel       (rsp_xbar_demux_src2_channel),             //          .channel
		.src2_startofpacket (rsp_xbar_demux_src2_startofpacket),       //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_src2_endofpacket)          //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_demux_001 rsp_xbar_demux_001 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                 //      sink.ready
		.sink_channel       (id_router_001_src_channel),               //          .channel
		.sink_data          (id_router_001_src_data),                  //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.src2_ready         (rsp_xbar_demux_001_src2_ready),           //      src2.ready
		.src2_valid         (rsp_xbar_demux_001_src2_valid),           //          .valid
		.src2_data          (rsp_xbar_demux_001_src2_data),            //          .data
		.src2_channel       (rsp_xbar_demux_001_src2_channel),         //          .channel
		.src2_startofpacket (rsp_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_cmd_xbar_demux_001 rsp_xbar_demux_002 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                 //      sink.ready
		.sink_channel       (id_router_002_src_channel),               //          .channel
		.sink_data          (id_router_002_src_data),                  //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket),     //          .endofpacket
		.src2_ready         (rsp_xbar_demux_002_src2_ready),           //      src2.ready
		.src2_valid         (rsp_xbar_demux_002_src2_valid),           //          .valid
		.src2_data          (rsp_xbar_demux_002_src2_data),            //          .data
		.src2_channel       (rsp_xbar_demux_002_src2_channel),         //          .channel
		.src2_startofpacket (rsp_xbar_demux_002_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_002_src2_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                  //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                  //          .valid
		.src_data            (rsp_xbar_mux_src_data),                   //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),               //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),               //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),             //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),         //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),           //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),           //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),         //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),            //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),           //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),           //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),         //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),            //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),               //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),               //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),             //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),         //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),           //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),           //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),         //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),            //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src1_ready),           //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src1_valid),           //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src1_channel),         //          .channel
		.sink2_data          (rsp_xbar_demux_002_src1_data),            //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src1_endofpacket)      //          .endofpacket
	);

	nios_fprint_processor1_0_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_002 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src2_ready),               //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src2_valid),               //          .valid
		.sink0_channel       (rsp_xbar_demux_src2_channel),             //          .channel
		.sink0_data          (rsp_xbar_demux_src2_data),                //          .data
		.sink0_startofpacket (rsp_xbar_demux_src2_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src2_endofpacket),         //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src2_ready),           //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src2_valid),           //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src2_channel),         //          .channel
		.sink1_data          (rsp_xbar_demux_001_src2_data),            //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src2_endofpacket),     //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src2_ready),           //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src2_valid),           //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src2_channel),         //          .channel
		.sink2_data          (rsp_xbar_demux_002_src2_data),            //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src2_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src2_endofpacket)      //          .endofpacket
	);

endmodule
