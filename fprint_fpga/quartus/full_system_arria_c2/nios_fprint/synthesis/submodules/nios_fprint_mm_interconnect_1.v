// nios_fprint_mm_interconnect_1.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2015.07.20.13:35:41

`timescale 1 ps / 1 ps
module nios_fprint_mm_interconnect_1 (
		input  wire        clk_0_clk_clk,                                                                  //                                                                clk_0_clk.clk
		input  wire        mutex_0_reset_reset_bridge_in_reset_reset,                                      //                                      mutex_0_reset_reset_bridge_in_reset.reset
		input  wire        processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset, // processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire        processor0_0_reset_reset_bridge_in_reset_reset,                                 //                                 processor0_0_reset_reset_bridge_in_reset.reset
		input  wire        processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset,      //      processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        processor1_0_reset_reset_bridge_in_reset_reset,                                 //                                 processor1_0_reset_reset_bridge_in_reset.reset
		input  wire        processorM_0_reset_reset_bridge_in_reset_reset,                                 //                                 processorM_0_reset_reset_bridge_in_reset.reset
		input  wire [26:0] processor0_0_fingerprint_0_avalon_master_address,                               //                                 processor0_0_fingerprint_0_avalon_master.address
		output wire        processor0_0_fingerprint_0_avalon_master_waitrequest,                           //                                                                         .waitrequest
		input  wire        processor0_0_fingerprint_0_avalon_master_read,                                  //                                                                         .read
		output wire [31:0] processor0_0_fingerprint_0_avalon_master_readdata,                              //                                                                         .readdata
		input  wire        processor0_0_fingerprint_0_avalon_master_write,                                 //                                                                         .write
		input  wire [31:0] processor0_0_fingerprint_0_avalon_master_writedata,                             //                                                                         .writedata
		input  wire [25:0] processor0_0_out_system_bridge_m0_address,                                      //                                        processor0_0_out_system_bridge_m0.address
		output wire        processor0_0_out_system_bridge_m0_waitrequest,                                  //                                                                         .waitrequest
		input  wire [0:0]  processor0_0_out_system_bridge_m0_burstcount,                                   //                                                                         .burstcount
		input  wire [3:0]  processor0_0_out_system_bridge_m0_byteenable,                                   //                                                                         .byteenable
		input  wire        processor0_0_out_system_bridge_m0_read,                                         //                                                                         .read
		output wire [31:0] processor0_0_out_system_bridge_m0_readdata,                                     //                                                                         .readdata
		output wire        processor0_0_out_system_bridge_m0_readdatavalid,                                //                                                                         .readdatavalid
		input  wire        processor0_0_out_system_bridge_m0_write,                                        //                                                                         .write
		input  wire [31:0] processor0_0_out_system_bridge_m0_writedata,                                    //                                                                         .writedata
		input  wire        processor0_0_out_system_bridge_m0_debugaccess,                                  //                                                                         .debugaccess
		input  wire [26:0] processor1_0_fingerprint_0_avalon_master_address,                               //                                 processor1_0_fingerprint_0_avalon_master.address
		output wire        processor1_0_fingerprint_0_avalon_master_waitrequest,                           //                                                                         .waitrequest
		input  wire        processor1_0_fingerprint_0_avalon_master_read,                                  //                                                                         .read
		output wire [31:0] processor1_0_fingerprint_0_avalon_master_readdata,                              //                                                                         .readdata
		input  wire        processor1_0_fingerprint_0_avalon_master_write,                                 //                                                                         .write
		input  wire [31:0] processor1_0_fingerprint_0_avalon_master_writedata,                             //                                                                         .writedata
		input  wire [25:0] processor1_0_outgoing_master_address,                                           //                                             processor1_0_outgoing_master.address
		output wire        processor1_0_outgoing_master_waitrequest,                                       //                                                                         .waitrequest
		input  wire [0:0]  processor1_0_outgoing_master_burstcount,                                        //                                                                         .burstcount
		input  wire [3:0]  processor1_0_outgoing_master_byteenable,                                        //                                                                         .byteenable
		input  wire        processor1_0_outgoing_master_read,                                              //                                                                         .read
		output wire [31:0] processor1_0_outgoing_master_readdata,                                          //                                                                         .readdata
		output wire        processor1_0_outgoing_master_readdatavalid,                                     //                                                                         .readdatavalid
		input  wire        processor1_0_outgoing_master_write,                                             //                                                                         .write
		input  wire [31:0] processor1_0_outgoing_master_writedata,                                         //                                                                         .writedata
		input  wire        processor1_0_outgoing_master_debugaccess,                                       //                                                                         .debugaccess
		input  wire [26:0] processorM_0_outgoing_master_address,                                           //                                             processorM_0_outgoing_master.address
		output wire        processorM_0_outgoing_master_waitrequest,                                       //                                                                         .waitrequest
		input  wire [0:0]  processorM_0_outgoing_master_burstcount,                                        //                                                                         .burstcount
		input  wire [3:0]  processorM_0_outgoing_master_byteenable,                                        //                                                                         .byteenable
		input  wire        processorM_0_outgoing_master_read,                                              //                                                                         .read
		output wire [31:0] processorM_0_outgoing_master_readdata,                                          //                                                                         .readdata
		output wire        processorM_0_outgoing_master_readdatavalid,                                     //                                                                         .readdatavalid
		input  wire        processorM_0_outgoing_master_write,                                             //                                                                         .write
		input  wire [31:0] processorM_0_outgoing_master_writedata,                                         //                                                                         .writedata
		input  wire        processorM_0_outgoing_master_debugaccess,                                       //                                                                         .debugaccess
		output wire [9:0]  cfpu_0_csr_address,                                                             //                                                               cfpu_0_csr.address
		output wire        cfpu_0_csr_write,                                                               //                                                                         .write
		output wire        cfpu_0_csr_read,                                                                //                                                                         .read
		input  wire [31:0] cfpu_0_csr_readdata,                                                            //                                                                         .readdata
		output wire [31:0] cfpu_0_csr_writedata,                                                           //                                                                         .writedata
		input  wire        cfpu_0_csr_waitrequest,                                                         //                                                                         .waitrequest
		output wire [24:0] mm_bridge_0_s0_address,                                                         //                                                           mm_bridge_0_s0.address
		output wire        mm_bridge_0_s0_write,                                                           //                                                                         .write
		output wire        mm_bridge_0_s0_read,                                                            //                                                                         .read
		input  wire [31:0] mm_bridge_0_s0_readdata,                                                        //                                                                         .readdata
		output wire [31:0] mm_bridge_0_s0_writedata,                                                       //                                                                         .writedata
		output wire [0:0]  mm_bridge_0_s0_burstcount,                                                      //                                                                         .burstcount
		output wire [3:0]  mm_bridge_0_s0_byteenable,                                                      //                                                                         .byteenable
		input  wire        mm_bridge_0_s0_readdatavalid,                                                   //                                                                         .readdatavalid
		input  wire        mm_bridge_0_s0_waitrequest,                                                     //                                                                         .waitrequest
		output wire        mm_bridge_0_s0_debugaccess,                                                     //                                                                         .debugaccess
		output wire [0:0]  mutex_0_s1_address,                                                             //                                                               mutex_0_s1.address
		output wire        mutex_0_s1_write,                                                               //                                                                         .write
		output wire        mutex_0_s1_read,                                                                //                                                                         .read
		input  wire [31:0] mutex_0_s1_readdata,                                                            //                                                                         .readdata
		output wire [31:0] mutex_0_s1_writedata,                                                           //                                                                         .writedata
		output wire        mutex_0_s1_chipselect,                                                          //                                                                         .chipselect
		output wire [7:0]  processor0_0_cpu_irq_0_s0_address,                                              //                                                processor0_0_cpu_irq_0_s0.address
		output wire        processor0_0_cpu_irq_0_s0_write,                                                //                                                                         .write
		output wire [31:0] processor0_0_cpu_irq_0_s0_writedata,                                            //                                                                         .writedata
		output wire [2:0]  processor0_0_dma_0_control_port_slave_address,                                  //                                    processor0_0_dma_0_control_port_slave.address
		output wire        processor0_0_dma_0_control_port_slave_write,                                    //                                                                         .write
		input  wire [26:0] processor0_0_dma_0_control_port_slave_readdata,                                 //                                                                         .readdata
		output wire [26:0] processor0_0_dma_0_control_port_slave_writedata,                                //                                                                         .writedata
		output wire        processor0_0_dma_0_control_port_slave_chipselect,                               //                                                                         .chipselect
		output wire [7:0]  processor0_0_sw_reset_0_s0_1_address,                                           //                                             processor0_0_sw_reset_0_s0_1.address
		output wire        processor0_0_sw_reset_0_s0_1_write,                                             //                                                                         .write
		output wire        processor0_0_sw_reset_0_s0_1_read,                                              //                                                                         .read
		input  wire [31:0] processor0_0_sw_reset_0_s0_1_readdata,                                          //                                                                         .readdata
		output wire [31:0] processor0_0_sw_reset_0_s0_1_writedata,                                         //                                                                         .writedata
		input  wire        processor0_0_sw_reset_0_s0_1_waitrequest,                                       //                                                                         .waitrequest
		output wire [7:0]  processor1_0_cpu1_irq_0_s0_address,                                             //                                               processor1_0_cpu1_irq_0_s0.address
		output wire        processor1_0_cpu1_irq_0_s0_write,                                               //                                                                         .write
		output wire [31:0] processor1_0_cpu1_irq_0_s0_writedata,                                           //                                                                         .writedata
		output wire [2:0]  processor1_0_dma_0_control_port_slave_address,                                  //                                    processor1_0_dma_0_control_port_slave.address
		output wire        processor1_0_dma_0_control_port_slave_write,                                    //                                                                         .write
		input  wire [26:0] processor1_0_dma_0_control_port_slave_readdata,                                 //                                                                         .readdata
		output wire [26:0] processor1_0_dma_0_control_port_slave_writedata,                                //                                                                         .writedata
		output wire        processor1_0_dma_0_control_port_slave_chipselect,                               //                                                                         .chipselect
		output wire [7:0]  processor1_0_sw_reset_0_s0_address,                                             //                                               processor1_0_sw_reset_0_s0.address
		output wire        processor1_0_sw_reset_0_s0_write,                                               //                                                                         .write
		output wire        processor1_0_sw_reset_0_s0_read,                                                //                                                                         .read
		input  wire [31:0] processor1_0_sw_reset_0_s0_readdata,                                            //                                                                         .readdata
		output wire [31:0] processor1_0_sw_reset_0_s0_writedata,                                           //                                                                         .writedata
		input  wire        processor1_0_sw_reset_0_s0_waitrequest,                                         //                                                                         .waitrequest
		output wire [7:0]  processorM_0_cpu_irq_0_s0_address,                                              //                                                processorM_0_cpu_irq_0_s0.address
		output wire        processorM_0_cpu_irq_0_s0_write,                                                //                                                                         .write
		output wire [31:0] processorM_0_cpu_irq_0_s0_writedata,                                            //                                                                         .writedata
		output wire [7:0]  processorM_0_reset_monitor_0_s0_address,                                        //                                          processorM_0_reset_monitor_0_s0.address
		output wire        processorM_0_reset_monitor_0_s0_write,                                          //                                                                         .write
		output wire        processorM_0_reset_monitor_0_s0_read,                                           //                                                                         .read
		input  wire [31:0] processorM_0_reset_monitor_0_s0_readdata,                                       //                                                                         .readdata
		output wire [31:0] processorM_0_reset_monitor_0_s0_writedata,                                      //                                                                         .writedata
		input  wire        processorM_0_reset_monitor_0_s0_waitrequest,                                    //                                                                         .waitrequest
		output wire [7:0]  shared_memory_s1_address,                                                       //                                                         shared_memory_s1.address
		output wire        shared_memory_s1_write,                                                         //                                                                         .write
		input  wire [31:0] shared_memory_s1_readdata,                                                      //                                                                         .readdata
		output wire [31:0] shared_memory_s1_writedata,                                                     //                                                                         .writedata
		output wire [3:0]  shared_memory_s1_byteenable,                                                    //                                                                         .byteenable
		output wire        shared_memory_s1_chipselect,                                                    //                                                                         .chipselect
		output wire        shared_memory_s1_clken                                                          //                                                                         .clken
	);

	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_waitrequest;                              // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_waitrequest -> processor1_0_outgoing_master_translator:uav_waitrequest
	wire    [2:0] processor1_0_outgoing_master_translator_avalon_universal_master_0_burstcount;                               // processor1_0_outgoing_master_translator:uav_burstcount -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] processor1_0_outgoing_master_translator_avalon_universal_master_0_writedata;                                // processor1_0_outgoing_master_translator:uav_writedata -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [26:0] processor1_0_outgoing_master_translator_avalon_universal_master_0_address;                                  // processor1_0_outgoing_master_translator:uav_address -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_address
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_lock;                                     // processor1_0_outgoing_master_translator:uav_lock -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_lock
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_write;                                    // processor1_0_outgoing_master_translator:uav_write -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_write
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_read;                                     // processor1_0_outgoing_master_translator:uav_read -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] processor1_0_outgoing_master_translator_avalon_universal_master_0_readdata;                                 // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_readdata -> processor1_0_outgoing_master_translator:uav_readdata
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_debugaccess;                              // processor1_0_outgoing_master_translator:uav_debugaccess -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] processor1_0_outgoing_master_translator_avalon_universal_master_0_byteenable;                               // processor1_0_outgoing_master_translator:uav_byteenable -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid;                            // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> processor1_0_outgoing_master_translator:uav_readdatavalid
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_waitrequest;                         // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> processor0_0_out_system_bridge_m0_translator:uav_waitrequest
	wire    [2:0] processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_burstcount;                          // processor0_0_out_system_bridge_m0_translator:uav_burstcount -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_writedata;                           // processor0_0_out_system_bridge_m0_translator:uav_writedata -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [26:0] processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_address;                             // processor0_0_out_system_bridge_m0_translator:uav_address -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_address
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_lock;                                // processor0_0_out_system_bridge_m0_translator:uav_lock -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_write;                               // processor0_0_out_system_bridge_m0_translator:uav_write -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_write
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_read;                                // processor0_0_out_system_bridge_m0_translator:uav_read -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_readdata;                            // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_readdata -> processor0_0_out_system_bridge_m0_translator:uav_readdata
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_debugaccess;                         // processor0_0_out_system_bridge_m0_translator:uav_debugaccess -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_byteenable;                          // processor0_0_out_system_bridge_m0_translator:uav_byteenable -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_readdatavalid;                       // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> processor0_0_out_system_bridge_m0_translator:uav_readdatavalid
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_waitrequest;                              // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_waitrequest -> processorM_0_outgoing_master_translator:uav_waitrequest
	wire    [2:0] processorm_0_outgoing_master_translator_avalon_universal_master_0_burstcount;                               // processorM_0_outgoing_master_translator:uav_burstcount -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] processorm_0_outgoing_master_translator_avalon_universal_master_0_writedata;                                // processorM_0_outgoing_master_translator:uav_writedata -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [26:0] processorm_0_outgoing_master_translator_avalon_universal_master_0_address;                                  // processorM_0_outgoing_master_translator:uav_address -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_address
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_lock;                                     // processorM_0_outgoing_master_translator:uav_lock -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_lock
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_write;                                    // processorM_0_outgoing_master_translator:uav_write -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_write
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_read;                                     // processorM_0_outgoing_master_translator:uav_read -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] processorm_0_outgoing_master_translator_avalon_universal_master_0_readdata;                                 // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_readdata -> processorM_0_outgoing_master_translator:uav_readdata
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_debugaccess;                              // processorM_0_outgoing_master_translator:uav_debugaccess -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] processorm_0_outgoing_master_translator_avalon_universal_master_0_byteenable;                               // processorM_0_outgoing_master_translator:uav_byteenable -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid;                            // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> processorM_0_outgoing_master_translator:uav_readdatavalid
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_waitrequest;                  // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> processor1_0_fingerprint_0_avalon_master_translator:uav_waitrequest
	wire    [2:0] processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_burstcount;                   // processor1_0_fingerprint_0_avalon_master_translator:uav_burstcount -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_writedata;                    // processor1_0_fingerprint_0_avalon_master_translator:uav_writedata -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [26:0] processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_address;                      // processor1_0_fingerprint_0_avalon_master_translator:uav_address -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_lock;                         // processor1_0_fingerprint_0_avalon_master_translator:uav_lock -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_write;                        // processor1_0_fingerprint_0_avalon_master_translator:uav_write -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_read;                         // processor1_0_fingerprint_0_avalon_master_translator:uav_read -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdata;                     // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> processor1_0_fingerprint_0_avalon_master_translator:uav_readdata
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_debugaccess;                  // processor1_0_fingerprint_0_avalon_master_translator:uav_debugaccess -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_byteenable;                   // processor1_0_fingerprint_0_avalon_master_translator:uav_byteenable -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;                // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> processor1_0_fingerprint_0_avalon_master_translator:uav_readdatavalid
	wire          rsp_xbar_mux_003_src_endofpacket;                                                                           // rsp_xbar_mux_003:src_endofpacket -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_003_src_valid;                                                                                 // rsp_xbar_mux_003:src_valid -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_003_src_startofpacket;                                                                         // rsp_xbar_mux_003:src_startofpacket -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [102:0] rsp_xbar_mux_003_src_data;                                                                                  // rsp_xbar_mux_003:src_data -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_003_src_channel;                                                                               // rsp_xbar_mux_003:src_channel -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_003_src_ready;                                                                                 // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_003:src_ready
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_waitrequest;                  // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> processor0_0_fingerprint_0_avalon_master_translator:uav_waitrequest
	wire    [2:0] processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_burstcount;                   // processor0_0_fingerprint_0_avalon_master_translator:uav_burstcount -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_writedata;                    // processor0_0_fingerprint_0_avalon_master_translator:uav_writedata -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [26:0] processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_address;                      // processor0_0_fingerprint_0_avalon_master_translator:uav_address -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_lock;                         // processor0_0_fingerprint_0_avalon_master_translator:uav_lock -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_write;                        // processor0_0_fingerprint_0_avalon_master_translator:uav_write -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_read;                         // processor0_0_fingerprint_0_avalon_master_translator:uav_read -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdata;                     // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> processor0_0_fingerprint_0_avalon_master_translator:uav_readdata
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_debugaccess;                  // processor0_0_fingerprint_0_avalon_master_translator:uav_debugaccess -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_byteenable;                   // processor0_0_fingerprint_0_avalon_master_translator:uav_byteenable -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;                // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> processor0_0_fingerprint_0_avalon_master_translator:uav_readdatavalid
	wire          rsp_xbar_mux_004_src_endofpacket;                                                                           // rsp_xbar_mux_004:src_endofpacket -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_004_src_valid;                                                                                 // rsp_xbar_mux_004:src_valid -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_004_src_startofpacket;                                                                         // rsp_xbar_mux_004:src_startofpacket -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [102:0] rsp_xbar_mux_004_src_data;                                                                                  // rsp_xbar_mux_004:src_data -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_004_src_channel;                                                                               // rsp_xbar_mux_004:src_channel -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_004_src_ready;                                                                                 // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_004:src_ready
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                        // mutex_0_s1_translator:uav_waitrequest -> mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                         // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> mutex_0_s1_translator:uav_burstcount
	wire   [31:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                          // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> mutex_0_s1_translator:uav_writedata
	wire   [26:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                            // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> mutex_0_s1_translator:uav_address
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                              // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> mutex_0_s1_translator:uav_write
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                               // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> mutex_0_s1_translator:uav_lock
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                               // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> mutex_0_s1_translator:uav_read
	wire   [31:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                           // mutex_0_s1_translator:uav_readdata -> mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                      // mutex_0_s1_translator:uav_readdatavalid -> mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                        // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> mutex_0_s1_translator:uav_debugaccess
	wire    [3:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                         // mutex_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> mutex_0_s1_translator:uav_byteenable
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                                 // mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                       // mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                               // mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                        // mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                       // mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                              // mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                    // mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                            // mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                     // mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                    // mutex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                  // mutex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                   // mutex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                  // mutex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                               // cmd_xbar_mux:src_endofpacket -> mutex_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                                     // cmd_xbar_mux:src_valid -> mutex_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                             // cmd_xbar_mux:src_startofpacket -> mutex_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_src_data;                                                                                      // cmd_xbar_mux:src_data -> mutex_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_src_channel;                                                                                   // cmd_xbar_mux:src_channel -> mutex_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_src_ready;                                                                                     // mutex_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // processor1_0_cpu1_irq_0_s0_translator:uav_waitrequest -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> processor1_0_cpu1_irq_0_s0_translator:uav_burstcount
	wire   [31:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                          // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> processor1_0_cpu1_irq_0_s0_translator:uav_writedata
	wire   [26:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                            // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> processor1_0_cpu1_irq_0_s0_translator:uav_address
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                              // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> processor1_0_cpu1_irq_0_s0_translator:uav_write
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                               // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> processor1_0_cpu1_irq_0_s0_translator:uav_lock
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                               // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> processor1_0_cpu1_irq_0_s0_translator:uav_read
	wire   [31:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                           // processor1_0_cpu1_irq_0_s0_translator:uav_readdata -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // processor1_0_cpu1_irq_0_s0_translator:uav_readdatavalid -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processor1_0_cpu1_irq_0_s0_translator:uav_debugaccess
	wire    [3:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> processor1_0_cpu1_irq_0_s0_translator:uav_byteenable
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                        // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                           // cmd_xbar_mux_001:src_endofpacket -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                                 // cmd_xbar_mux_001:src_valid -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                                         // cmd_xbar_mux_001:src_startofpacket -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_001_src_data;                                                                                  // cmd_xbar_mux_001:src_data -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_001_src_channel;                                                                               // cmd_xbar_mux_001:src_channel -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                                 // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_001:src_ready
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // shared_memory_s1_translator:uav_waitrequest -> shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> shared_memory_s1_translator:uav_burstcount
	wire   [31:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> shared_memory_s1_translator:uav_writedata
	wire   [26:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_address -> shared_memory_s1_translator:uav_address
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_write -> shared_memory_s1_translator:uav_write
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_lock -> shared_memory_s1_translator:uav_lock
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_read -> shared_memory_s1_translator:uav_read
	wire   [31:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // shared_memory_s1_translator:uav_readdata -> shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // shared_memory_s1_translator:uav_readdatavalid -> shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> shared_memory_s1_translator:uav_debugaccess
	wire    [3:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // shared_memory_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> shared_memory_s1_translator:uav_byteenable
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // shared_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // shared_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // shared_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // shared_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_002_src_endofpacket;                                                                           // cmd_xbar_mux_002:src_endofpacket -> shared_memory_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                                 // cmd_xbar_mux_002:src_valid -> shared_memory_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                                         // cmd_xbar_mux_002:src_startofpacket -> shared_memory_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_002_src_data;                                                                                  // cmd_xbar_mux_002:src_data -> shared_memory_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_002_src_channel;                                                                               // cmd_xbar_mux_002:src_channel -> shared_memory_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                                 // shared_memory_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_002:src_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                    // mm_bridge_0_s0_translator:uav_waitrequest -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                                     // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> mm_bridge_0_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                                      // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> mm_bridge_0_s0_translator:uav_writedata
	wire   [26:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                                        // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> mm_bridge_0_s0_translator:uav_address
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                                          // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> mm_bridge_0_s0_translator:uav_write
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                                           // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> mm_bridge_0_s0_translator:uav_lock
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                                           // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> mm_bridge_0_s0_translator:uav_read
	wire   [31:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                                       // mm_bridge_0_s0_translator:uav_readdata -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                  // mm_bridge_0_s0_translator:uav_readdatavalid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> mm_bridge_0_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                                     // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> mm_bridge_0_s0_translator:uav_byteenable
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                             // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                                   // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                           // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                                   // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                          // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                        // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                 // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                              // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                               // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                              // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_003_src_endofpacket;                                                                           // cmd_xbar_mux_003:src_endofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                                 // cmd_xbar_mux_003:src_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                                         // cmd_xbar_mux_003:src_startofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_003_src_data;                                                                                  // cmd_xbar_mux_003:src_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_003_src_channel;                                                                               // cmd_xbar_mux_003:src_channel -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                                 // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_003:src_ready
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // processor0_0_cpu_irq_0_s0_translator:uav_waitrequest -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> processor0_0_cpu_irq_0_s0_translator:uav_burstcount
	wire   [31:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                           // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> processor0_0_cpu_irq_0_s0_translator:uav_writedata
	wire   [26:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                             // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> processor0_0_cpu_irq_0_s0_translator:uav_address
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                               // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> processor0_0_cpu_irq_0_s0_translator:uav_write
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                                // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> processor0_0_cpu_irq_0_s0_translator:uav_lock
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                                // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> processor0_0_cpu_irq_0_s0_translator:uav_read
	wire   [31:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                            // processor0_0_cpu_irq_0_s0_translator:uav_readdata -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // processor0_0_cpu_irq_0_s0_translator:uav_readdatavalid -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processor0_0_cpu_irq_0_s0_translator:uav_debugaccess
	wire    [3:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> processor0_0_cpu_irq_0_s0_translator:uav_byteenable
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                         // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_004_src_endofpacket;                                                                           // cmd_xbar_mux_004:src_endofpacket -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_004_src_valid;                                                                                 // cmd_xbar_mux_004:src_valid -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_004_src_startofpacket;                                                                         // cmd_xbar_mux_004:src_startofpacket -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_004_src_data;                                                                                  // cmd_xbar_mux_004:src_data -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_004_src_channel;                                                                               // cmd_xbar_mux_004:src_channel -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_004_src_ready;                                                                                 // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_004:src_ready
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // processorM_0_cpu_irq_0_s0_translator:uav_waitrequest -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> processorM_0_cpu_irq_0_s0_translator:uav_burstcount
	wire   [31:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                           // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> processorM_0_cpu_irq_0_s0_translator:uav_writedata
	wire   [26:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                             // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> processorM_0_cpu_irq_0_s0_translator:uav_address
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                               // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> processorM_0_cpu_irq_0_s0_translator:uav_write
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                                // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> processorM_0_cpu_irq_0_s0_translator:uav_lock
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                                // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> processorM_0_cpu_irq_0_s0_translator:uav_read
	wire   [31:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                            // processorM_0_cpu_irq_0_s0_translator:uav_readdata -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // processorM_0_cpu_irq_0_s0_translator:uav_readdatavalid -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processorM_0_cpu_irq_0_s0_translator:uav_debugaccess
	wire    [3:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> processorM_0_cpu_irq_0_s0_translator:uav_byteenable
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                         // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_005_src_endofpacket;                                                                           // cmd_xbar_mux_005:src_endofpacket -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_005_src_valid;                                                                                 // cmd_xbar_mux_005:src_valid -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_005_src_startofpacket;                                                                         // cmd_xbar_mux_005:src_startofpacket -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_005_src_data;                                                                                  // cmd_xbar_mux_005:src_data -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_005_src_channel;                                                                               // cmd_xbar_mux_005:src_channel -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_005_src_ready;                                                                                 // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_005:src_ready
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // processorM_0_reset_monitor_0_s0_translator:uav_waitrequest -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> processorM_0_reset_monitor_0_s0_translator:uav_burstcount
	wire   [31:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                     // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> processorM_0_reset_monitor_0_s0_translator:uav_writedata
	wire   [26:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                       // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> processorM_0_reset_monitor_0_s0_translator:uav_address
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                         // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> processorM_0_reset_monitor_0_s0_translator:uav_write
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                          // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> processorM_0_reset_monitor_0_s0_translator:uav_lock
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                          // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> processorM_0_reset_monitor_0_s0_translator:uav_read
	wire   [31:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                      // processorM_0_reset_monitor_0_s0_translator:uav_readdata -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // processorM_0_reset_monitor_0_s0_translator:uav_readdatavalid -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processorM_0_reset_monitor_0_s0_translator:uav_debugaccess
	wire    [3:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> processorM_0_reset_monitor_0_s0_translator:uav_byteenable
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                   // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_006_src_endofpacket;                                                                           // cmd_xbar_mux_006:src_endofpacket -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_006_src_valid;                                                                                 // cmd_xbar_mux_006:src_valid -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_006_src_startofpacket;                                                                         // cmd_xbar_mux_006:src_startofpacket -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_006_src_data;                                                                                  // cmd_xbar_mux_006:src_data -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_006_src_channel;                                                                               // cmd_xbar_mux_006:src_channel -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_006_src_ready;                                                                                 // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_006:src_ready
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                        // cfpu_0_csr_translator:uav_waitrequest -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;                                         // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> cfpu_0_csr_translator:uav_burstcount
	wire   [31:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_writedata;                                          // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> cfpu_0_csr_translator:uav_writedata
	wire   [26:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_address;                                            // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_address -> cfpu_0_csr_translator:uav_address
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_write;                                              // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_write -> cfpu_0_csr_translator:uav_write
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_lock;                                               // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_lock -> cfpu_0_csr_translator:uav_lock
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_read;                                               // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_read -> cfpu_0_csr_translator:uav_read
	wire   [31:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                                           // cfpu_0_csr_translator:uav_readdata -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                      // cfpu_0_csr_translator:uav_readdatavalid -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                        // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> cfpu_0_csr_translator:uav_debugaccess
	wire    [3:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;                                         // cfpu_0_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> cfpu_0_csr_translator:uav_byteenable
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                                 // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;                                       // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                               // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_data;                                        // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;                                       // cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                              // cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                    // cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                            // cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                     // cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                    // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                  // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                   // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                  // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_007_src_endofpacket;                                                                           // cmd_xbar_mux_007:src_endofpacket -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_007_src_valid;                                                                                 // cmd_xbar_mux_007:src_valid -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_007_src_startofpacket;                                                                         // cmd_xbar_mux_007:src_startofpacket -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_007_src_data;                                                                                  // cmd_xbar_mux_007:src_data -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_007_src_channel;                                                                               // cmd_xbar_mux_007:src_channel -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_007_src_ready;                                                                                 // cfpu_0_csr_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_007:src_ready
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // processor1_0_dma_0_control_port_slave_translator:uav_waitrequest -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> processor1_0_dma_0_control_port_slave_translator:uav_burstcount
	wire   [31:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> processor1_0_dma_0_control_port_slave_translator:uav_writedata
	wire   [26:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_address -> processor1_0_dma_0_control_port_slave_translator:uav_address
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_write -> processor1_0_dma_0_control_port_slave_translator:uav_write
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_lock -> processor1_0_dma_0_control_port_slave_translator:uav_lock
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_read -> processor1_0_dma_0_control_port_slave_translator:uav_read
	wire   [31:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // processor1_0_dma_0_control_port_slave_translator:uav_readdata -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // processor1_0_dma_0_control_port_slave_translator:uav_readdatavalid -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processor1_0_dma_0_control_port_slave_translator:uav_debugaccess
	wire    [3:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> processor1_0_dma_0_control_port_slave_translator:uav_byteenable
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_008_src_endofpacket;                                                                           // cmd_xbar_mux_008:src_endofpacket -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_008_src_valid;                                                                                 // cmd_xbar_mux_008:src_valid -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_008_src_startofpacket;                                                                         // cmd_xbar_mux_008:src_startofpacket -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_008_src_data;                                                                                  // cmd_xbar_mux_008:src_data -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_008_src_channel;                                                                               // cmd_xbar_mux_008:src_channel -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_008_src_ready;                                                                                 // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_008:src_ready
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // processor0_0_dma_0_control_port_slave_translator:uav_waitrequest -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> processor0_0_dma_0_control_port_slave_translator:uav_burstcount
	wire   [31:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> processor0_0_dma_0_control_port_slave_translator:uav_writedata
	wire   [26:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_address -> processor0_0_dma_0_control_port_slave_translator:uav_address
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_write -> processor0_0_dma_0_control_port_slave_translator:uav_write
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_lock -> processor0_0_dma_0_control_port_slave_translator:uav_lock
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_read -> processor0_0_dma_0_control_port_slave_translator:uav_read
	wire   [31:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // processor0_0_dma_0_control_port_slave_translator:uav_readdata -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // processor0_0_dma_0_control_port_slave_translator:uav_readdatavalid -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processor0_0_dma_0_control_port_slave_translator:uav_debugaccess
	wire    [3:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> processor0_0_dma_0_control_port_slave_translator:uav_byteenable
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_009_src_endofpacket;                                                                           // cmd_xbar_mux_009:src_endofpacket -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_009_src_valid;                                                                                 // cmd_xbar_mux_009:src_valid -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_009_src_startofpacket;                                                                         // cmd_xbar_mux_009:src_startofpacket -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_009_src_data;                                                                                  // cmd_xbar_mux_009:src_data -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_009_src_channel;                                                                               // cmd_xbar_mux_009:src_channel -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_009_src_ready;                                                                                 // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_009:src_ready
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // processor1_0_sw_reset_0_s0_translator:uav_waitrequest -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> processor1_0_sw_reset_0_s0_translator:uav_burstcount
	wire   [31:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                          // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> processor1_0_sw_reset_0_s0_translator:uav_writedata
	wire   [26:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                            // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> processor1_0_sw_reset_0_s0_translator:uav_address
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                              // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> processor1_0_sw_reset_0_s0_translator:uav_write
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                               // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> processor1_0_sw_reset_0_s0_translator:uav_lock
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                               // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> processor1_0_sw_reset_0_s0_translator:uav_read
	wire   [31:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                           // processor1_0_sw_reset_0_s0_translator:uav_readdata -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // processor1_0_sw_reset_0_s0_translator:uav_readdatavalid -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processor1_0_sw_reset_0_s0_translator:uav_debugaccess
	wire    [3:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> processor1_0_sw_reset_0_s0_translator:uav_byteenable
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                        // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_010_src_endofpacket;                                                                           // cmd_xbar_mux_010:src_endofpacket -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_010_src_valid;                                                                                 // cmd_xbar_mux_010:src_valid -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_010_src_startofpacket;                                                                         // cmd_xbar_mux_010:src_startofpacket -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_010_src_data;                                                                                  // cmd_xbar_mux_010:src_data -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_010_src_channel;                                                                               // cmd_xbar_mux_010:src_channel -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_010_src_ready;                                                                                 // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_010:src_ready
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                      // processor0_0_sw_reset_0_s0_1_translator:uav_waitrequest -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_burstcount;                       // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_burstcount -> processor0_0_sw_reset_0_s0_1_translator:uav_burstcount
	wire   [31:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_writedata;                        // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_writedata -> processor0_0_sw_reset_0_s0_1_translator:uav_writedata
	wire   [26:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_address;                          // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_address -> processor0_0_sw_reset_0_s0_1_translator:uav_address
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_write;                            // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_write -> processor0_0_sw_reset_0_s0_1_translator:uav_write
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_lock;                             // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_lock -> processor0_0_sw_reset_0_s0_1_translator:uav_lock
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_read;                             // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_read -> processor0_0_sw_reset_0_s0_1_translator:uav_read
	wire   [31:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_readdata;                         // processor0_0_sw_reset_0_s0_1_translator:uav_readdata -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                    // processor0_0_sw_reset_0_s0_1_translator:uav_readdatavalid -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                      // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> processor0_0_sw_reset_0_s0_1_translator:uav_debugaccess
	wire    [3:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_byteenable;                       // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:m0_byteenable -> processor0_0_sw_reset_0_s0_1_translator:uav_byteenable
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;               // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_valid;                     // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_source_valid -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;             // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [103:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_data;                      // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_source_data -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_ready;                     // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;            // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                  // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;          // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [103:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                   // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                  // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                 // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_011_src_endofpacket;                                                                           // cmd_xbar_mux_011:src_endofpacket -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_011_src_valid;                                                                                 // cmd_xbar_mux_011:src_valid -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_011_src_startofpacket;                                                                         // cmd_xbar_mux_011:src_startofpacket -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [102:0] cmd_xbar_mux_011_src_data;                                                                                  // cmd_xbar_mux_011:src_data -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_011_src_channel;                                                                               // cmd_xbar_mux_011:src_channel -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_011_src_ready;                                                                                 // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_011:src_ready
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                     // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_valid;                           // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                   // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [102:0] processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_data;                            // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_ready;                           // addr_router:sink_ready -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid;                      // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;              // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [102:0] processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_data;                       // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire          processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready;                      // addr_router_001:sink_ready -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                     // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_valid;                           // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                   // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [102:0] processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_data;                            // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_ready;                           // addr_router_002:sink_ready -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;         // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_003:sink_endofpacket
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;               // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_003:sink_valid
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket;       // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_003:sink_startofpacket
	wire  [102:0] processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data;                // processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_003:sink_data
	wire          processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;               // addr_router_003:sink_ready -> processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_003_src_endofpacket;                                                                            // addr_router_003:src_endofpacket -> cmd_xbar_demux_003:sink_endofpacket
	wire          addr_router_003_src_valid;                                                                                  // addr_router_003:src_valid -> cmd_xbar_demux_003:sink_valid
	wire          addr_router_003_src_startofpacket;                                                                          // addr_router_003:src_startofpacket -> cmd_xbar_demux_003:sink_startofpacket
	wire  [102:0] addr_router_003_src_data;                                                                                   // addr_router_003:src_data -> cmd_xbar_demux_003:sink_data
	wire   [11:0] addr_router_003_src_channel;                                                                                // addr_router_003:src_channel -> cmd_xbar_demux_003:sink_channel
	wire          addr_router_003_src_ready;                                                                                  // cmd_xbar_demux_003:sink_ready -> addr_router_003:src_ready
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;         // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_004:sink_endofpacket
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;               // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_004:sink_valid
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket;       // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_004:sink_startofpacket
	wire  [102:0] processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data;                // processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_004:sink_data
	wire          processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;               // addr_router_004:sink_ready -> processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_004_src_endofpacket;                                                                            // addr_router_004:src_endofpacket -> cmd_xbar_demux_004:sink_endofpacket
	wire          addr_router_004_src_valid;                                                                                  // addr_router_004:src_valid -> cmd_xbar_demux_004:sink_valid
	wire          addr_router_004_src_startofpacket;                                                                          // addr_router_004:src_startofpacket -> cmd_xbar_demux_004:sink_startofpacket
	wire  [102:0] addr_router_004_src_data;                                                                                   // addr_router_004:src_data -> cmd_xbar_demux_004:sink_data
	wire   [11:0] addr_router_004_src_channel;                                                                                // addr_router_004:src_channel -> cmd_xbar_demux_004:sink_channel
	wire          addr_router_004_src_ready;                                                                                  // cmd_xbar_demux_004:sink_ready -> addr_router_004:src_ready
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                        // mutex_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                              // mutex_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                      // mutex_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [102:0] mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                               // mutex_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                              // id_router:sink_ready -> mutex_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                                  // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                                        // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                                // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [102:0] id_router_src_data;                                                                                         // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [11:0] id_router_src_channel;                                                                                      // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                                        // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                              // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [102:0] processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                               // processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router_001:sink_ready -> processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                              // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                                    // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                            // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [102:0] id_router_001_src_data;                                                                                     // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [11:0] id_router_001_src_channel;                                                                                  // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                                    // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // shared_memory_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // shared_memory_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // shared_memory_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [102:0] shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // shared_memory_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_002:sink_ready -> shared_memory_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_002_src_endofpacket;                                                                              // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          id_router_002_src_valid;                                                                                    // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire          id_router_002_src_startofpacket;                                                                            // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [102:0] id_router_002_src_data;                                                                                     // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire   [11:0] id_router_002_src_channel;                                                                                  // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_002_src_ready;                                                                                    // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                                          // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                  // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [102:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                                           // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                                          // id_router_003:sink_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                              // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                                    // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                                            // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [102:0] id_router_003_src_data;                                                                                     // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire   [11:0] id_router_003_src_channel;                                                                                  // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                                    // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                               // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire  [102:0] processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                                // processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire          processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_004:sink_ready -> processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_004_src_endofpacket;                                                                              // id_router_004:src_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire          id_router_004_src_valid;                                                                                    // id_router_004:src_valid -> rsp_xbar_demux_004:sink_valid
	wire          id_router_004_src_startofpacket;                                                                            // id_router_004:src_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [102:0] id_router_004_src_data;                                                                                     // id_router_004:src_data -> rsp_xbar_demux_004:sink_data
	wire   [11:0] id_router_004_src_channel;                                                                                  // id_router_004:src_channel -> rsp_xbar_demux_004:sink_channel
	wire          id_router_004_src_ready;                                                                                    // rsp_xbar_demux_004:sink_ready -> id_router_004:src_ready
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_005:sink_endofpacket
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                               // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_005:sink_valid
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_005:sink_startofpacket
	wire  [102:0] processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                                // processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_005:sink_data
	wire          processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_005:sink_ready -> processorM_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_005_src_endofpacket;                                                                              // id_router_005:src_endofpacket -> rsp_xbar_demux_005:sink_endofpacket
	wire          id_router_005_src_valid;                                                                                    // id_router_005:src_valid -> rsp_xbar_demux_005:sink_valid
	wire          id_router_005_src_startofpacket;                                                                            // id_router_005:src_startofpacket -> rsp_xbar_demux_005:sink_startofpacket
	wire  [102:0] id_router_005_src_data;                                                                                     // id_router_005:src_data -> rsp_xbar_demux_005:sink_data
	wire   [11:0] id_router_005_src_channel;                                                                                  // id_router_005:src_channel -> rsp_xbar_demux_005:sink_channel
	wire          id_router_005_src_ready;                                                                                    // rsp_xbar_demux_005:sink_ready -> id_router_005:src_ready
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_006:sink_endofpacket
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                         // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_006:sink_valid
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_006:sink_startofpacket
	wire  [102:0] processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                          // processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_006:sink_data
	wire          processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                         // id_router_006:sink_ready -> processorM_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_006_src_endofpacket;                                                                              // id_router_006:src_endofpacket -> rsp_xbar_demux_006:sink_endofpacket
	wire          id_router_006_src_valid;                                                                                    // id_router_006:src_valid -> rsp_xbar_demux_006:sink_valid
	wire          id_router_006_src_startofpacket;                                                                            // id_router_006:src_startofpacket -> rsp_xbar_demux_006:sink_startofpacket
	wire  [102:0] id_router_006_src_data;                                                                                     // id_router_006:src_data -> rsp_xbar_demux_006:sink_data
	wire   [11:0] id_router_006_src_channel;                                                                                  // id_router_006:src_channel -> rsp_xbar_demux_006:sink_channel
	wire          id_router_006_src_ready;                                                                                    // rsp_xbar_demux_006:sink_ready -> id_router_006:src_ready
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                        // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_007:sink_endofpacket
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_valid;                                              // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_007:sink_valid
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                      // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_007:sink_startofpacket
	wire  [102:0] cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_data;                                               // cfpu_0_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router_007:sink_data
	wire          cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_ready;                                              // id_router_007:sink_ready -> cfpu_0_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_007_src_endofpacket;                                                                              // id_router_007:src_endofpacket -> rsp_xbar_demux_007:sink_endofpacket
	wire          id_router_007_src_valid;                                                                                    // id_router_007:src_valid -> rsp_xbar_demux_007:sink_valid
	wire          id_router_007_src_startofpacket;                                                                            // id_router_007:src_startofpacket -> rsp_xbar_demux_007:sink_startofpacket
	wire  [102:0] id_router_007_src_data;                                                                                     // id_router_007:src_data -> rsp_xbar_demux_007:sink_data
	wire   [11:0] id_router_007_src_channel;                                                                                  // id_router_007:src_channel -> rsp_xbar_demux_007:sink_channel
	wire          id_router_007_src_ready;                                                                                    // rsp_xbar_demux_007:sink_ready -> id_router_007:src_ready
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_008:sink_endofpacket
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_008:sink_valid
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_008:sink_startofpacket
	wire  [102:0] processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_008:sink_data
	wire          processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_008:sink_ready -> processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_008_src_endofpacket;                                                                              // id_router_008:src_endofpacket -> rsp_xbar_demux_008:sink_endofpacket
	wire          id_router_008_src_valid;                                                                                    // id_router_008:src_valid -> rsp_xbar_demux_008:sink_valid
	wire          id_router_008_src_startofpacket;                                                                            // id_router_008:src_startofpacket -> rsp_xbar_demux_008:sink_startofpacket
	wire  [102:0] id_router_008_src_data;                                                                                     // id_router_008:src_data -> rsp_xbar_demux_008:sink_data
	wire   [11:0] id_router_008_src_channel;                                                                                  // id_router_008:src_channel -> rsp_xbar_demux_008:sink_channel
	wire          id_router_008_src_ready;                                                                                    // rsp_xbar_demux_008:sink_ready -> id_router_008:src_ready
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_009:sink_endofpacket
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_009:sink_valid
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_009:sink_startofpacket
	wire  [102:0] processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_009:sink_data
	wire          processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_009:sink_ready -> processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_009_src_endofpacket;                                                                              // id_router_009:src_endofpacket -> rsp_xbar_demux_009:sink_endofpacket
	wire          id_router_009_src_valid;                                                                                    // id_router_009:src_valid -> rsp_xbar_demux_009:sink_valid
	wire          id_router_009_src_startofpacket;                                                                            // id_router_009:src_startofpacket -> rsp_xbar_demux_009:sink_startofpacket
	wire  [102:0] id_router_009_src_data;                                                                                     // id_router_009:src_data -> rsp_xbar_demux_009:sink_data
	wire   [11:0] id_router_009_src_channel;                                                                                  // id_router_009:src_channel -> rsp_xbar_demux_009:sink_channel
	wire          id_router_009_src_ready;                                                                                    // rsp_xbar_demux_009:sink_ready -> id_router_009:src_ready
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_010:sink_endofpacket
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                              // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_010:sink_valid
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_010:sink_startofpacket
	wire  [102:0] processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                               // processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_010:sink_data
	wire          processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router_010:sink_ready -> processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_010_src_endofpacket;                                                                              // id_router_010:src_endofpacket -> rsp_xbar_demux_010:sink_endofpacket
	wire          id_router_010_src_valid;                                                                                    // id_router_010:src_valid -> rsp_xbar_demux_010:sink_valid
	wire          id_router_010_src_startofpacket;                                                                            // id_router_010:src_startofpacket -> rsp_xbar_demux_010:sink_startofpacket
	wire  [102:0] id_router_010_src_data;                                                                                     // id_router_010:src_data -> rsp_xbar_demux_010:sink_data
	wire   [11:0] id_router_010_src_channel;                                                                                  // id_router_010:src_channel -> rsp_xbar_demux_010:sink_channel
	wire          id_router_010_src_ready;                                                                                    // rsp_xbar_demux_010:sink_ready -> id_router_010:src_ready
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                      // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_011:sink_endofpacket
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_valid;                            // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_011:sink_valid
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                    // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_011:sink_startofpacket
	wire  [102:0] processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_data;                             // processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_011:sink_data
	wire          processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_ready;                            // id_router_011:sink_ready -> processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_011_src_endofpacket;                                                                              // id_router_011:src_endofpacket -> rsp_xbar_demux_011:sink_endofpacket
	wire          id_router_011_src_valid;                                                                                    // id_router_011:src_valid -> rsp_xbar_demux_011:sink_valid
	wire          id_router_011_src_startofpacket;                                                                            // id_router_011:src_startofpacket -> rsp_xbar_demux_011:sink_startofpacket
	wire  [102:0] id_router_011_src_data;                                                                                     // id_router_011:src_data -> rsp_xbar_demux_011:sink_data
	wire   [11:0] id_router_011_src_channel;                                                                                  // id_router_011:src_channel -> rsp_xbar_demux_011:sink_channel
	wire          id_router_011_src_ready;                                                                                    // rsp_xbar_demux_011:sink_ready -> id_router_011:src_ready
	wire          addr_router_src_endofpacket;                                                                                // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                                      // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                              // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [102:0] addr_router_src_data;                                                                                       // addr_router:src_data -> limiter:cmd_sink_data
	wire   [11:0] addr_router_src_channel;                                                                                    // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                                      // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                                // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                              // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [102:0] limiter_cmd_src_data;                                                                                       // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [11:0] limiter_cmd_src_channel;                                                                                    // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                                                      // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                                               // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                                     // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                             // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [102:0] rsp_xbar_mux_src_data;                                                                                      // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [11:0] rsp_xbar_mux_src_channel;                                                                                   // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                                                     // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                                // limiter:rsp_src_endofpacket -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                                      // limiter:rsp_src_valid -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                              // limiter:rsp_src_startofpacket -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [102:0] limiter_rsp_src_data;                                                                                       // limiter:rsp_src_data -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] limiter_rsp_src_channel;                                                                                    // limiter:rsp_src_channel -> processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_rsp_src_ready;                                                                                      // processor1_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire          addr_router_001_src_endofpacket;                                                                            // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_001_src_valid;                                                                                  // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_001_src_startofpacket;                                                                          // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [102:0] addr_router_001_src_data;                                                                                   // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire   [11:0] addr_router_001_src_channel;                                                                                // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_001_src_ready;                                                                                  // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire          limiter_001_cmd_src_endofpacket;                                                                            // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          limiter_001_cmd_src_startofpacket;                                                                          // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [102:0] limiter_001_cmd_src_data;                                                                                   // limiter_001:cmd_src_data -> cmd_xbar_demux_001:sink_data
	wire   [11:0] limiter_001_cmd_src_channel;                                                                                // limiter_001:cmd_src_channel -> cmd_xbar_demux_001:sink_channel
	wire          limiter_001_cmd_src_ready;                                                                                  // cmd_xbar_demux_001:sink_ready -> limiter_001:cmd_src_ready
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                           // rsp_xbar_mux_001:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                                 // rsp_xbar_mux_001:src_valid -> limiter_001:rsp_sink_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                                         // rsp_xbar_mux_001:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [102:0] rsp_xbar_mux_001_src_data;                                                                                  // rsp_xbar_mux_001:src_data -> limiter_001:rsp_sink_data
	wire   [11:0] rsp_xbar_mux_001_src_channel;                                                                               // rsp_xbar_mux_001:src_channel -> limiter_001:rsp_sink_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                                 // limiter_001:rsp_sink_ready -> rsp_xbar_mux_001:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                            // limiter_001:rsp_src_endofpacket -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                                  // limiter_001:rsp_src_valid -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                          // limiter_001:rsp_src_startofpacket -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [102:0] limiter_001_rsp_src_data;                                                                                   // limiter_001:rsp_src_data -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] limiter_001_rsp_src_channel;                                                                                // limiter_001:rsp_src_channel -> processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_001_rsp_src_ready;                                                                                  // processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent:rp_ready -> limiter_001:rsp_src_ready
	wire          addr_router_002_src_endofpacket;                                                                            // addr_router_002:src_endofpacket -> limiter_002:cmd_sink_endofpacket
	wire          addr_router_002_src_valid;                                                                                  // addr_router_002:src_valid -> limiter_002:cmd_sink_valid
	wire          addr_router_002_src_startofpacket;                                                                          // addr_router_002:src_startofpacket -> limiter_002:cmd_sink_startofpacket
	wire  [102:0] addr_router_002_src_data;                                                                                   // addr_router_002:src_data -> limiter_002:cmd_sink_data
	wire   [11:0] addr_router_002_src_channel;                                                                                // addr_router_002:src_channel -> limiter_002:cmd_sink_channel
	wire          addr_router_002_src_ready;                                                                                  // limiter_002:cmd_sink_ready -> addr_router_002:src_ready
	wire          limiter_002_cmd_src_endofpacket;                                                                            // limiter_002:cmd_src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          limiter_002_cmd_src_startofpacket;                                                                          // limiter_002:cmd_src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [102:0] limiter_002_cmd_src_data;                                                                                   // limiter_002:cmd_src_data -> cmd_xbar_demux_002:sink_data
	wire   [11:0] limiter_002_cmd_src_channel;                                                                                // limiter_002:cmd_src_channel -> cmd_xbar_demux_002:sink_channel
	wire          limiter_002_cmd_src_ready;                                                                                  // cmd_xbar_demux_002:sink_ready -> limiter_002:cmd_src_ready
	wire          rsp_xbar_mux_002_src_endofpacket;                                                                           // rsp_xbar_mux_002:src_endofpacket -> limiter_002:rsp_sink_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                                 // rsp_xbar_mux_002:src_valid -> limiter_002:rsp_sink_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                                         // rsp_xbar_mux_002:src_startofpacket -> limiter_002:rsp_sink_startofpacket
	wire  [102:0] rsp_xbar_mux_002_src_data;                                                                                  // rsp_xbar_mux_002:src_data -> limiter_002:rsp_sink_data
	wire   [11:0] rsp_xbar_mux_002_src_channel;                                                                               // rsp_xbar_mux_002:src_channel -> limiter_002:rsp_sink_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                                 // limiter_002:rsp_sink_ready -> rsp_xbar_mux_002:src_ready
	wire          limiter_002_rsp_src_endofpacket;                                                                            // limiter_002:rsp_src_endofpacket -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_002_rsp_src_valid;                                                                                  // limiter_002:rsp_src_valid -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_002_rsp_src_startofpacket;                                                                          // limiter_002:rsp_src_startofpacket -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [102:0] limiter_002_rsp_src_data;                                                                                   // limiter_002:rsp_src_data -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] limiter_002_rsp_src_channel;                                                                                // limiter_002:rsp_src_channel -> processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_002_rsp_src_ready;                                                                                  // processorM_0_outgoing_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter_002:rsp_src_ready
	wire          cmd_xbar_demux_src0_endofpacket;                                                                            // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                                  // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                          // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src0_data;                                                                                   // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [11:0] cmd_xbar_demux_src0_channel;                                                                                // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                                  // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                                            // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                                  // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                                          // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src1_data;                                                                                   // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [11:0] cmd_xbar_demux_src1_channel;                                                                                // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                                  // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                                            // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                                  // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                                          // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src2_data;                                                                                   // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [11:0] cmd_xbar_demux_src2_channel;                                                                                // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                                  // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_src3_endofpacket;                                                                            // cmd_xbar_demux:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          cmd_xbar_demux_src3_valid;                                                                                  // cmd_xbar_demux:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire          cmd_xbar_demux_src3_startofpacket;                                                                          // cmd_xbar_demux:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src3_data;                                                                                   // cmd_xbar_demux:src3_data -> cmd_xbar_mux_003:sink0_data
	wire   [11:0] cmd_xbar_demux_src3_channel;                                                                                // cmd_xbar_demux:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire          cmd_xbar_demux_src3_ready;                                                                                  // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux:src3_ready
	wire          cmd_xbar_demux_src4_endofpacket;                                                                            // cmd_xbar_demux:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire          cmd_xbar_demux_src4_valid;                                                                                  // cmd_xbar_demux:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire          cmd_xbar_demux_src4_startofpacket;                                                                          // cmd_xbar_demux:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src4_data;                                                                                   // cmd_xbar_demux:src4_data -> cmd_xbar_mux_004:sink0_data
	wire   [11:0] cmd_xbar_demux_src4_channel;                                                                                // cmd_xbar_demux:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire          cmd_xbar_demux_src4_ready;                                                                                  // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux:src4_ready
	wire          cmd_xbar_demux_src5_endofpacket;                                                                            // cmd_xbar_demux:src5_endofpacket -> cmd_xbar_mux_005:sink0_endofpacket
	wire          cmd_xbar_demux_src5_valid;                                                                                  // cmd_xbar_demux:src5_valid -> cmd_xbar_mux_005:sink0_valid
	wire          cmd_xbar_demux_src5_startofpacket;                                                                          // cmd_xbar_demux:src5_startofpacket -> cmd_xbar_mux_005:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src5_data;                                                                                   // cmd_xbar_demux:src5_data -> cmd_xbar_mux_005:sink0_data
	wire   [11:0] cmd_xbar_demux_src5_channel;                                                                                // cmd_xbar_demux:src5_channel -> cmd_xbar_mux_005:sink0_channel
	wire          cmd_xbar_demux_src5_ready;                                                                                  // cmd_xbar_mux_005:sink0_ready -> cmd_xbar_demux:src5_ready
	wire          cmd_xbar_demux_src6_endofpacket;                                                                            // cmd_xbar_demux:src6_endofpacket -> cmd_xbar_mux_006:sink0_endofpacket
	wire          cmd_xbar_demux_src6_valid;                                                                                  // cmd_xbar_demux:src6_valid -> cmd_xbar_mux_006:sink0_valid
	wire          cmd_xbar_demux_src6_startofpacket;                                                                          // cmd_xbar_demux:src6_startofpacket -> cmd_xbar_mux_006:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_src6_data;                                                                                   // cmd_xbar_demux:src6_data -> cmd_xbar_mux_006:sink0_data
	wire   [11:0] cmd_xbar_demux_src6_channel;                                                                                // cmd_xbar_demux:src6_channel -> cmd_xbar_mux_006:sink0_channel
	wire          cmd_xbar_demux_src6_ready;                                                                                  // cmd_xbar_mux_006:sink0_ready -> cmd_xbar_demux:src6_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                                        // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                              // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                                      // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src0_data;                                                                               // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src0_channel;                                                                            // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                              // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                                        // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                              // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                                      // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src1_data;                                                                               // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src1_channel;                                                                            // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                              // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                                        // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                              // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                                      // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src2_data;                                                                               // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src2_channel;                                                                            // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                              // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire          cmd_xbar_demux_001_src3_endofpacket;                                                                        // cmd_xbar_demux_001:src3_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire          cmd_xbar_demux_001_src3_valid;                                                                              // cmd_xbar_demux_001:src3_valid -> cmd_xbar_mux_003:sink1_valid
	wire          cmd_xbar_demux_001_src3_startofpacket;                                                                      // cmd_xbar_demux_001:src3_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src3_data;                                                                               // cmd_xbar_demux_001:src3_data -> cmd_xbar_mux_003:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src3_channel;                                                                            // cmd_xbar_demux_001:src3_channel -> cmd_xbar_mux_003:sink1_channel
	wire          cmd_xbar_demux_001_src3_ready;                                                                              // cmd_xbar_mux_003:sink1_ready -> cmd_xbar_demux_001:src3_ready
	wire          cmd_xbar_demux_001_src4_endofpacket;                                                                        // cmd_xbar_demux_001:src4_endofpacket -> cmd_xbar_mux_004:sink1_endofpacket
	wire          cmd_xbar_demux_001_src4_valid;                                                                              // cmd_xbar_demux_001:src4_valid -> cmd_xbar_mux_004:sink1_valid
	wire          cmd_xbar_demux_001_src4_startofpacket;                                                                      // cmd_xbar_demux_001:src4_startofpacket -> cmd_xbar_mux_004:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src4_data;                                                                               // cmd_xbar_demux_001:src4_data -> cmd_xbar_mux_004:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src4_channel;                                                                            // cmd_xbar_demux_001:src4_channel -> cmd_xbar_mux_004:sink1_channel
	wire          cmd_xbar_demux_001_src4_ready;                                                                              // cmd_xbar_mux_004:sink1_ready -> cmd_xbar_demux_001:src4_ready
	wire          cmd_xbar_demux_001_src5_endofpacket;                                                                        // cmd_xbar_demux_001:src5_endofpacket -> cmd_xbar_mux_005:sink1_endofpacket
	wire          cmd_xbar_demux_001_src5_valid;                                                                              // cmd_xbar_demux_001:src5_valid -> cmd_xbar_mux_005:sink1_valid
	wire          cmd_xbar_demux_001_src5_startofpacket;                                                                      // cmd_xbar_demux_001:src5_startofpacket -> cmd_xbar_mux_005:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src5_data;                                                                               // cmd_xbar_demux_001:src5_data -> cmd_xbar_mux_005:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src5_channel;                                                                            // cmd_xbar_demux_001:src5_channel -> cmd_xbar_mux_005:sink1_channel
	wire          cmd_xbar_demux_001_src5_ready;                                                                              // cmd_xbar_mux_005:sink1_ready -> cmd_xbar_demux_001:src5_ready
	wire          cmd_xbar_demux_001_src6_endofpacket;                                                                        // cmd_xbar_demux_001:src6_endofpacket -> cmd_xbar_mux_006:sink1_endofpacket
	wire          cmd_xbar_demux_001_src6_valid;                                                                              // cmd_xbar_demux_001:src6_valid -> cmd_xbar_mux_006:sink1_valid
	wire          cmd_xbar_demux_001_src6_startofpacket;                                                                      // cmd_xbar_demux_001:src6_startofpacket -> cmd_xbar_mux_006:sink1_startofpacket
	wire  [102:0] cmd_xbar_demux_001_src6_data;                                                                               // cmd_xbar_demux_001:src6_data -> cmd_xbar_mux_006:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src6_channel;                                                                            // cmd_xbar_demux_001:src6_channel -> cmd_xbar_mux_006:sink1_channel
	wire          cmd_xbar_demux_001_src6_ready;                                                                              // cmd_xbar_mux_006:sink1_ready -> cmd_xbar_demux_001:src6_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                                        // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux:sink2_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                              // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux:sink2_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                                      // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src0_data;                                                                               // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src0_channel;                                                                            // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux:sink2_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                              // cmd_xbar_mux:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire          cmd_xbar_demux_002_src1_endofpacket;                                                                        // cmd_xbar_demux_002:src1_endofpacket -> cmd_xbar_mux_001:sink2_endofpacket
	wire          cmd_xbar_demux_002_src1_valid;                                                                              // cmd_xbar_demux_002:src1_valid -> cmd_xbar_mux_001:sink2_valid
	wire          cmd_xbar_demux_002_src1_startofpacket;                                                                      // cmd_xbar_demux_002:src1_startofpacket -> cmd_xbar_mux_001:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src1_data;                                                                               // cmd_xbar_demux_002:src1_data -> cmd_xbar_mux_001:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src1_channel;                                                                            // cmd_xbar_demux_002:src1_channel -> cmd_xbar_mux_001:sink2_channel
	wire          cmd_xbar_demux_002_src1_ready;                                                                              // cmd_xbar_mux_001:sink2_ready -> cmd_xbar_demux_002:src1_ready
	wire          cmd_xbar_demux_002_src2_endofpacket;                                                                        // cmd_xbar_demux_002:src2_endofpacket -> cmd_xbar_mux_002:sink2_endofpacket
	wire          cmd_xbar_demux_002_src2_valid;                                                                              // cmd_xbar_demux_002:src2_valid -> cmd_xbar_mux_002:sink2_valid
	wire          cmd_xbar_demux_002_src2_startofpacket;                                                                      // cmd_xbar_demux_002:src2_startofpacket -> cmd_xbar_mux_002:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src2_data;                                                                               // cmd_xbar_demux_002:src2_data -> cmd_xbar_mux_002:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src2_channel;                                                                            // cmd_xbar_demux_002:src2_channel -> cmd_xbar_mux_002:sink2_channel
	wire          cmd_xbar_demux_002_src2_ready;                                                                              // cmd_xbar_mux_002:sink2_ready -> cmd_xbar_demux_002:src2_ready
	wire          cmd_xbar_demux_002_src3_endofpacket;                                                                        // cmd_xbar_demux_002:src3_endofpacket -> cmd_xbar_mux_003:sink2_endofpacket
	wire          cmd_xbar_demux_002_src3_valid;                                                                              // cmd_xbar_demux_002:src3_valid -> cmd_xbar_mux_003:sink2_valid
	wire          cmd_xbar_demux_002_src3_startofpacket;                                                                      // cmd_xbar_demux_002:src3_startofpacket -> cmd_xbar_mux_003:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src3_data;                                                                               // cmd_xbar_demux_002:src3_data -> cmd_xbar_mux_003:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src3_channel;                                                                            // cmd_xbar_demux_002:src3_channel -> cmd_xbar_mux_003:sink2_channel
	wire          cmd_xbar_demux_002_src3_ready;                                                                              // cmd_xbar_mux_003:sink2_ready -> cmd_xbar_demux_002:src3_ready
	wire          cmd_xbar_demux_002_src4_endofpacket;                                                                        // cmd_xbar_demux_002:src4_endofpacket -> cmd_xbar_mux_004:sink2_endofpacket
	wire          cmd_xbar_demux_002_src4_valid;                                                                              // cmd_xbar_demux_002:src4_valid -> cmd_xbar_mux_004:sink2_valid
	wire          cmd_xbar_demux_002_src4_startofpacket;                                                                      // cmd_xbar_demux_002:src4_startofpacket -> cmd_xbar_mux_004:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src4_data;                                                                               // cmd_xbar_demux_002:src4_data -> cmd_xbar_mux_004:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src4_channel;                                                                            // cmd_xbar_demux_002:src4_channel -> cmd_xbar_mux_004:sink2_channel
	wire          cmd_xbar_demux_002_src4_ready;                                                                              // cmd_xbar_mux_004:sink2_ready -> cmd_xbar_demux_002:src4_ready
	wire          cmd_xbar_demux_002_src5_endofpacket;                                                                        // cmd_xbar_demux_002:src5_endofpacket -> cmd_xbar_mux_005:sink2_endofpacket
	wire          cmd_xbar_demux_002_src5_valid;                                                                              // cmd_xbar_demux_002:src5_valid -> cmd_xbar_mux_005:sink2_valid
	wire          cmd_xbar_demux_002_src5_startofpacket;                                                                      // cmd_xbar_demux_002:src5_startofpacket -> cmd_xbar_mux_005:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src5_data;                                                                               // cmd_xbar_demux_002:src5_data -> cmd_xbar_mux_005:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src5_channel;                                                                            // cmd_xbar_demux_002:src5_channel -> cmd_xbar_mux_005:sink2_channel
	wire          cmd_xbar_demux_002_src5_ready;                                                                              // cmd_xbar_mux_005:sink2_ready -> cmd_xbar_demux_002:src5_ready
	wire          cmd_xbar_demux_002_src6_endofpacket;                                                                        // cmd_xbar_demux_002:src6_endofpacket -> cmd_xbar_mux_006:sink2_endofpacket
	wire          cmd_xbar_demux_002_src6_valid;                                                                              // cmd_xbar_demux_002:src6_valid -> cmd_xbar_mux_006:sink2_valid
	wire          cmd_xbar_demux_002_src6_startofpacket;                                                                      // cmd_xbar_demux_002:src6_startofpacket -> cmd_xbar_mux_006:sink2_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src6_data;                                                                               // cmd_xbar_demux_002:src6_data -> cmd_xbar_mux_006:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src6_channel;                                                                            // cmd_xbar_demux_002:src6_channel -> cmd_xbar_mux_006:sink2_channel
	wire          cmd_xbar_demux_002_src6_ready;                                                                              // cmd_xbar_mux_006:sink2_ready -> cmd_xbar_demux_002:src6_ready
	wire          cmd_xbar_demux_002_src7_endofpacket;                                                                        // cmd_xbar_demux_002:src7_endofpacket -> cmd_xbar_mux_007:sink0_endofpacket
	wire          cmd_xbar_demux_002_src7_valid;                                                                              // cmd_xbar_demux_002:src7_valid -> cmd_xbar_mux_007:sink0_valid
	wire          cmd_xbar_demux_002_src7_startofpacket;                                                                      // cmd_xbar_demux_002:src7_startofpacket -> cmd_xbar_mux_007:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src7_data;                                                                               // cmd_xbar_demux_002:src7_data -> cmd_xbar_mux_007:sink0_data
	wire   [11:0] cmd_xbar_demux_002_src7_channel;                                                                            // cmd_xbar_demux_002:src7_channel -> cmd_xbar_mux_007:sink0_channel
	wire          cmd_xbar_demux_002_src7_ready;                                                                              // cmd_xbar_mux_007:sink0_ready -> cmd_xbar_demux_002:src7_ready
	wire          cmd_xbar_demux_002_src8_endofpacket;                                                                        // cmd_xbar_demux_002:src8_endofpacket -> cmd_xbar_mux_008:sink0_endofpacket
	wire          cmd_xbar_demux_002_src8_valid;                                                                              // cmd_xbar_demux_002:src8_valid -> cmd_xbar_mux_008:sink0_valid
	wire          cmd_xbar_demux_002_src8_startofpacket;                                                                      // cmd_xbar_demux_002:src8_startofpacket -> cmd_xbar_mux_008:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src8_data;                                                                               // cmd_xbar_demux_002:src8_data -> cmd_xbar_mux_008:sink0_data
	wire   [11:0] cmd_xbar_demux_002_src8_channel;                                                                            // cmd_xbar_demux_002:src8_channel -> cmd_xbar_mux_008:sink0_channel
	wire          cmd_xbar_demux_002_src8_ready;                                                                              // cmd_xbar_mux_008:sink0_ready -> cmd_xbar_demux_002:src8_ready
	wire          cmd_xbar_demux_002_src9_endofpacket;                                                                        // cmd_xbar_demux_002:src9_endofpacket -> cmd_xbar_mux_009:sink0_endofpacket
	wire          cmd_xbar_demux_002_src9_valid;                                                                              // cmd_xbar_demux_002:src9_valid -> cmd_xbar_mux_009:sink0_valid
	wire          cmd_xbar_demux_002_src9_startofpacket;                                                                      // cmd_xbar_demux_002:src9_startofpacket -> cmd_xbar_mux_009:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src9_data;                                                                               // cmd_xbar_demux_002:src9_data -> cmd_xbar_mux_009:sink0_data
	wire   [11:0] cmd_xbar_demux_002_src9_channel;                                                                            // cmd_xbar_demux_002:src9_channel -> cmd_xbar_mux_009:sink0_channel
	wire          cmd_xbar_demux_002_src9_ready;                                                                              // cmd_xbar_mux_009:sink0_ready -> cmd_xbar_demux_002:src9_ready
	wire          cmd_xbar_demux_002_src10_endofpacket;                                                                       // cmd_xbar_demux_002:src10_endofpacket -> cmd_xbar_mux_010:sink0_endofpacket
	wire          cmd_xbar_demux_002_src10_valid;                                                                             // cmd_xbar_demux_002:src10_valid -> cmd_xbar_mux_010:sink0_valid
	wire          cmd_xbar_demux_002_src10_startofpacket;                                                                     // cmd_xbar_demux_002:src10_startofpacket -> cmd_xbar_mux_010:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src10_data;                                                                              // cmd_xbar_demux_002:src10_data -> cmd_xbar_mux_010:sink0_data
	wire   [11:0] cmd_xbar_demux_002_src10_channel;                                                                           // cmd_xbar_demux_002:src10_channel -> cmd_xbar_mux_010:sink0_channel
	wire          cmd_xbar_demux_002_src10_ready;                                                                             // cmd_xbar_mux_010:sink0_ready -> cmd_xbar_demux_002:src10_ready
	wire          cmd_xbar_demux_002_src11_endofpacket;                                                                       // cmd_xbar_demux_002:src11_endofpacket -> cmd_xbar_mux_011:sink0_endofpacket
	wire          cmd_xbar_demux_002_src11_valid;                                                                             // cmd_xbar_demux_002:src11_valid -> cmd_xbar_mux_011:sink0_valid
	wire          cmd_xbar_demux_002_src11_startofpacket;                                                                     // cmd_xbar_demux_002:src11_startofpacket -> cmd_xbar_mux_011:sink0_startofpacket
	wire  [102:0] cmd_xbar_demux_002_src11_data;                                                                              // cmd_xbar_demux_002:src11_data -> cmd_xbar_mux_011:sink0_data
	wire   [11:0] cmd_xbar_demux_002_src11_channel;                                                                           // cmd_xbar_demux_002:src11_channel -> cmd_xbar_mux_011:sink0_channel
	wire          cmd_xbar_demux_002_src11_ready;                                                                             // cmd_xbar_mux_011:sink0_ready -> cmd_xbar_demux_002:src11_ready
	wire          cmd_xbar_demux_003_src0_endofpacket;                                                                        // cmd_xbar_demux_003:src0_endofpacket -> cmd_xbar_mux_003:sink3_endofpacket
	wire          cmd_xbar_demux_003_src0_valid;                                                                              // cmd_xbar_demux_003:src0_valid -> cmd_xbar_mux_003:sink3_valid
	wire          cmd_xbar_demux_003_src0_startofpacket;                                                                      // cmd_xbar_demux_003:src0_startofpacket -> cmd_xbar_mux_003:sink3_startofpacket
	wire  [102:0] cmd_xbar_demux_003_src0_data;                                                                               // cmd_xbar_demux_003:src0_data -> cmd_xbar_mux_003:sink3_data
	wire   [11:0] cmd_xbar_demux_003_src0_channel;                                                                            // cmd_xbar_demux_003:src0_channel -> cmd_xbar_mux_003:sink3_channel
	wire          cmd_xbar_demux_003_src0_ready;                                                                              // cmd_xbar_mux_003:sink3_ready -> cmd_xbar_demux_003:src0_ready
	wire          cmd_xbar_demux_004_src0_endofpacket;                                                                        // cmd_xbar_demux_004:src0_endofpacket -> cmd_xbar_mux_003:sink4_endofpacket
	wire          cmd_xbar_demux_004_src0_valid;                                                                              // cmd_xbar_demux_004:src0_valid -> cmd_xbar_mux_003:sink4_valid
	wire          cmd_xbar_demux_004_src0_startofpacket;                                                                      // cmd_xbar_demux_004:src0_startofpacket -> cmd_xbar_mux_003:sink4_startofpacket
	wire  [102:0] cmd_xbar_demux_004_src0_data;                                                                               // cmd_xbar_demux_004:src0_data -> cmd_xbar_mux_003:sink4_data
	wire   [11:0] cmd_xbar_demux_004_src0_channel;                                                                            // cmd_xbar_demux_004:src0_channel -> cmd_xbar_mux_003:sink4_channel
	wire          cmd_xbar_demux_004_src0_ready;                                                                              // cmd_xbar_mux_003:sink4_ready -> cmd_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                            // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                                  // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                          // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [102:0] rsp_xbar_demux_src0_data;                                                                                   // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [11:0] rsp_xbar_demux_src0_channel;                                                                                // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                                  // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                            // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                                  // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                          // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [102:0] rsp_xbar_demux_src1_data;                                                                                   // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [11:0] rsp_xbar_demux_src1_channel;                                                                                // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                                  // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_src2_endofpacket;                                                                            // rsp_xbar_demux:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_src2_valid;                                                                                  // rsp_xbar_demux:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_src2_startofpacket;                                                                          // rsp_xbar_demux:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [102:0] rsp_xbar_demux_src2_data;                                                                                   // rsp_xbar_demux:src2_data -> rsp_xbar_mux_002:sink0_data
	wire   [11:0] rsp_xbar_demux_src2_channel;                                                                                // rsp_xbar_demux:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_src2_ready;                                                                                  // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux:src2_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                                        // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                              // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                                      // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [102:0] rsp_xbar_demux_001_src0_data;                                                                               // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [11:0] rsp_xbar_demux_001_src0_channel;                                                                            // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                              // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                                        // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                              // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                                      // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [102:0] rsp_xbar_demux_001_src1_data;                                                                               // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [11:0] rsp_xbar_demux_001_src1_channel;                                                                            // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                              // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_001_src2_endofpacket;                                                                        // rsp_xbar_demux_001:src2_endofpacket -> rsp_xbar_mux_002:sink1_endofpacket
	wire          rsp_xbar_demux_001_src2_valid;                                                                              // rsp_xbar_demux_001:src2_valid -> rsp_xbar_mux_002:sink1_valid
	wire          rsp_xbar_demux_001_src2_startofpacket;                                                                      // rsp_xbar_demux_001:src2_startofpacket -> rsp_xbar_mux_002:sink1_startofpacket
	wire  [102:0] rsp_xbar_demux_001_src2_data;                                                                               // rsp_xbar_demux_001:src2_data -> rsp_xbar_mux_002:sink1_data
	wire   [11:0] rsp_xbar_demux_001_src2_channel;                                                                            // rsp_xbar_demux_001:src2_channel -> rsp_xbar_mux_002:sink1_channel
	wire          rsp_xbar_demux_001_src2_ready;                                                                              // rsp_xbar_mux_002:sink1_ready -> rsp_xbar_demux_001:src2_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                                        // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                              // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                                      // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [102:0] rsp_xbar_demux_002_src0_data;                                                                               // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire   [11:0] rsp_xbar_demux_002_src0_channel;                                                                            // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                              // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                                        // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                              // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                                      // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [102:0] rsp_xbar_demux_002_src1_data;                                                                               // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire   [11:0] rsp_xbar_demux_002_src1_channel;                                                                            // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                              // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire          rsp_xbar_demux_002_src2_endofpacket;                                                                        // rsp_xbar_demux_002:src2_endofpacket -> rsp_xbar_mux_002:sink2_endofpacket
	wire          rsp_xbar_demux_002_src2_valid;                                                                              // rsp_xbar_demux_002:src2_valid -> rsp_xbar_mux_002:sink2_valid
	wire          rsp_xbar_demux_002_src2_startofpacket;                                                                      // rsp_xbar_demux_002:src2_startofpacket -> rsp_xbar_mux_002:sink2_startofpacket
	wire  [102:0] rsp_xbar_demux_002_src2_data;                                                                               // rsp_xbar_demux_002:src2_data -> rsp_xbar_mux_002:sink2_data
	wire   [11:0] rsp_xbar_demux_002_src2_channel;                                                                            // rsp_xbar_demux_002:src2_channel -> rsp_xbar_mux_002:sink2_channel
	wire          rsp_xbar_demux_002_src2_ready;                                                                              // rsp_xbar_mux_002:sink2_ready -> rsp_xbar_demux_002:src2_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                                        // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux:sink3_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                              // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux:sink3_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                                      // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux:sink3_startofpacket
	wire  [102:0] rsp_xbar_demux_003_src0_data;                                                                               // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux:sink3_data
	wire   [11:0] rsp_xbar_demux_003_src0_channel;                                                                            // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux:sink3_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                              // rsp_xbar_mux:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_003_src1_endofpacket;                                                                        // rsp_xbar_demux_003:src1_endofpacket -> rsp_xbar_mux_001:sink3_endofpacket
	wire          rsp_xbar_demux_003_src1_valid;                                                                              // rsp_xbar_demux_003:src1_valid -> rsp_xbar_mux_001:sink3_valid
	wire          rsp_xbar_demux_003_src1_startofpacket;                                                                      // rsp_xbar_demux_003:src1_startofpacket -> rsp_xbar_mux_001:sink3_startofpacket
	wire  [102:0] rsp_xbar_demux_003_src1_data;                                                                               // rsp_xbar_demux_003:src1_data -> rsp_xbar_mux_001:sink3_data
	wire   [11:0] rsp_xbar_demux_003_src1_channel;                                                                            // rsp_xbar_demux_003:src1_channel -> rsp_xbar_mux_001:sink3_channel
	wire          rsp_xbar_demux_003_src1_ready;                                                                              // rsp_xbar_mux_001:sink3_ready -> rsp_xbar_demux_003:src1_ready
	wire          rsp_xbar_demux_003_src2_endofpacket;                                                                        // rsp_xbar_demux_003:src2_endofpacket -> rsp_xbar_mux_002:sink3_endofpacket
	wire          rsp_xbar_demux_003_src2_valid;                                                                              // rsp_xbar_demux_003:src2_valid -> rsp_xbar_mux_002:sink3_valid
	wire          rsp_xbar_demux_003_src2_startofpacket;                                                                      // rsp_xbar_demux_003:src2_startofpacket -> rsp_xbar_mux_002:sink3_startofpacket
	wire  [102:0] rsp_xbar_demux_003_src2_data;                                                                               // rsp_xbar_demux_003:src2_data -> rsp_xbar_mux_002:sink3_data
	wire   [11:0] rsp_xbar_demux_003_src2_channel;                                                                            // rsp_xbar_demux_003:src2_channel -> rsp_xbar_mux_002:sink3_channel
	wire          rsp_xbar_demux_003_src2_ready;                                                                              // rsp_xbar_mux_002:sink3_ready -> rsp_xbar_demux_003:src2_ready
	wire          rsp_xbar_demux_003_src3_endofpacket;                                                                        // rsp_xbar_demux_003:src3_endofpacket -> rsp_xbar_mux_003:sink0_endofpacket
	wire          rsp_xbar_demux_003_src3_valid;                                                                              // rsp_xbar_demux_003:src3_valid -> rsp_xbar_mux_003:sink0_valid
	wire          rsp_xbar_demux_003_src3_startofpacket;                                                                      // rsp_xbar_demux_003:src3_startofpacket -> rsp_xbar_mux_003:sink0_startofpacket
	wire  [102:0] rsp_xbar_demux_003_src3_data;                                                                               // rsp_xbar_demux_003:src3_data -> rsp_xbar_mux_003:sink0_data
	wire   [11:0] rsp_xbar_demux_003_src3_channel;                                                                            // rsp_xbar_demux_003:src3_channel -> rsp_xbar_mux_003:sink0_channel
	wire          rsp_xbar_demux_003_src3_ready;                                                                              // rsp_xbar_mux_003:sink0_ready -> rsp_xbar_demux_003:src3_ready
	wire          rsp_xbar_demux_003_src4_endofpacket;                                                                        // rsp_xbar_demux_003:src4_endofpacket -> rsp_xbar_mux_004:sink0_endofpacket
	wire          rsp_xbar_demux_003_src4_valid;                                                                              // rsp_xbar_demux_003:src4_valid -> rsp_xbar_mux_004:sink0_valid
	wire          rsp_xbar_demux_003_src4_startofpacket;                                                                      // rsp_xbar_demux_003:src4_startofpacket -> rsp_xbar_mux_004:sink0_startofpacket
	wire  [102:0] rsp_xbar_demux_003_src4_data;                                                                               // rsp_xbar_demux_003:src4_data -> rsp_xbar_mux_004:sink0_data
	wire   [11:0] rsp_xbar_demux_003_src4_channel;                                                                            // rsp_xbar_demux_003:src4_channel -> rsp_xbar_mux_004:sink0_channel
	wire          rsp_xbar_demux_003_src4_ready;                                                                              // rsp_xbar_mux_004:sink0_ready -> rsp_xbar_demux_003:src4_ready
	wire          rsp_xbar_demux_004_src0_endofpacket;                                                                        // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux:sink4_endofpacket
	wire          rsp_xbar_demux_004_src0_valid;                                                                              // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux:sink4_valid
	wire          rsp_xbar_demux_004_src0_startofpacket;                                                                      // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux:sink4_startofpacket
	wire  [102:0] rsp_xbar_demux_004_src0_data;                                                                               // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux:sink4_data
	wire   [11:0] rsp_xbar_demux_004_src0_channel;                                                                            // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux:sink4_channel
	wire          rsp_xbar_demux_004_src0_ready;                                                                              // rsp_xbar_mux:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_004_src1_endofpacket;                                                                        // rsp_xbar_demux_004:src1_endofpacket -> rsp_xbar_mux_001:sink4_endofpacket
	wire          rsp_xbar_demux_004_src1_valid;                                                                              // rsp_xbar_demux_004:src1_valid -> rsp_xbar_mux_001:sink4_valid
	wire          rsp_xbar_demux_004_src1_startofpacket;                                                                      // rsp_xbar_demux_004:src1_startofpacket -> rsp_xbar_mux_001:sink4_startofpacket
	wire  [102:0] rsp_xbar_demux_004_src1_data;                                                                               // rsp_xbar_demux_004:src1_data -> rsp_xbar_mux_001:sink4_data
	wire   [11:0] rsp_xbar_demux_004_src1_channel;                                                                            // rsp_xbar_demux_004:src1_channel -> rsp_xbar_mux_001:sink4_channel
	wire          rsp_xbar_demux_004_src1_ready;                                                                              // rsp_xbar_mux_001:sink4_ready -> rsp_xbar_demux_004:src1_ready
	wire          rsp_xbar_demux_004_src2_endofpacket;                                                                        // rsp_xbar_demux_004:src2_endofpacket -> rsp_xbar_mux_002:sink4_endofpacket
	wire          rsp_xbar_demux_004_src2_valid;                                                                              // rsp_xbar_demux_004:src2_valid -> rsp_xbar_mux_002:sink4_valid
	wire          rsp_xbar_demux_004_src2_startofpacket;                                                                      // rsp_xbar_demux_004:src2_startofpacket -> rsp_xbar_mux_002:sink4_startofpacket
	wire  [102:0] rsp_xbar_demux_004_src2_data;                                                                               // rsp_xbar_demux_004:src2_data -> rsp_xbar_mux_002:sink4_data
	wire   [11:0] rsp_xbar_demux_004_src2_channel;                                                                            // rsp_xbar_demux_004:src2_channel -> rsp_xbar_mux_002:sink4_channel
	wire          rsp_xbar_demux_004_src2_ready;                                                                              // rsp_xbar_mux_002:sink4_ready -> rsp_xbar_demux_004:src2_ready
	wire          rsp_xbar_demux_005_src0_endofpacket;                                                                        // rsp_xbar_demux_005:src0_endofpacket -> rsp_xbar_mux:sink5_endofpacket
	wire          rsp_xbar_demux_005_src0_valid;                                                                              // rsp_xbar_demux_005:src0_valid -> rsp_xbar_mux:sink5_valid
	wire          rsp_xbar_demux_005_src0_startofpacket;                                                                      // rsp_xbar_demux_005:src0_startofpacket -> rsp_xbar_mux:sink5_startofpacket
	wire  [102:0] rsp_xbar_demux_005_src0_data;                                                                               // rsp_xbar_demux_005:src0_data -> rsp_xbar_mux:sink5_data
	wire   [11:0] rsp_xbar_demux_005_src0_channel;                                                                            // rsp_xbar_demux_005:src0_channel -> rsp_xbar_mux:sink5_channel
	wire          rsp_xbar_demux_005_src0_ready;                                                                              // rsp_xbar_mux:sink5_ready -> rsp_xbar_demux_005:src0_ready
	wire          rsp_xbar_demux_005_src1_endofpacket;                                                                        // rsp_xbar_demux_005:src1_endofpacket -> rsp_xbar_mux_001:sink5_endofpacket
	wire          rsp_xbar_demux_005_src1_valid;                                                                              // rsp_xbar_demux_005:src1_valid -> rsp_xbar_mux_001:sink5_valid
	wire          rsp_xbar_demux_005_src1_startofpacket;                                                                      // rsp_xbar_demux_005:src1_startofpacket -> rsp_xbar_mux_001:sink5_startofpacket
	wire  [102:0] rsp_xbar_demux_005_src1_data;                                                                               // rsp_xbar_demux_005:src1_data -> rsp_xbar_mux_001:sink5_data
	wire   [11:0] rsp_xbar_demux_005_src1_channel;                                                                            // rsp_xbar_demux_005:src1_channel -> rsp_xbar_mux_001:sink5_channel
	wire          rsp_xbar_demux_005_src1_ready;                                                                              // rsp_xbar_mux_001:sink5_ready -> rsp_xbar_demux_005:src1_ready
	wire          rsp_xbar_demux_005_src2_endofpacket;                                                                        // rsp_xbar_demux_005:src2_endofpacket -> rsp_xbar_mux_002:sink5_endofpacket
	wire          rsp_xbar_demux_005_src2_valid;                                                                              // rsp_xbar_demux_005:src2_valid -> rsp_xbar_mux_002:sink5_valid
	wire          rsp_xbar_demux_005_src2_startofpacket;                                                                      // rsp_xbar_demux_005:src2_startofpacket -> rsp_xbar_mux_002:sink5_startofpacket
	wire  [102:0] rsp_xbar_demux_005_src2_data;                                                                               // rsp_xbar_demux_005:src2_data -> rsp_xbar_mux_002:sink5_data
	wire   [11:0] rsp_xbar_demux_005_src2_channel;                                                                            // rsp_xbar_demux_005:src2_channel -> rsp_xbar_mux_002:sink5_channel
	wire          rsp_xbar_demux_005_src2_ready;                                                                              // rsp_xbar_mux_002:sink5_ready -> rsp_xbar_demux_005:src2_ready
	wire          rsp_xbar_demux_006_src0_endofpacket;                                                                        // rsp_xbar_demux_006:src0_endofpacket -> rsp_xbar_mux:sink6_endofpacket
	wire          rsp_xbar_demux_006_src0_valid;                                                                              // rsp_xbar_demux_006:src0_valid -> rsp_xbar_mux:sink6_valid
	wire          rsp_xbar_demux_006_src0_startofpacket;                                                                      // rsp_xbar_demux_006:src0_startofpacket -> rsp_xbar_mux:sink6_startofpacket
	wire  [102:0] rsp_xbar_demux_006_src0_data;                                                                               // rsp_xbar_demux_006:src0_data -> rsp_xbar_mux:sink6_data
	wire   [11:0] rsp_xbar_demux_006_src0_channel;                                                                            // rsp_xbar_demux_006:src0_channel -> rsp_xbar_mux:sink6_channel
	wire          rsp_xbar_demux_006_src0_ready;                                                                              // rsp_xbar_mux:sink6_ready -> rsp_xbar_demux_006:src0_ready
	wire          rsp_xbar_demux_006_src1_endofpacket;                                                                        // rsp_xbar_demux_006:src1_endofpacket -> rsp_xbar_mux_001:sink6_endofpacket
	wire          rsp_xbar_demux_006_src1_valid;                                                                              // rsp_xbar_demux_006:src1_valid -> rsp_xbar_mux_001:sink6_valid
	wire          rsp_xbar_demux_006_src1_startofpacket;                                                                      // rsp_xbar_demux_006:src1_startofpacket -> rsp_xbar_mux_001:sink6_startofpacket
	wire  [102:0] rsp_xbar_demux_006_src1_data;                                                                               // rsp_xbar_demux_006:src1_data -> rsp_xbar_mux_001:sink6_data
	wire   [11:0] rsp_xbar_demux_006_src1_channel;                                                                            // rsp_xbar_demux_006:src1_channel -> rsp_xbar_mux_001:sink6_channel
	wire          rsp_xbar_demux_006_src1_ready;                                                                              // rsp_xbar_mux_001:sink6_ready -> rsp_xbar_demux_006:src1_ready
	wire          rsp_xbar_demux_006_src2_endofpacket;                                                                        // rsp_xbar_demux_006:src2_endofpacket -> rsp_xbar_mux_002:sink6_endofpacket
	wire          rsp_xbar_demux_006_src2_valid;                                                                              // rsp_xbar_demux_006:src2_valid -> rsp_xbar_mux_002:sink6_valid
	wire          rsp_xbar_demux_006_src2_startofpacket;                                                                      // rsp_xbar_demux_006:src2_startofpacket -> rsp_xbar_mux_002:sink6_startofpacket
	wire  [102:0] rsp_xbar_demux_006_src2_data;                                                                               // rsp_xbar_demux_006:src2_data -> rsp_xbar_mux_002:sink6_data
	wire   [11:0] rsp_xbar_demux_006_src2_channel;                                                                            // rsp_xbar_demux_006:src2_channel -> rsp_xbar_mux_002:sink6_channel
	wire          rsp_xbar_demux_006_src2_ready;                                                                              // rsp_xbar_mux_002:sink6_ready -> rsp_xbar_demux_006:src2_ready
	wire          rsp_xbar_demux_007_src0_endofpacket;                                                                        // rsp_xbar_demux_007:src0_endofpacket -> rsp_xbar_mux_002:sink7_endofpacket
	wire          rsp_xbar_demux_007_src0_valid;                                                                              // rsp_xbar_demux_007:src0_valid -> rsp_xbar_mux_002:sink7_valid
	wire          rsp_xbar_demux_007_src0_startofpacket;                                                                      // rsp_xbar_demux_007:src0_startofpacket -> rsp_xbar_mux_002:sink7_startofpacket
	wire  [102:0] rsp_xbar_demux_007_src0_data;                                                                               // rsp_xbar_demux_007:src0_data -> rsp_xbar_mux_002:sink7_data
	wire   [11:0] rsp_xbar_demux_007_src0_channel;                                                                            // rsp_xbar_demux_007:src0_channel -> rsp_xbar_mux_002:sink7_channel
	wire          rsp_xbar_demux_007_src0_ready;                                                                              // rsp_xbar_mux_002:sink7_ready -> rsp_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_008_src0_endofpacket;                                                                        // rsp_xbar_demux_008:src0_endofpacket -> rsp_xbar_mux_002:sink8_endofpacket
	wire          rsp_xbar_demux_008_src0_valid;                                                                              // rsp_xbar_demux_008:src0_valid -> rsp_xbar_mux_002:sink8_valid
	wire          rsp_xbar_demux_008_src0_startofpacket;                                                                      // rsp_xbar_demux_008:src0_startofpacket -> rsp_xbar_mux_002:sink8_startofpacket
	wire  [102:0] rsp_xbar_demux_008_src0_data;                                                                               // rsp_xbar_demux_008:src0_data -> rsp_xbar_mux_002:sink8_data
	wire   [11:0] rsp_xbar_demux_008_src0_channel;                                                                            // rsp_xbar_demux_008:src0_channel -> rsp_xbar_mux_002:sink8_channel
	wire          rsp_xbar_demux_008_src0_ready;                                                                              // rsp_xbar_mux_002:sink8_ready -> rsp_xbar_demux_008:src0_ready
	wire          rsp_xbar_demux_009_src0_endofpacket;                                                                        // rsp_xbar_demux_009:src0_endofpacket -> rsp_xbar_mux_002:sink9_endofpacket
	wire          rsp_xbar_demux_009_src0_valid;                                                                              // rsp_xbar_demux_009:src0_valid -> rsp_xbar_mux_002:sink9_valid
	wire          rsp_xbar_demux_009_src0_startofpacket;                                                                      // rsp_xbar_demux_009:src0_startofpacket -> rsp_xbar_mux_002:sink9_startofpacket
	wire  [102:0] rsp_xbar_demux_009_src0_data;                                                                               // rsp_xbar_demux_009:src0_data -> rsp_xbar_mux_002:sink9_data
	wire   [11:0] rsp_xbar_demux_009_src0_channel;                                                                            // rsp_xbar_demux_009:src0_channel -> rsp_xbar_mux_002:sink9_channel
	wire          rsp_xbar_demux_009_src0_ready;                                                                              // rsp_xbar_mux_002:sink9_ready -> rsp_xbar_demux_009:src0_ready
	wire          rsp_xbar_demux_010_src0_endofpacket;                                                                        // rsp_xbar_demux_010:src0_endofpacket -> rsp_xbar_mux_002:sink10_endofpacket
	wire          rsp_xbar_demux_010_src0_valid;                                                                              // rsp_xbar_demux_010:src0_valid -> rsp_xbar_mux_002:sink10_valid
	wire          rsp_xbar_demux_010_src0_startofpacket;                                                                      // rsp_xbar_demux_010:src0_startofpacket -> rsp_xbar_mux_002:sink10_startofpacket
	wire  [102:0] rsp_xbar_demux_010_src0_data;                                                                               // rsp_xbar_demux_010:src0_data -> rsp_xbar_mux_002:sink10_data
	wire   [11:0] rsp_xbar_demux_010_src0_channel;                                                                            // rsp_xbar_demux_010:src0_channel -> rsp_xbar_mux_002:sink10_channel
	wire          rsp_xbar_demux_010_src0_ready;                                                                              // rsp_xbar_mux_002:sink10_ready -> rsp_xbar_demux_010:src0_ready
	wire          rsp_xbar_demux_011_src0_endofpacket;                                                                        // rsp_xbar_demux_011:src0_endofpacket -> rsp_xbar_mux_002:sink11_endofpacket
	wire          rsp_xbar_demux_011_src0_valid;                                                                              // rsp_xbar_demux_011:src0_valid -> rsp_xbar_mux_002:sink11_valid
	wire          rsp_xbar_demux_011_src0_startofpacket;                                                                      // rsp_xbar_demux_011:src0_startofpacket -> rsp_xbar_mux_002:sink11_startofpacket
	wire  [102:0] rsp_xbar_demux_011_src0_data;                                                                               // rsp_xbar_demux_011:src0_data -> rsp_xbar_mux_002:sink11_data
	wire   [11:0] rsp_xbar_demux_011_src0_channel;                                                                            // rsp_xbar_demux_011:src0_channel -> rsp_xbar_mux_002:sink11_channel
	wire          rsp_xbar_demux_011_src0_ready;                                                                              // rsp_xbar_mux_002:sink11_ready -> rsp_xbar_demux_011:src0_ready
	wire   [11:0] limiter_cmd_valid_data;                                                                                     // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid
	wire   [11:0] limiter_001_cmd_valid_data;                                                                                 // limiter_001:cmd_src_valid -> cmd_xbar_demux_001:sink_valid
	wire   [11:0] limiter_002_cmd_valid_data;                                                                                 // limiter_002:cmd_src_valid -> cmd_xbar_demux_002:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor1_0_outgoing_master_translator (
		.clk                      (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                    (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (processor1_0_outgoing_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (processor1_0_outgoing_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (processor1_0_outgoing_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (processor1_0_outgoing_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (processor1_0_outgoing_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (processor1_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (processor1_0_outgoing_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (processor1_0_outgoing_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (processor1_0_outgoing_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (processor1_0_outgoing_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (processor1_0_outgoing_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (processor1_0_outgoing_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (processor1_0_outgoing_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (processor1_0_outgoing_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (processor1_0_outgoing_master_byteenable),                                         //                          .byteenable
		.av_read                  (processor1_0_outgoing_master_read),                                               //                          .read
		.av_readdata              (processor1_0_outgoing_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (processor1_0_outgoing_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (processor1_0_outgoing_master_write),                                              //                          .write
		.av_writedata             (processor1_0_outgoing_master_writedata),                                          //                          .writedata
		.av_debugaccess           (processor1_0_outgoing_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                            //               (terminated)
		.uav_clken                (),                                                                                //               (terminated)
		.av_clken                 (1'b1),                                                                            //               (terminated)
		.uav_response             (2'b00),                                                                           //               (terminated)
		.av_response              (),                                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor0_0_out_system_bridge_m0_translator (
		.clk                      (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                    (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (processor0_0_out_system_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (processor0_0_out_system_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (processor0_0_out_system_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (processor0_0_out_system_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                  (processor0_0_out_system_bridge_m0_read),                                               //                          .read
		.av_readdata              (processor0_0_out_system_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (processor0_0_out_system_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (processor0_0_out_system_bridge_m0_write),                                              //                          .write
		.av_writedata             (processor0_0_out_system_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (processor0_0_out_system_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                                                 //               (terminated)
		.uav_clken                (),                                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                                //               (terminated)
		.av_response              (),                                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processorm_0_outgoing_master_translator (
		.clk                      (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address              (processorm_0_outgoing_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (processorm_0_outgoing_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (processorm_0_outgoing_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (processorm_0_outgoing_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (processorm_0_outgoing_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (processorm_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (processorm_0_outgoing_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (processorm_0_outgoing_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (processorm_0_outgoing_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (processorm_0_outgoing_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (processorm_0_outgoing_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (processorM_0_outgoing_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (processorM_0_outgoing_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (processorM_0_outgoing_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (processorM_0_outgoing_master_byteenable),                                         //                          .byteenable
		.av_read                  (processorM_0_outgoing_master_read),                                               //                          .read
		.av_readdata              (processorM_0_outgoing_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (processorM_0_outgoing_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (processorM_0_outgoing_master_write),                                              //                          .write
		.av_writedata             (processorM_0_outgoing_master_writedata),                                          //                          .writedata
		.av_debugaccess           (processorM_0_outgoing_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                            //               (terminated)
		.uav_clken                (),                                                                                //               (terminated)
		.av_clken                 (1'b1),                                                                            //               (terminated)
		.uav_response             (2'b00),                                                                           //               (terminated)
		.av_response              (),                                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor1_0_fingerprint_0_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                               //                       clk.clk
		.reset                    (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address              (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (processor1_0_fingerprint_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (processor1_0_fingerprint_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (processor1_0_fingerprint_0_avalon_master_read),                                               //                          .read
		.av_readdata              (processor1_0_fingerprint_0_avalon_master_readdata),                                           //                          .readdata
		.av_write                 (processor1_0_fingerprint_0_avalon_master_write),                                              //                          .write
		.av_writedata             (processor1_0_fingerprint_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                                        //               (terminated)
		.av_readdatavalid         (),                                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                                        //               (terminated)
		.uav_clken                (),                                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                                       //               (terminated)
		.av_response              (),                                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor0_0_fingerprint_0_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                               //                       clk.clk
		.reset                    (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),              //                     reset.reset
		.uav_address              (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (processor0_0_fingerprint_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (processor0_0_fingerprint_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (processor0_0_fingerprint_0_avalon_master_read),                                               //                          .read
		.av_readdata              (processor0_0_fingerprint_0_avalon_master_readdata),                                           //                          .readdata
		.av_write                 (processor0_0_fingerprint_0_avalon_master_write),                                              //                          .write
		.av_writedata             (processor0_0_fingerprint_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                                        //               (terminated)
		.av_readdatavalid         (),                                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                                        //               (terminated)
		.uav_clken                (),                                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                                       //               (terminated)
		.av_response              (),                                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mutex_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (mutex_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (mutex_0_s1_write),                                                      //                         .write
		.av_read                  (mutex_0_s1_read),                                                       //                         .read
		.av_readdata              (mutex_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (mutex_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (mutex_0_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor1_0_cpu1_irq_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                                                         //                      clk.clk
		.reset                    (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address              (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processor1_0_cpu1_irq_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processor1_0_cpu1_irq_0_s0_write),                                                      //                         .write
		.av_writedata             (processor1_0_cpu1_irq_0_s0_writedata),                                                  //                         .writedata
		.av_read                  (),                                                                                      //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),                                                  //              (terminated)
		.av_begintransfer         (),                                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                                      //              (terminated)
		.av_burstcount            (),                                                                                      //              (terminated)
		.av_byteenable            (),                                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                                      //              (terminated)
		.av_lock                  (),                                                                                      //              (terminated)
		.av_chipselect            (),                                                                                      //              (terminated)
		.av_clken                 (),                                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                                  //              (terminated)
		.av_debugaccess           (),                                                                                      //              (terminated)
		.av_outputenable          (),                                                                                      //              (terminated)
		.uav_response             (),                                                                                      //              (terminated)
		.av_response              (2'b00),                                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_memory_s1_translator (
		.clk                      (clk_0_clk_clk),                                                               //                      clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                                   //                    reset.reset
		.uav_address              (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (shared_memory_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (shared_memory_s1_write),                                                      //                         .write
		.av_readdata              (shared_memory_s1_readdata),                                                   //                         .readdata
		.av_writedata             (shared_memory_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (shared_memory_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (shared_memory_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (shared_memory_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                            //              (terminated)
		.av_begintransfer         (),                                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                                            //              (terminated)
		.av_burstcount            (),                                                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                                                        //              (terminated)
		.av_waitrequest           (1'b0),                                                                        //              (terminated)
		.av_writebyteenable       (),                                                                            //              (terminated)
		.av_lock                  (),                                                                            //              (terminated)
		.uav_clken                (1'b0),                                                                        //              (terminated)
		.av_debugaccess           (),                                                                            //              (terminated)
		.av_outputenable          (),                                                                            //              (terminated)
		.uav_response             (),                                                                            //              (terminated)
		.av_response              (2'b00),                                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                                            //              (terminated)
		.av_writeresponserequest  (),                                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                                             //                      clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                                 //                    reset.reset
		.uav_address              (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (mm_bridge_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_0_s0_write),                                                      //                         .write
		.av_read                  (mm_bridge_0_s0_read),                                                       //                         .read
		.av_readdata              (mm_bridge_0_s0_readdata),                                                   //                         .readdata
		.av_writedata             (mm_bridge_0_s0_writedata),                                                  //                         .writedata
		.av_burstcount            (mm_bridge_0_s0_burstcount),                                                 //                         .burstcount
		.av_byteenable            (mm_bridge_0_s0_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (mm_bridge_0_s0_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (mm_bridge_0_s0_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (mm_bridge_0_s0_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.av_chipselect            (),                                                                          //              (terminated)
		.av_clken                 (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor0_0_cpu_irq_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                                                        //                      clk.clk
		.reset                    (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address              (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processor0_0_cpu_irq_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processor0_0_cpu_irq_0_s0_write),                                                      //                         .write
		.av_writedata             (processor0_0_cpu_irq_0_s0_writedata),                                                  //                         .writedata
		.av_read                  (),                                                                                     //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),                                                 //              (terminated)
		.av_begintransfer         (),                                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                                     //              (terminated)
		.av_burstcount            (),                                                                                     //              (terminated)
		.av_byteenable            (),                                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                                     //              (terminated)
		.av_lock                  (),                                                                                     //              (terminated)
		.av_chipselect            (),                                                                                     //              (terminated)
		.av_clken                 (),                                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                                 //              (terminated)
		.av_debugaccess           (),                                                                                     //              (terminated)
		.av_outputenable          (),                                                                                     //              (terminated)
		.uav_response             (),                                                                                     //              (terminated)
		.av_response              (2'b00),                                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processorm_0_cpu_irq_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                                                        //                      clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                                            //                    reset.reset
		.uav_address              (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processorM_0_cpu_irq_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processorM_0_cpu_irq_0_s0_write),                                                      //                         .write
		.av_writedata             (processorM_0_cpu_irq_0_s0_writedata),                                                  //                         .writedata
		.av_read                  (),                                                                                     //              (terminated)
		.av_readdata              (32'b11011110101011011101111010101101),                                                 //              (terminated)
		.av_begintransfer         (),                                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                                     //              (terminated)
		.av_burstcount            (),                                                                                     //              (terminated)
		.av_byteenable            (),                                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                                     //              (terminated)
		.av_lock                  (),                                                                                     //              (terminated)
		.av_chipselect            (),                                                                                     //              (terminated)
		.av_clken                 (),                                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                                 //              (terminated)
		.av_debugaccess           (),                                                                                     //              (terminated)
		.av_outputenable          (),                                                                                     //              (terminated)
		.uav_response             (),                                                                                     //              (terminated)
		.av_response              (2'b00),                                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processorm_0_reset_monitor_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                                                              //                      clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                                                  //                    reset.reset
		.uav_address              (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processorM_0_reset_monitor_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processorM_0_reset_monitor_0_s0_write),                                                      //                         .write
		.av_read                  (processorM_0_reset_monitor_0_s0_read),                                                       //                         .read
		.av_readdata              (processorM_0_reset_monitor_0_s0_readdata),                                                   //                         .readdata
		.av_writedata             (processorM_0_reset_monitor_0_s0_writedata),                                                  //                         .writedata
		.av_waitrequest           (processorM_0_reset_monitor_0_s0_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                                                           //              (terminated)
		.av_burstcount            (),                                                                                           //              (terminated)
		.av_byteenable            (),                                                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                                           //              (terminated)
		.av_lock                  (),                                                                                           //              (terminated)
		.av_chipselect            (),                                                                                           //              (terminated)
		.av_clken                 (),                                                                                           //              (terminated)
		.uav_clken                (1'b0),                                                                                       //              (terminated)
		.av_debugaccess           (),                                                                                           //              (terminated)
		.av_outputenable          (),                                                                                           //              (terminated)
		.uav_response             (),                                                                                           //              (terminated)
		.av_response              (2'b00),                                                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                                                           //              (terminated)
		.av_writeresponserequest  (),                                                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cfpu_0_csr_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (mutex_0_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (cfpu_0_csr_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (cfpu_0_csr_write),                                                      //                         .write
		.av_read                  (cfpu_0_csr_read),                                                       //                         .read
		.av_readdata              (cfpu_0_csr_readdata),                                                   //                         .readdata
		.av_writedata             (cfpu_0_csr_writedata),                                                  //                         .writedata
		.av_waitrequest           (cfpu_0_csr_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (27),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor1_0_dma_0_control_port_slave_translator (
		.clk                      (clk_0_clk_clk),                                                                                    //                      clk.clk
		.reset                    (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address              (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processor1_0_dma_0_control_port_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processor1_0_dma_0_control_port_slave_write),                                                      //                         .write
		.av_readdata              (processor1_0_dma_0_control_port_slave_readdata),                                                   //                         .readdata
		.av_writedata             (processor1_0_dma_0_control_port_slave_writedata),                                                  //                         .writedata
		.av_chipselect            (processor1_0_dma_0_control_port_slave_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                                                 //              (terminated)
		.av_begintransfer         (),                                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                                 //              (terminated)
		.av_burstcount            (),                                                                                                 //              (terminated)
		.av_byteenable            (),                                                                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                             //              (terminated)
		.av_waitrequest           (1'b0),                                                                                             //              (terminated)
		.av_writebyteenable       (),                                                                                                 //              (terminated)
		.av_lock                  (),                                                                                                 //              (terminated)
		.av_clken                 (),                                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                                             //              (terminated)
		.av_debugaccess           (),                                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                                 //              (terminated)
		.uav_response             (),                                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (27),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor0_0_dma_0_control_port_slave_translator (
		.clk                      (clk_0_clk_clk),                                                                                    //                      clk.clk
		.reset                    (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processor0_0_dma_0_control_port_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processor0_0_dma_0_control_port_slave_write),                                                      //                         .write
		.av_readdata              (processor0_0_dma_0_control_port_slave_readdata),                                                   //                         .readdata
		.av_writedata             (processor0_0_dma_0_control_port_slave_writedata),                                                  //                         .writedata
		.av_chipselect            (processor0_0_dma_0_control_port_slave_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                                                 //              (terminated)
		.av_begintransfer         (),                                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                                 //              (terminated)
		.av_burstcount            (),                                                                                                 //              (terminated)
		.av_byteenable            (),                                                                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                             //              (terminated)
		.av_waitrequest           (1'b0),                                                                                             //              (terminated)
		.av_writebyteenable       (),                                                                                                 //              (terminated)
		.av_lock                  (),                                                                                                 //              (terminated)
		.av_clken                 (),                                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                                             //              (terminated)
		.av_debugaccess           (),                                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                                 //              (terminated)
		.uav_response             (),                                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor1_0_sw_reset_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                                                         //                      clk.clk
		.reset                    (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address              (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processor1_0_sw_reset_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processor1_0_sw_reset_0_s0_write),                                                      //                         .write
		.av_read                  (processor1_0_sw_reset_0_s0_read),                                                       //                         .read
		.av_readdata              (processor1_0_sw_reset_0_s0_readdata),                                                   //                         .readdata
		.av_writedata             (processor1_0_sw_reset_0_s0_writedata),                                                  //                         .writedata
		.av_waitrequest           (processor1_0_sw_reset_0_s0_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                                      //              (terminated)
		.av_burstcount            (),                                                                                      //              (terminated)
		.av_byteenable            (),                                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                                      //              (terminated)
		.av_lock                  (),                                                                                      //              (terminated)
		.av_chipselect            (),                                                                                      //              (terminated)
		.av_clken                 (),                                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                                  //              (terminated)
		.av_debugaccess           (),                                                                                      //              (terminated)
		.av_outputenable          (),                                                                                      //              (terminated)
		.uav_response             (),                                                                                      //              (terminated)
		.av_response              (2'b00),                                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor0_0_sw_reset_0_s0_1_translator (
		.clk                      (clk_0_clk_clk),                                                                           //                      clk.clk
		.reset                    (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (processor0_0_sw_reset_0_s0_1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (processor0_0_sw_reset_0_s0_1_write),                                                      //                         .write
		.av_read                  (processor0_0_sw_reset_0_s0_1_read),                                                       //                         .read
		.av_readdata              (processor0_0_sw_reset_0_s0_1_readdata),                                                   //                         .readdata
		.av_writedata             (processor0_0_sw_reset_0_s0_1_writedata),                                                  //                         .writedata
		.av_waitrequest           (processor0_0_sw_reset_0_s0_1_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                                        //              (terminated)
		.av_burstcount            (),                                                                                        //              (terminated)
		.av_byteenable            (),                                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                                        //              (terminated)
		.av_lock                  (),                                                                                        //              (terminated)
		.av_chipselect            (),                                                                                        //              (terminated)
		.av_clken                 (),                                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                                    //              (terminated)
		.av_debugaccess           (),                                                                                        //              (terminated)
		.av_outputenable          (),                                                                                        //              (terminated)
		.uav_response             (),                                                                                        //              (terminated)
		.av_response              (2'b00),                                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_THREAD_ID_H           (90),
		.PKT_THREAD_ID_L           (90),
		.PKT_CACHE_H               (97),
		.PKT_CACHE_L               (94),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_0_outgoing_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                   (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address              (processor1_0_outgoing_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (processor1_0_outgoing_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (processor1_0_outgoing_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (processor1_0_outgoing_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (processor1_0_outgoing_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (processor1_0_outgoing_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (processor1_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (processor1_0_outgoing_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (processor1_0_outgoing_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (processor1_0_outgoing_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (processor1_0_outgoing_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                                    //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                                     //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                                  //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                              //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                                    //          .ready
		.av_response             (),                                                                                         // (terminated)
		.av_writeresponserequest (1'b0),                                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_THREAD_ID_H           (90),
		.PKT_THREAD_ID_L           (90),
		.PKT_CACHE_H               (97),
		.PKT_CACHE_L               (94),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                   (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address              (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_001_rsp_src_valid),                                                                     //        rp.valid
		.rp_data                 (limiter_001_rsp_src_data),                                                                      //          .data
		.rp_channel              (limiter_001_rsp_src_channel),                                                                   //          .channel
		.rp_startofpacket        (limiter_001_rsp_src_startofpacket),                                                             //          .startofpacket
		.rp_endofpacket          (limiter_001_rsp_src_endofpacket),                                                               //          .endofpacket
		.rp_ready                (limiter_001_rsp_src_ready),                                                                     //          .ready
		.av_response             (),                                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_THREAD_ID_H           (90),
		.PKT_THREAD_ID_L           (90),
		.PKT_CACHE_H               (97),
		.PKT_CACHE_L               (94),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processorm_0_outgoing_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.av_address              (processorm_0_outgoing_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (processorm_0_outgoing_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (processorm_0_outgoing_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (processorm_0_outgoing_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (processorm_0_outgoing_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (processorm_0_outgoing_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (processorm_0_outgoing_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (processorm_0_outgoing_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (processorm_0_outgoing_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (processorm_0_outgoing_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (processorm_0_outgoing_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_002_rsp_src_valid),                                                                //        rp.valid
		.rp_data                 (limiter_002_rsp_src_data),                                                                 //          .data
		.rp_channel              (limiter_002_rsp_src_channel),                                                              //          .channel
		.rp_startofpacket        (limiter_002_rsp_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket          (limiter_002_rsp_src_endofpacket),                                                          //          .endofpacket
		.rp_ready                (limiter_002_rsp_src_ready),                                                                //          .ready
		.av_response             (),                                                                                         // (terminated)
		.av_writeresponserequest (1'b0),                                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_THREAD_ID_H           (90),
		.PKT_THREAD_ID_L           (90),
		.PKT_CACHE_H               (97),
		.PKT_CACHE_L               (94),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                        //       clk.clk
		.reset                   (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_003_src_valid),                                                                           //        rp.valid
		.rp_data                 (rsp_xbar_mux_003_src_data),                                                                            //          .data
		.rp_channel              (rsp_xbar_mux_003_src_channel),                                                                         //          .channel
		.rp_startofpacket        (rsp_xbar_mux_003_src_startofpacket),                                                                   //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_003_src_endofpacket),                                                                     //          .endofpacket
		.rp_ready                (rsp_xbar_mux_003_src_ready),                                                                           //          .ready
		.av_response             (),                                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_THREAD_ID_H           (90),
		.PKT_THREAD_ID_L           (90),
		.PKT_CACHE_H               (97),
		.PKT_CACHE_L               (94),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                        //       clk.clk
		.reset                   (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.av_address              (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_004_src_valid),                                                                           //        rp.valid
		.rp_data                 (rsp_xbar_mux_004_src_data),                                                                            //          .data
		.rp_channel              (rsp_xbar_mux_004_src_channel),                                                                         //          .channel
		.rp_startofpacket        (rsp_xbar_mux_004_src_startofpacket),                                                                   //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_004_src_endofpacket),                                                                     //          .endofpacket
		.rp_ready                (rsp_xbar_mux_004_src_ready),                                                                           //          .ready
		.av_response             (),                                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mutex_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (mutex_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                          //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                        //                .channel
		.rf_sink_ready           (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mutex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (mutex_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mutex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mutex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                   //             clk.clk
		.reset                   (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_001_src_ready),                                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_001_src_valid),                                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_001_src_data),                                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_001_src_startofpacket),                                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_001_src_endofpacket),                                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_001_src_channel),                                                                    //                .channel
		.rf_sink_ready           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                   //       clk.clk
		.reset             (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                           // (terminated)
		.csr_read          (1'b0),                                                                                            // (terminated)
		.csr_write         (1'b0),                                                                                            // (terminated)
		.csr_readdata      (),                                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                            // (terminated)
		.almost_full_data  (),                                                                                                // (terminated)
		.almost_empty_data (),                                                                                                // (terminated)
		.in_empty          (1'b0),                                                                                            // (terminated)
		.out_empty         (),                                                                                                // (terminated)
		.in_error          (1'b0),                                                                                            // (terminated)
		.out_error         (),                                                                                                // (terminated)
		.in_channel        (1'b0),                                                                                            // (terminated)
		.out_channel       ()                                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) shared_memory_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                         //             clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                             //       clk_reset.reset
		.m0_address              (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_memory_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_002_src_ready),                                                            //              cp.ready
		.cp_valid                (cmd_xbar_mux_002_src_valid),                                                            //                .valid
		.cp_data                 (cmd_xbar_mux_002_src_data),                                                             //                .data
		.cp_startofpacket        (cmd_xbar_mux_002_src_startofpacket),                                                    //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_002_src_endofpacket),                                                      //                .endofpacket
		.cp_channel              (cmd_xbar_mux_002_src_channel),                                                          //                .channel
		.rf_sink_ready           (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                 //     (terminated)
		.m0_writeresponserequest (),                                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                         //       clk.clk
		.reset             (mutex_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_data           (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                       //             clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                           //       clk_reset.reset
		.m0_address              (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_003_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_xbar_mux_003_src_valid),                                                          //                .valid
		.cp_data                 (cmd_xbar_mux_003_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_xbar_mux_003_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_003_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_xbar_mux_003_src_channel),                                                        //                .channel
		.rf_sink_ready           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                       //       clk.clk
		.reset             (mutex_0_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                  //             clk.clk
		.reset                   (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_004_src_ready),                                                                     //              cp.ready
		.cp_valid                (cmd_xbar_mux_004_src_valid),                                                                     //                .valid
		.cp_data                 (cmd_xbar_mux_004_src_data),                                                                      //                .data
		.cp_startofpacket        (cmd_xbar_mux_004_src_startofpacket),                                                             //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_004_src_endofpacket),                                                               //                .endofpacket
		.cp_channel              (cmd_xbar_mux_004_src_channel),                                                                   //                .channel
		.rf_sink_ready           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset             (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                          // (terminated)
		.csr_read          (1'b0),                                                                                           // (terminated)
		.csr_write         (1'b0),                                                                                           // (terminated)
		.csr_readdata      (),                                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                           // (terminated)
		.almost_full_data  (),                                                                                               // (terminated)
		.almost_empty_data (),                                                                                               // (terminated)
		.in_empty          (1'b0),                                                                                           // (terminated)
		.out_empty         (),                                                                                               // (terminated)
		.in_error          (1'b0),                                                                                           // (terminated)
		.out_error         (),                                                                                               // (terminated)
		.in_channel        (1'b0),                                                                                           // (terminated)
		.out_channel       ()                                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                  //             clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                                      //       clk_reset.reset
		.m0_address              (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_005_src_ready),                                                                     //              cp.ready
		.cp_valid                (cmd_xbar_mux_005_src_valid),                                                                     //                .valid
		.cp_data                 (cmd_xbar_mux_005_src_data),                                                                      //                .data
		.cp_startofpacket        (cmd_xbar_mux_005_src_startofpacket),                                                             //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_005_src_endofpacket),                                                               //                .endofpacket
		.cp_channel              (cmd_xbar_mux_005_src_channel),                                                                   //                .channel
		.rf_sink_ready           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset             (mutex_0_reset_reset_bridge_in_reset_reset),                                                      // clk_reset.reset
		.in_data           (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                          // (terminated)
		.csr_read          (1'b0),                                                                                           // (terminated)
		.csr_write         (1'b0),                                                                                           // (terminated)
		.csr_readdata      (),                                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                           // (terminated)
		.almost_full_data  (),                                                                                               // (terminated)
		.almost_empty_data (),                                                                                               // (terminated)
		.in_empty          (1'b0),                                                                                           // (terminated)
		.out_empty         (),                                                                                               // (terminated)
		.in_error          (1'b0),                                                                                           // (terminated)
		.out_error         (),                                                                                               // (terminated)
		.in_channel        (1'b0),                                                                                           // (terminated)
		.out_channel       ()                                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                        //             clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                                            //       clk_reset.reset
		.m0_address              (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_006_src_ready),                                                                           //              cp.ready
		.cp_valid                (cmd_xbar_mux_006_src_valid),                                                                           //                .valid
		.cp_data                 (cmd_xbar_mux_006_src_data),                                                                            //                .data
		.cp_startofpacket        (cmd_xbar_mux_006_src_startofpacket),                                                                   //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_006_src_endofpacket),                                                                     //                .endofpacket
		.cp_channel              (cmd_xbar_mux_006_src_channel),                                                                         //                .channel
		.rf_sink_ready           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                                //     (terminated)
		.m0_writeresponserequest (),                                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                        //       clk.clk
		.reset             (mutex_0_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_data           (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                                 // (terminated)
		.csr_readdata      (),                                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                 // (terminated)
		.almost_full_data  (),                                                                                                     // (terminated)
		.almost_empty_data (),                                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                                 // (terminated)
		.out_empty         (),                                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                                 // (terminated)
		.out_error         (),                                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                                 // (terminated)
		.out_channel       ()                                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cfpu_0_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (mutex_0_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (cfpu_0_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_007_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_007_src_valid),                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_007_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_007_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_007_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_007_src_channel),                                                    //                .channel
		.rf_sink_ready           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (mutex_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                              //             clk.clk
		.reset                   (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                                  //       clk_reset.reset
		.m0_address              (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_008_src_ready),                                                                                 //              cp.ready
		.cp_valid                (cmd_xbar_mux_008_src_valid),                                                                                 //                .valid
		.cp_data                 (cmd_xbar_mux_008_src_data),                                                                                  //                .data
		.cp_startofpacket        (cmd_xbar_mux_008_src_startofpacket),                                                                         //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_008_src_endofpacket),                                                                           //                .endofpacket
		.cp_channel              (cmd_xbar_mux_008_src_channel),                                                                               //                .channel
		.rf_sink_ready           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                              //       clk.clk
		.reset             (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                                       // (terminated)
		.csr_readdata      (),                                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                       // (terminated)
		.almost_full_data  (),                                                                                                           // (terminated)
		.almost_empty_data (),                                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                                       // (terminated)
		.out_empty         (),                                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                                       // (terminated)
		.out_error         (),                                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                                       // (terminated)
		.out_channel       ()                                                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                              //             clk.clk
		.reset                   (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_009_src_ready),                                                                                 //              cp.ready
		.cp_valid                (cmd_xbar_mux_009_src_valid),                                                                                 //                .valid
		.cp_data                 (cmd_xbar_mux_009_src_data),                                                                                  //                .data
		.cp_startofpacket        (cmd_xbar_mux_009_src_startofpacket),                                                                         //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_009_src_endofpacket),                                                                           //                .endofpacket
		.cp_channel              (cmd_xbar_mux_009_src_channel),                                                                               //                .channel
		.rf_sink_ready           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                              //       clk.clk
		.reset             (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                                       // (terminated)
		.csr_readdata      (),                                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                       // (terminated)
		.almost_full_data  (),                                                                                                           // (terminated)
		.almost_empty_data (),                                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                                       // (terminated)
		.out_empty         (),                                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                                       // (terminated)
		.out_error         (),                                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                                       // (terminated)
		.out_channel       ()                                                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                   //             clk.clk
		.reset                   (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_010_src_ready),                                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_010_src_valid),                                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_010_src_data),                                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_010_src_startofpacket),                                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_010_src_endofpacket),                                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_010_src_channel),                                                                    //                .channel
		.rf_sink_ready           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                   //       clk.clk
		.reset             (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                           // (terminated)
		.csr_read          (1'b0),                                                                                            // (terminated)
		.csr_write         (1'b0),                                                                                            // (terminated)
		.csr_readdata      (),                                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                            // (terminated)
		.almost_full_data  (),                                                                                                // (terminated)
		.almost_empty_data (),                                                                                                // (terminated)
		.in_empty          (1'b0),                                                                                            // (terminated)
		.out_empty         (),                                                                                                // (terminated)
		.in_error          (1'b0),                                                                                            // (terminated)
		.out_error         (),                                                                                                // (terminated)
		.in_channel        (1'b0),                                                                                            // (terminated)
		.out_channel       ()                                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_ORI_BURST_SIZE_H      (102),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                     //             clk.clk
		.reset                   (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_011_src_ready),                                                                        //              cp.ready
		.cp_valid                (cmd_xbar_mux_011_src_valid),                                                                        //                .valid
		.cp_data                 (cmd_xbar_mux_011_src_data),                                                                         //                .data
		.cp_startofpacket        (cmd_xbar_mux_011_src_startofpacket),                                                                //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_011_src_endofpacket),                                                                  //                .endofpacket
		.cp_channel              (cmd_xbar_mux_011_src_channel),                                                                      //                .channel
		.rf_sink_ready           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                     //       clk.clk
		.reset             (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                             // (terminated)
		.csr_read          (1'b0),                                                                                              // (terminated)
		.csr_write         (1'b0),                                                                                              // (terminated)
		.csr_readdata      (),                                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                              // (terminated)
		.almost_full_data  (),                                                                                                  // (terminated)
		.almost_empty_data (),                                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                                              // (terminated)
		.out_empty         (),                                                                                                  // (terminated)
		.in_error          (1'b0),                                                                                              // (terminated)
		.out_error         (),                                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                                              // (terminated)
		.out_channel       ()                                                                                                   // (terminated)
	);

	nios_fprint_mm_interconnect_1_addr_router addr_router (
		.sink_ready         (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                            //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                    //       src.ready
		.src_valid          (addr_router_src_valid),                                                                    //          .valid
		.src_data           (addr_router_src_data),                                                                     //          .data
		.src_channel        (addr_router_src_channel),                                                                  //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                               //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_addr_router addr_router_001 (
		.sink_ready         (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor0_0_out_system_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                                     //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                                     //          .valid
		.src_data           (addr_router_001_src_data),                                                                      //          .data
		.src_channel        (addr_router_001_src_channel),                                                                   //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                                //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_addr_router_002 addr_router_002 (
		.sink_ready         (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processorm_0_outgoing_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                            //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                                //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                                //          .valid
		.src_data           (addr_router_002_src_data),                                                                 //          .data
		.src_channel        (addr_router_002_src_channel),                                                              //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                           //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_addr_router_003 addr_router_003 (
		.sink_ready         (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                        //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (addr_router_003_src_ready),                                                                            //       src.ready
		.src_valid          (addr_router_003_src_valid),                                                                            //          .valid
		.src_data           (addr_router_003_src_data),                                                                             //          .data
		.src_channel        (addr_router_003_src_channel),                                                                          //          .channel
		.src_startofpacket  (addr_router_003_src_startofpacket),                                                                    //          .startofpacket
		.src_endofpacket    (addr_router_003_src_endofpacket)                                                                       //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_addr_router_003 addr_router_004 (
		.sink_ready         (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor0_0_fingerprint_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                        //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready          (addr_router_004_src_ready),                                                                            //       src.ready
		.src_valid          (addr_router_004_src_valid),                                                                            //          .valid
		.src_data           (addr_router_004_src_data),                                                                             //          .data
		.src_channel        (addr_router_004_src_channel),                                                                          //          .channel
		.src_startofpacket  (addr_router_004_src_startofpacket),                                                                    //          .startofpacket
		.src_endofpacket    (addr_router_004_src_endofpacket)                                                                       //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router id_router (
		.sink_ready         (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mutex_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                   //       src.ready
		.src_valid          (id_router_src_valid),                                                   //          .valid
		.src_data           (id_router_src_data),                                                    //          .data
		.src_channel        (id_router_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                              //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router id_router_001 (
		.sink_ready         (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_0_cpu1_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                         //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                               //       src.ready
		.src_valid          (id_router_001_src_valid),                                                               //          .valid
		.src_data           (id_router_001_src_data),                                                                //          .data
		.src_channel        (id_router_001_src_channel),                                                             //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                          //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router id_router_002 (
		.sink_ready         (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (shared_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                               //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                     //       src.ready
		.src_valid          (id_router_002_src_valid),                                                     //          .valid
		.src_data           (id_router_002_src_data),                                                      //          .data
		.src_channel        (id_router_002_src_channel),                                                   //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router_003 id_router_003 (
		.sink_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                   //       src.ready
		.src_valid          (id_router_003_src_valid),                                                   //          .valid
		.src_data           (id_router_003_src_data),                                                    //          .data
		.src_channel        (id_router_003_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                              //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router id_router_004 (
		.sink_ready         (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor0_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                        //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                                              //       src.ready
		.src_valid          (id_router_004_src_valid),                                                              //          .valid
		.src_data           (id_router_004_src_data),                                                               //          .data
		.src_channel        (id_router_004_src_channel),                                                            //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                                         //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router id_router_005 (
		.sink_ready         (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processorm_0_cpu_irq_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                        //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready          (id_router_005_src_ready),                                                              //       src.ready
		.src_valid          (id_router_005_src_valid),                                                              //          .valid
		.src_data           (id_router_005_src_data),                                                               //          .data
		.src_channel        (id_router_005_src_channel),                                                            //          .channel
		.src_startofpacket  (id_router_005_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (id_router_005_src_endofpacket)                                                         //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router id_router_006 (
		.sink_ready         (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processorm_0_reset_monitor_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                              //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.src_ready          (id_router_006_src_ready),                                                                    //       src.ready
		.src_valid          (id_router_006_src_valid),                                                                    //          .valid
		.src_data           (id_router_006_src_data),                                                                     //          .data
		.src_channel        (id_router_006_src_channel),                                                                  //          .channel
		.src_startofpacket  (id_router_006_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket    (id_router_006_src_endofpacket)                                                               //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router_007 id_router_007 (
		.sink_ready         (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cfpu_0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_007_src_ready),                                               //       src.ready
		.src_valid          (id_router_007_src_valid),                                               //          .valid
		.src_data           (id_router_007_src_data),                                                //          .data
		.src_channel        (id_router_007_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_007_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_007_src_endofpacket)                                          //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router_007 id_router_008 (
		.sink_ready         (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                    //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (id_router_008_src_ready),                                                                          //       src.ready
		.src_valid          (id_router_008_src_valid),                                                                          //          .valid
		.src_data           (id_router_008_src_data),                                                                           //          .data
		.src_channel        (id_router_008_src_channel),                                                                        //          .channel
		.src_startofpacket  (id_router_008_src_startofpacket),                                                                  //          .startofpacket
		.src_endofpacket    (id_router_008_src_endofpacket)                                                                     //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router_007 id_router_009 (
		.sink_ready         (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor0_0_dma_0_control_port_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                    //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_009_src_ready),                                                                          //       src.ready
		.src_valid          (id_router_009_src_valid),                                                                          //          .valid
		.src_data           (id_router_009_src_data),                                                                           //          .data
		.src_channel        (id_router_009_src_channel),                                                                        //          .channel
		.src_startofpacket  (id_router_009_src_startofpacket),                                                                  //          .startofpacket
		.src_endofpacket    (id_router_009_src_endofpacket)                                                                     //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router_007 id_router_010 (
		.sink_ready         (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_0_sw_reset_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                         //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (id_router_010_src_ready),                                                               //       src.ready
		.src_valid          (id_router_010_src_valid),                                                               //          .valid
		.src_data           (id_router_010_src_data),                                                                //          .data
		.src_channel        (id_router_010_src_channel),                                                             //          .channel
		.src_startofpacket  (id_router_010_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (id_router_010_src_endofpacket)                                                          //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_id_router_007 id_router_011 (
		.sink_ready         (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor0_0_sw_reset_0_s0_1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                           //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (id_router_011_src_ready),                                                                 //       src.ready
		.src_valid          (id_router_011_src_valid),                                                                 //          .valid
		.src_data           (id_router_011_src_data),                                                                  //          .data
		.src_channel        (id_router_011_src_channel),                                                               //          .channel
		.src_startofpacket  (id_router_011_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket    (id_router_011_src_endofpacket)                                                            //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (clk_0_clk_clk),                                                             //       clk.clk
		.reset                  (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                                                     //          .valid
		.cmd_sink_data          (addr_router_src_data),                                                      //          .data
		.cmd_sink_channel       (addr_router_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                                                     //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                                      //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                                                   //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                                             //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                                               //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                                                     //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                                                     //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                                      //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                                                   //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                                             //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                                               //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                                                     // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                  (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                                                      //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                                                      //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                                                       //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),                                                    //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),                                              //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),                                                //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                                                      //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                                                       //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                                                    //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),                                              //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),                                                //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_001_src_ready),                                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_001_src_valid),                                                     //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_001_src_channel),                                                   //          .channel
		.rsp_sink_data          (rsp_xbar_mux_001_src_data),                                                      //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_001_src_startofpacket),                                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_001_src_endofpacket),                                               //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                                                      //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                                                      //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                                                       //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                                                    //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),                                              //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),                                                //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                                                      // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (86),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (82),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_002 (
		.clk                    (clk_0_clk_clk),                             //       clk.clk
		.reset                  (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_002_src_ready),                 //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_002_src_valid),                 //          .valid
		.cmd_sink_data          (addr_router_002_src_data),                  //          .data
		.cmd_sink_channel       (addr_router_002_src_channel),               //          .channel
		.cmd_sink_startofpacket (addr_router_002_src_startofpacket),         //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_002_src_endofpacket),           //          .endofpacket
		.cmd_src_ready          (limiter_002_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (limiter_002_cmd_src_data),                  //          .data
		.cmd_src_channel        (limiter_002_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (limiter_002_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (limiter_002_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_002_src_ready),                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_002_src_valid),                //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_002_src_channel),              //          .channel
		.rsp_sink_data          (rsp_xbar_mux_002_src_data),                 //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_002_src_startofpacket),        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_002_src_endofpacket),          //          .endofpacket
		.rsp_src_ready          (limiter_002_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (limiter_002_rsp_src_valid),                 //          .valid
		.rsp_src_data           (limiter_002_rsp_src_data),                  //          .data
		.rsp_src_channel        (limiter_002_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (limiter_002_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (limiter_002_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (limiter_002_cmd_valid_data)                 // cmd_valid.data
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_0_clk_clk),                                                             //        clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                                                     //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                                                   //           .channel
		.sink_data          (limiter_cmd_src_data),                                                      //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),                                             //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),                                               //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                                                    // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),                                                 //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                                                 //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                                                  //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                                               //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                                           //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                                                 //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                                                 //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                                                  //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                                               //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),                                           //           .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),                                                 //       src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),                                                 //           .valid
		.src2_data          (cmd_xbar_demux_src2_data),                                                  //           .data
		.src2_channel       (cmd_xbar_demux_src2_channel),                                               //           .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket),                                           //           .endofpacket
		.src3_ready         (cmd_xbar_demux_src3_ready),                                                 //       src3.ready
		.src3_valid         (cmd_xbar_demux_src3_valid),                                                 //           .valid
		.src3_data          (cmd_xbar_demux_src3_data),                                                  //           .data
		.src3_channel       (cmd_xbar_demux_src3_channel),                                               //           .channel
		.src3_startofpacket (cmd_xbar_demux_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_src3_endofpacket),                                           //           .endofpacket
		.src4_ready         (cmd_xbar_demux_src4_ready),                                                 //       src4.ready
		.src4_valid         (cmd_xbar_demux_src4_valid),                                                 //           .valid
		.src4_data          (cmd_xbar_demux_src4_data),                                                  //           .data
		.src4_channel       (cmd_xbar_demux_src4_channel),                                               //           .channel
		.src4_startofpacket (cmd_xbar_demux_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket   (cmd_xbar_demux_src4_endofpacket),                                           //           .endofpacket
		.src5_ready         (cmd_xbar_demux_src5_ready),                                                 //       src5.ready
		.src5_valid         (cmd_xbar_demux_src5_valid),                                                 //           .valid
		.src5_data          (cmd_xbar_demux_src5_data),                                                  //           .data
		.src5_channel       (cmd_xbar_demux_src5_channel),                                               //           .channel
		.src5_startofpacket (cmd_xbar_demux_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket   (cmd_xbar_demux_src5_endofpacket),                                           //           .endofpacket
		.src6_ready         (cmd_xbar_demux_src6_ready),                                                 //       src6.ready
		.src6_valid         (cmd_xbar_demux_src6_valid),                                                 //           .valid
		.src6_data          (cmd_xbar_demux_src6_data),                                                  //           .data
		.src6_channel       (cmd_xbar_demux_src6_channel),                                               //           .channel
		.src6_startofpacket (cmd_xbar_demux_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket   (cmd_xbar_demux_src6_endofpacket)                                            //           .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                                                                  //        clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_001_cmd_src_ready),                                                      //       sink.ready
		.sink_channel       (limiter_001_cmd_src_channel),                                                    //           .channel
		.sink_data          (limiter_001_cmd_src_data),                                                       //           .data
		.sink_startofpacket (limiter_001_cmd_src_startofpacket),                                              //           .startofpacket
		.sink_endofpacket   (limiter_001_cmd_src_endofpacket),                                                //           .endofpacket
		.sink_valid         (limiter_001_cmd_valid_data),                                                     // sink_valid.data
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                                                  //       src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                                                  //           .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                                                   //           .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                                                //           .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),                                          //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),                                            //           .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),                                                  //       src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),                                                  //           .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),                                                   //           .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),                                                //           .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),                                          //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),                                            //           .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),                                                  //       src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),                                                  //           .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),                                                   //           .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),                                                //           .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),                                          //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket),                                            //           .endofpacket
		.src3_ready         (cmd_xbar_demux_001_src3_ready),                                                  //       src3.ready
		.src3_valid         (cmd_xbar_demux_001_src3_valid),                                                  //           .valid
		.src3_data          (cmd_xbar_demux_001_src3_data),                                                   //           .data
		.src3_channel       (cmd_xbar_demux_001_src3_channel),                                                //           .channel
		.src3_startofpacket (cmd_xbar_demux_001_src3_startofpacket),                                          //           .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_001_src3_endofpacket),                                            //           .endofpacket
		.src4_ready         (cmd_xbar_demux_001_src4_ready),                                                  //       src4.ready
		.src4_valid         (cmd_xbar_demux_001_src4_valid),                                                  //           .valid
		.src4_data          (cmd_xbar_demux_001_src4_data),                                                   //           .data
		.src4_channel       (cmd_xbar_demux_001_src4_channel),                                                //           .channel
		.src4_startofpacket (cmd_xbar_demux_001_src4_startofpacket),                                          //           .startofpacket
		.src4_endofpacket   (cmd_xbar_demux_001_src4_endofpacket),                                            //           .endofpacket
		.src5_ready         (cmd_xbar_demux_001_src5_ready),                                                  //       src5.ready
		.src5_valid         (cmd_xbar_demux_001_src5_valid),                                                  //           .valid
		.src5_data          (cmd_xbar_demux_001_src5_data),                                                   //           .data
		.src5_channel       (cmd_xbar_demux_001_src5_channel),                                                //           .channel
		.src5_startofpacket (cmd_xbar_demux_001_src5_startofpacket),                                          //           .startofpacket
		.src5_endofpacket   (cmd_xbar_demux_001_src5_endofpacket),                                            //           .endofpacket
		.src6_ready         (cmd_xbar_demux_001_src6_ready),                                                  //       src6.ready
		.src6_valid         (cmd_xbar_demux_001_src6_valid),                                                  //           .valid
		.src6_data          (cmd_xbar_demux_001_src6_data),                                                   //           .data
		.src6_channel       (cmd_xbar_demux_001_src6_channel),                                                //           .channel
		.src6_startofpacket (cmd_xbar_demux_001_src6_startofpacket),                                          //           .startofpacket
		.src6_endofpacket   (cmd_xbar_demux_001_src6_endofpacket)                                             //           .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_002 cmd_xbar_demux_002 (
		.clk                 (clk_0_clk_clk),                             //        clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_002_cmd_src_ready),                 //       sink.ready
		.sink_channel        (limiter_002_cmd_src_channel),               //           .channel
		.sink_data           (limiter_002_cmd_src_data),                  //           .data
		.sink_startofpacket  (limiter_002_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (limiter_002_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (limiter_002_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_xbar_demux_002_src0_ready),             //       src0.ready
		.src0_valid          (cmd_xbar_demux_002_src0_valid),             //           .valid
		.src0_data           (cmd_xbar_demux_002_src0_data),              //           .data
		.src0_channel        (cmd_xbar_demux_002_src0_channel),           //           .channel
		.src0_startofpacket  (cmd_xbar_demux_002_src0_startofpacket),     //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_002_src0_endofpacket),       //           .endofpacket
		.src1_ready          (cmd_xbar_demux_002_src1_ready),             //       src1.ready
		.src1_valid          (cmd_xbar_demux_002_src1_valid),             //           .valid
		.src1_data           (cmd_xbar_demux_002_src1_data),              //           .data
		.src1_channel        (cmd_xbar_demux_002_src1_channel),           //           .channel
		.src1_startofpacket  (cmd_xbar_demux_002_src1_startofpacket),     //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_002_src1_endofpacket),       //           .endofpacket
		.src2_ready          (cmd_xbar_demux_002_src2_ready),             //       src2.ready
		.src2_valid          (cmd_xbar_demux_002_src2_valid),             //           .valid
		.src2_data           (cmd_xbar_demux_002_src2_data),              //           .data
		.src2_channel        (cmd_xbar_demux_002_src2_channel),           //           .channel
		.src2_startofpacket  (cmd_xbar_demux_002_src2_startofpacket),     //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_002_src2_endofpacket),       //           .endofpacket
		.src3_ready          (cmd_xbar_demux_002_src3_ready),             //       src3.ready
		.src3_valid          (cmd_xbar_demux_002_src3_valid),             //           .valid
		.src3_data           (cmd_xbar_demux_002_src3_data),              //           .data
		.src3_channel        (cmd_xbar_demux_002_src3_channel),           //           .channel
		.src3_startofpacket  (cmd_xbar_demux_002_src3_startofpacket),     //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_002_src3_endofpacket),       //           .endofpacket
		.src4_ready          (cmd_xbar_demux_002_src4_ready),             //       src4.ready
		.src4_valid          (cmd_xbar_demux_002_src4_valid),             //           .valid
		.src4_data           (cmd_xbar_demux_002_src4_data),              //           .data
		.src4_channel        (cmd_xbar_demux_002_src4_channel),           //           .channel
		.src4_startofpacket  (cmd_xbar_demux_002_src4_startofpacket),     //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_002_src4_endofpacket),       //           .endofpacket
		.src5_ready          (cmd_xbar_demux_002_src5_ready),             //       src5.ready
		.src5_valid          (cmd_xbar_demux_002_src5_valid),             //           .valid
		.src5_data           (cmd_xbar_demux_002_src5_data),              //           .data
		.src5_channel        (cmd_xbar_demux_002_src5_channel),           //           .channel
		.src5_startofpacket  (cmd_xbar_demux_002_src5_startofpacket),     //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_002_src5_endofpacket),       //           .endofpacket
		.src6_ready          (cmd_xbar_demux_002_src6_ready),             //       src6.ready
		.src6_valid          (cmd_xbar_demux_002_src6_valid),             //           .valid
		.src6_data           (cmd_xbar_demux_002_src6_data),              //           .data
		.src6_channel        (cmd_xbar_demux_002_src6_channel),           //           .channel
		.src6_startofpacket  (cmd_xbar_demux_002_src6_startofpacket),     //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_002_src6_endofpacket),       //           .endofpacket
		.src7_ready          (cmd_xbar_demux_002_src7_ready),             //       src7.ready
		.src7_valid          (cmd_xbar_demux_002_src7_valid),             //           .valid
		.src7_data           (cmd_xbar_demux_002_src7_data),              //           .data
		.src7_channel        (cmd_xbar_demux_002_src7_channel),           //           .channel
		.src7_startofpacket  (cmd_xbar_demux_002_src7_startofpacket),     //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_002_src7_endofpacket),       //           .endofpacket
		.src8_ready          (cmd_xbar_demux_002_src8_ready),             //       src8.ready
		.src8_valid          (cmd_xbar_demux_002_src8_valid),             //           .valid
		.src8_data           (cmd_xbar_demux_002_src8_data),              //           .data
		.src8_channel        (cmd_xbar_demux_002_src8_channel),           //           .channel
		.src8_startofpacket  (cmd_xbar_demux_002_src8_startofpacket),     //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_002_src8_endofpacket),       //           .endofpacket
		.src9_ready          (cmd_xbar_demux_002_src9_ready),             //       src9.ready
		.src9_valid          (cmd_xbar_demux_002_src9_valid),             //           .valid
		.src9_data           (cmd_xbar_demux_002_src9_data),              //           .data
		.src9_channel        (cmd_xbar_demux_002_src9_channel),           //           .channel
		.src9_startofpacket  (cmd_xbar_demux_002_src9_startofpacket),     //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_002_src9_endofpacket),       //           .endofpacket
		.src10_ready         (cmd_xbar_demux_002_src10_ready),            //      src10.ready
		.src10_valid         (cmd_xbar_demux_002_src10_valid),            //           .valid
		.src10_data          (cmd_xbar_demux_002_src10_data),             //           .data
		.src10_channel       (cmd_xbar_demux_002_src10_channel),          //           .channel
		.src10_startofpacket (cmd_xbar_demux_002_src10_startofpacket),    //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_002_src10_endofpacket),      //           .endofpacket
		.src11_ready         (cmd_xbar_demux_002_src11_ready),            //      src11.ready
		.src11_valid         (cmd_xbar_demux_002_src11_valid),            //           .valid
		.src11_data          (cmd_xbar_demux_002_src11_data),             //           .data
		.src11_channel       (cmd_xbar_demux_002_src11_channel),          //           .channel
		.src11_startofpacket (cmd_xbar_demux_002_src11_startofpacket),    //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_002_src11_endofpacket)       //           .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 cmd_xbar_demux_003 (
		.clk                (clk_0_clk_clk),                                                             //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_003_src_ready),                                                 //      sink.ready
		.sink_channel       (addr_router_003_src_channel),                                               //          .channel
		.sink_data          (addr_router_003_src_data),                                                  //          .data
		.sink_startofpacket (addr_router_003_src_startofpacket),                                         //          .startofpacket
		.sink_endofpacket   (addr_router_003_src_endofpacket),                                           //          .endofpacket
		.sink_valid         (addr_router_003_src_valid),                                                 //          .valid
		.src0_ready         (cmd_xbar_demux_003_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_xbar_demux_003_src0_valid),                                             //          .valid
		.src0_data          (cmd_xbar_demux_003_src0_data),                                              //          .data
		.src0_channel       (cmd_xbar_demux_003_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_xbar_demux_003_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 cmd_xbar_demux_004 (
		.clk                (clk_0_clk_clk),                                                                  //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_004_src_ready),                                                      //      sink.ready
		.sink_channel       (addr_router_004_src_channel),                                                    //          .channel
		.sink_data          (addr_router_004_src_data),                                                       //          .data
		.sink_startofpacket (addr_router_004_src_startofpacket),                                              //          .startofpacket
		.sink_endofpacket   (addr_router_004_src_endofpacket),                                                //          .endofpacket
		.sink_valid         (addr_router_004_src_valid),                                                      //          .valid
		.src0_ready         (cmd_xbar_demux_004_src0_ready),                                                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_004_src0_valid),                                                  //          .valid
		.src0_data          (cmd_xbar_demux_004_src0_data),                                                   //          .data
		.src0_channel       (cmd_xbar_demux_004_src0_channel),                                                //          .channel
		.src0_startofpacket (cmd_xbar_demux_004_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_004_src0_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                    //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                    //          .valid
		.src_data            (cmd_xbar_mux_src_data),                     //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                  //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                 //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),               //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),             //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),             //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),           //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),              //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),             //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),             //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),           //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),              //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                                                //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                                                //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                                                 //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                                                 //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                                               //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                                                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),                                             //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),                                             //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),                                           //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),                                              //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),                                       //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src1_ready),                                             //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src1_valid),                                             //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src1_channel),                                           //          .channel
		.sink2_data          (cmd_xbar_demux_002_src1_data),                                              //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src1_startofpacket),                                     //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src1_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                 //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),              //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),                 //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),               //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),             //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),             //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),           //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),              //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src2_ready),             //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src2_valid),             //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src2_channel),           //          .channel
		.sink2_data          (cmd_xbar_demux_002_src2_data),              //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src2_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src2_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux_003 cmd_xbar_mux_003 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),                //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),                //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),                 //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),              //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src3_valid),                 //          .valid
		.sink0_channel       (cmd_xbar_demux_src3_channel),               //          .channel
		.sink0_data          (cmd_xbar_demux_src3_data),                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src3_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src3_ready),             //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src3_valid),             //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src3_channel),           //          .channel
		.sink1_data          (cmd_xbar_demux_001_src3_data),              //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src3_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src3_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src3_ready),             //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src3_valid),             //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src3_channel),           //          .channel
		.sink2_data          (cmd_xbar_demux_002_src3_data),              //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src3_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src3_endofpacket),       //          .endofpacket
		.sink3_ready         (cmd_xbar_demux_003_src0_ready),             //     sink3.ready
		.sink3_valid         (cmd_xbar_demux_003_src0_valid),             //          .valid
		.sink3_channel       (cmd_xbar_demux_003_src0_channel),           //          .channel
		.sink3_data          (cmd_xbar_demux_003_src0_data),              //          .data
		.sink3_startofpacket (cmd_xbar_demux_003_src0_startofpacket),     //          .startofpacket
		.sink3_endofpacket   (cmd_xbar_demux_003_src0_endofpacket),       //          .endofpacket
		.sink4_ready         (cmd_xbar_demux_004_src0_ready),             //     sink4.ready
		.sink4_valid         (cmd_xbar_demux_004_src0_valid),             //          .valid
		.sink4_channel       (cmd_xbar_demux_004_src0_channel),           //          .channel
		.sink4_data          (cmd_xbar_demux_004_src0_data),              //          .data
		.sink4_startofpacket (cmd_xbar_demux_004_src0_startofpacket),     //          .startofpacket
		.sink4_endofpacket   (cmd_xbar_demux_004_src0_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                  //       clk.clk
		.reset               (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),                                                     //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),                                                     //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),                                                      //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src4_ready),                                                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src4_valid),                                                      //          .valid
		.sink0_channel       (cmd_xbar_demux_src4_channel),                                                    //          .channel
		.sink0_data          (cmd_xbar_demux_src4_data),                                                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_src4_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src4_endofpacket),                                                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src4_ready),                                                  //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src4_valid),                                                  //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src4_channel),                                                //          .channel
		.sink1_data          (cmd_xbar_demux_001_src4_data),                                                   //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src4_startofpacket),                                          //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src4_endofpacket),                                            //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src4_ready),                                                  //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src4_valid),                                                  //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src4_channel),                                                //          .channel
		.sink2_data          (cmd_xbar_demux_002_src4_data),                                                   //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src4_startofpacket),                                          //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src4_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_005 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_005_src_ready),                //       src.ready
		.src_valid           (cmd_xbar_mux_005_src_valid),                //          .valid
		.src_data            (cmd_xbar_mux_005_src_data),                 //          .data
		.src_channel         (cmd_xbar_mux_005_src_channel),              //          .channel
		.src_startofpacket   (cmd_xbar_mux_005_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_005_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src5_ready),                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src5_valid),                 //          .valid
		.sink0_channel       (cmd_xbar_demux_src5_channel),               //          .channel
		.sink0_data          (cmd_xbar_demux_src5_data),                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_src5_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src5_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src5_ready),             //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src5_valid),             //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src5_channel),           //          .channel
		.sink1_data          (cmd_xbar_demux_001_src5_data),              //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src5_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src5_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src5_ready),             //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src5_valid),             //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src5_channel),           //          .channel
		.sink2_data          (cmd_xbar_demux_002_src5_data),              //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src5_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src5_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_006 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_006_src_ready),                //       src.ready
		.src_valid           (cmd_xbar_mux_006_src_valid),                //          .valid
		.src_data            (cmd_xbar_mux_006_src_data),                 //          .data
		.src_channel         (cmd_xbar_mux_006_src_channel),              //          .channel
		.src_startofpacket   (cmd_xbar_mux_006_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_006_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src6_ready),                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src6_valid),                 //          .valid
		.sink0_channel       (cmd_xbar_demux_src6_channel),               //          .channel
		.sink0_data          (cmd_xbar_demux_src6_data),                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_src6_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src6_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src6_ready),             //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src6_valid),             //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src6_channel),           //          .channel
		.sink1_data          (cmd_xbar_demux_001_src6_data),              //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src6_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src6_endofpacket),       //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src6_ready),             //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src6_valid),             //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src6_channel),           //          .channel
		.sink2_data          (cmd_xbar_demux_002_src6_data),              //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src6_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src6_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux_007 cmd_xbar_mux_007 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_007_src_ready),                //       src.ready
		.src_valid           (cmd_xbar_mux_007_src_valid),                //          .valid
		.src_data            (cmd_xbar_mux_007_src_data),                 //          .data
		.src_channel         (cmd_xbar_mux_007_src_channel),              //          .channel
		.src_startofpacket   (cmd_xbar_mux_007_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_007_src_endofpacket),          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src7_ready),             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src7_valid),             //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src7_channel),           //          .channel
		.sink0_data          (cmd_xbar_demux_002_src7_data),              //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src7_startofpacket),     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src7_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux_007 cmd_xbar_mux_008 (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_008_src_ready),                                                //       src.ready
		.src_valid           (cmd_xbar_mux_008_src_valid),                                                //          .valid
		.src_data            (cmd_xbar_mux_008_src_data),                                                 //          .data
		.src_channel         (cmd_xbar_mux_008_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_xbar_mux_008_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_008_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src8_ready),                                             //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src8_valid),                                             //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src8_channel),                                           //          .channel
		.sink0_data          (cmd_xbar_demux_002_src8_data),                                              //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src8_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src8_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux_007 cmd_xbar_mux_009 (
		.clk                 (clk_0_clk_clk),                                                                  //       clk.clk
		.reset               (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_009_src_ready),                                                     //       src.ready
		.src_valid           (cmd_xbar_mux_009_src_valid),                                                     //          .valid
		.src_data            (cmd_xbar_mux_009_src_data),                                                      //          .data
		.src_channel         (cmd_xbar_mux_009_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_xbar_mux_009_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_009_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src9_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src9_valid),                                                  //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src9_channel),                                                //          .channel
		.sink0_data          (cmd_xbar_demux_002_src9_data),                                                   //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src9_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src9_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux_007 cmd_xbar_mux_010 (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_010_src_ready),                                                //       src.ready
		.src_valid           (cmd_xbar_mux_010_src_valid),                                                //          .valid
		.src_data            (cmd_xbar_mux_010_src_data),                                                 //          .data
		.src_channel         (cmd_xbar_mux_010_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_xbar_mux_010_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_010_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src10_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src10_valid),                                            //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src10_channel),                                          //          .channel
		.sink0_data          (cmd_xbar_demux_002_src10_data),                                             //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src10_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src10_endofpacket)                                       //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_mux_007 cmd_xbar_mux_011 (
		.clk                 (clk_0_clk_clk),                                                                  //       clk.clk
		.reset               (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_011_src_ready),                                                     //       src.ready
		.src_valid           (cmd_xbar_mux_011_src_valid),                                                     //          .valid
		.src_data            (cmd_xbar_mux_011_src_data),                                                      //          .data
		.src_channel         (cmd_xbar_mux_011_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_xbar_mux_011_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_011_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src11_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src11_valid),                                                 //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src11_channel),                                               //          .channel
		.sink0_data          (cmd_xbar_demux_002_src11_data),                                                  //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src11_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src11_endofpacket)                                            //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                       //      sink.ready
		.sink_channel       (id_router_src_channel),                     //          .channel
		.sink_data          (id_router_src_data),                        //          .data
		.sink_startofpacket (id_router_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                 //          .endofpacket
		.sink_valid         (id_router_src_valid),                       //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                 //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                  //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),               //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                 //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                  //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),               //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket),           //          .endofpacket
		.src2_ready         (rsp_xbar_demux_src2_ready),                 //      src2.ready
		.src2_valid         (rsp_xbar_demux_src2_valid),                 //          .valid
		.src2_data          (rsp_xbar_demux_src2_data),                  //          .data
		.src2_channel       (rsp_xbar_demux_src2_channel),               //          .channel
		.src2_startofpacket (rsp_xbar_demux_src2_startofpacket),         //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_src2_endofpacket)            //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                                                             //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                                                   //      sink.ready
		.sink_channel       (id_router_001_src_channel),                                                 //          .channel
		.sink_data          (id_router_001_src_data),                                                    //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),                                           //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                                             //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                                                   //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                                             //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                                              //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),                                       //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),                                             //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),                                             //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                                              //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),                                           //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),                                     //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),                                       //          .endofpacket
		.src2_ready         (rsp_xbar_demux_001_src2_ready),                                             //      src2.ready
		.src2_valid         (rsp_xbar_demux_001_src2_valid),                                             //          .valid
		.src2_data          (rsp_xbar_demux_001_src2_data),                                              //          .data
		.src2_channel       (rsp_xbar_demux_001_src2_channel),                                           //          .channel
		.src2_startofpacket (rsp_xbar_demux_001_src2_startofpacket),                                     //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_002 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                   //      sink.ready
		.sink_channel       (id_router_002_src_channel),                 //          .channel
		.sink_data          (id_router_002_src_data),                    //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),             //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                   //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),             //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),             //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),              //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),           //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),             //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),             //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),              //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),           //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket),       //          .endofpacket
		.src2_ready         (rsp_xbar_demux_002_src2_ready),             //      src2.ready
		.src2_valid         (rsp_xbar_demux_002_src2_valid),             //          .valid
		.src2_data          (rsp_xbar_demux_002_src2_data),              //          .data
		.src2_channel       (rsp_xbar_demux_002_src2_channel),           //          .channel
		.src2_startofpacket (rsp_xbar_demux_002_src2_startofpacket),     //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_002_src2_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux_003 rsp_xbar_demux_003 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                   //      sink.ready
		.sink_channel       (id_router_003_src_channel),                 //          .channel
		.sink_data          (id_router_003_src_data),                    //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),             //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                   //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),             //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),             //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),              //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),           //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),             //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),             //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),              //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),           //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket),       //          .endofpacket
		.src2_ready         (rsp_xbar_demux_003_src2_ready),             //      src2.ready
		.src2_valid         (rsp_xbar_demux_003_src2_valid),             //          .valid
		.src2_data          (rsp_xbar_demux_003_src2_data),              //          .data
		.src2_channel       (rsp_xbar_demux_003_src2_channel),           //          .channel
		.src2_startofpacket (rsp_xbar_demux_003_src2_startofpacket),     //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_003_src2_endofpacket),       //          .endofpacket
		.src3_ready         (rsp_xbar_demux_003_src3_ready),             //      src3.ready
		.src3_valid         (rsp_xbar_demux_003_src3_valid),             //          .valid
		.src3_data          (rsp_xbar_demux_003_src3_data),              //          .data
		.src3_channel       (rsp_xbar_demux_003_src3_channel),           //          .channel
		.src3_startofpacket (rsp_xbar_demux_003_src3_startofpacket),     //          .startofpacket
		.src3_endofpacket   (rsp_xbar_demux_003_src3_endofpacket),       //          .endofpacket
		.src4_ready         (rsp_xbar_demux_003_src4_ready),             //      src4.ready
		.src4_valid         (rsp_xbar_demux_003_src4_valid),             //          .valid
		.src4_data          (rsp_xbar_demux_003_src4_data),              //          .data
		.src4_channel       (rsp_xbar_demux_003_src4_channel),           //          .channel
		.src4_startofpacket (rsp_xbar_demux_003_src4_startofpacket),     //          .startofpacket
		.src4_endofpacket   (rsp_xbar_demux_003_src4_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_004 (
		.clk                (clk_0_clk_clk),                                                                  //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_004_src_ready),                                                        //      sink.ready
		.sink_channel       (id_router_004_src_channel),                                                      //          .channel
		.sink_data          (id_router_004_src_data),                                                         //          .data
		.sink_startofpacket (id_router_004_src_startofpacket),                                                //          .startofpacket
		.sink_endofpacket   (id_router_004_src_endofpacket),                                                  //          .endofpacket
		.sink_valid         (id_router_004_src_valid),                                                        //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),                                                  //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),                                                  //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),                                                   //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),                                                //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),                                            //          .endofpacket
		.src1_ready         (rsp_xbar_demux_004_src1_ready),                                                  //      src1.ready
		.src1_valid         (rsp_xbar_demux_004_src1_valid),                                                  //          .valid
		.src1_data          (rsp_xbar_demux_004_src1_data),                                                   //          .data
		.src1_channel       (rsp_xbar_demux_004_src1_channel),                                                //          .channel
		.src1_startofpacket (rsp_xbar_demux_004_src1_startofpacket),                                          //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_004_src1_endofpacket),                                            //          .endofpacket
		.src2_ready         (rsp_xbar_demux_004_src2_ready),                                                  //      src2.ready
		.src2_valid         (rsp_xbar_demux_004_src2_valid),                                                  //          .valid
		.src2_data          (rsp_xbar_demux_004_src2_data),                                                   //          .data
		.src2_channel       (rsp_xbar_demux_004_src2_channel),                                                //          .channel
		.src2_startofpacket (rsp_xbar_demux_004_src2_startofpacket),                                          //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_004_src2_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_005 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_005_src_ready),                   //      sink.ready
		.sink_channel       (id_router_005_src_channel),                 //          .channel
		.sink_data          (id_router_005_src_data),                    //          .data
		.sink_startofpacket (id_router_005_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (id_router_005_src_endofpacket),             //          .endofpacket
		.sink_valid         (id_router_005_src_valid),                   //          .valid
		.src0_ready         (rsp_xbar_demux_005_src0_ready),             //      src0.ready
		.src0_valid         (rsp_xbar_demux_005_src0_valid),             //          .valid
		.src0_data          (rsp_xbar_demux_005_src0_data),              //          .data
		.src0_channel       (rsp_xbar_demux_005_src0_channel),           //          .channel
		.src0_startofpacket (rsp_xbar_demux_005_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_005_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_xbar_demux_005_src1_ready),             //      src1.ready
		.src1_valid         (rsp_xbar_demux_005_src1_valid),             //          .valid
		.src1_data          (rsp_xbar_demux_005_src1_data),              //          .data
		.src1_channel       (rsp_xbar_demux_005_src1_channel),           //          .channel
		.src1_startofpacket (rsp_xbar_demux_005_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_005_src1_endofpacket),       //          .endofpacket
		.src2_ready         (rsp_xbar_demux_005_src2_ready),             //      src2.ready
		.src2_valid         (rsp_xbar_demux_005_src2_valid),             //          .valid
		.src2_data          (rsp_xbar_demux_005_src2_data),              //          .data
		.src2_channel       (rsp_xbar_demux_005_src2_channel),           //          .channel
		.src2_startofpacket (rsp_xbar_demux_005_src2_startofpacket),     //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_005_src2_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_006 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_006_src_ready),                   //      sink.ready
		.sink_channel       (id_router_006_src_channel),                 //          .channel
		.sink_data          (id_router_006_src_data),                    //          .data
		.sink_startofpacket (id_router_006_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (id_router_006_src_endofpacket),             //          .endofpacket
		.sink_valid         (id_router_006_src_valid),                   //          .valid
		.src0_ready         (rsp_xbar_demux_006_src0_ready),             //      src0.ready
		.src0_valid         (rsp_xbar_demux_006_src0_valid),             //          .valid
		.src0_data          (rsp_xbar_demux_006_src0_data),              //          .data
		.src0_channel       (rsp_xbar_demux_006_src0_channel),           //          .channel
		.src0_startofpacket (rsp_xbar_demux_006_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_006_src0_endofpacket),       //          .endofpacket
		.src1_ready         (rsp_xbar_demux_006_src1_ready),             //      src1.ready
		.src1_valid         (rsp_xbar_demux_006_src1_valid),             //          .valid
		.src1_data          (rsp_xbar_demux_006_src1_data),              //          .data
		.src1_channel       (rsp_xbar_demux_006_src1_channel),           //          .channel
		.src1_startofpacket (rsp_xbar_demux_006_src1_startofpacket),     //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_006_src1_endofpacket),       //          .endofpacket
		.src2_ready         (rsp_xbar_demux_006_src2_ready),             //      src2.ready
		.src2_valid         (rsp_xbar_demux_006_src2_valid),             //          .valid
		.src2_data          (rsp_xbar_demux_006_src2_data),              //          .data
		.src2_channel       (rsp_xbar_demux_006_src2_channel),           //          .channel
		.src2_startofpacket (rsp_xbar_demux_006_src2_startofpacket),     //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_006_src2_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 rsp_xbar_demux_007 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_007_src_ready),                   //      sink.ready
		.sink_channel       (id_router_007_src_channel),                 //          .channel
		.sink_data          (id_router_007_src_data),                    //          .data
		.sink_startofpacket (id_router_007_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (id_router_007_src_endofpacket),             //          .endofpacket
		.sink_valid         (id_router_007_src_valid),                   //          .valid
		.src0_ready         (rsp_xbar_demux_007_src0_ready),             //      src0.ready
		.src0_valid         (rsp_xbar_demux_007_src0_valid),             //          .valid
		.src0_data          (rsp_xbar_demux_007_src0_data),              //          .data
		.src0_channel       (rsp_xbar_demux_007_src0_channel),           //          .channel
		.src0_startofpacket (rsp_xbar_demux_007_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_007_src0_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 rsp_xbar_demux_008 (
		.clk                (clk_0_clk_clk),                                                             //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_008_src_ready),                                                   //      sink.ready
		.sink_channel       (id_router_008_src_channel),                                                 //          .channel
		.sink_data          (id_router_008_src_data),                                                    //          .data
		.sink_startofpacket (id_router_008_src_startofpacket),                                           //          .startofpacket
		.sink_endofpacket   (id_router_008_src_endofpacket),                                             //          .endofpacket
		.sink_valid         (id_router_008_src_valid),                                                   //          .valid
		.src0_ready         (rsp_xbar_demux_008_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_xbar_demux_008_src0_valid),                                             //          .valid
		.src0_data          (rsp_xbar_demux_008_src0_data),                                              //          .data
		.src0_channel       (rsp_xbar_demux_008_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_xbar_demux_008_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_008_src0_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 rsp_xbar_demux_009 (
		.clk                (clk_0_clk_clk),                                                                  //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_009_src_ready),                                                        //      sink.ready
		.sink_channel       (id_router_009_src_channel),                                                      //          .channel
		.sink_data          (id_router_009_src_data),                                                         //          .data
		.sink_startofpacket (id_router_009_src_startofpacket),                                                //          .startofpacket
		.sink_endofpacket   (id_router_009_src_endofpacket),                                                  //          .endofpacket
		.sink_valid         (id_router_009_src_valid),                                                        //          .valid
		.src0_ready         (rsp_xbar_demux_009_src0_ready),                                                  //      src0.ready
		.src0_valid         (rsp_xbar_demux_009_src0_valid),                                                  //          .valid
		.src0_data          (rsp_xbar_demux_009_src0_data),                                                   //          .data
		.src0_channel       (rsp_xbar_demux_009_src0_channel),                                                //          .channel
		.src0_startofpacket (rsp_xbar_demux_009_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_009_src0_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 rsp_xbar_demux_010 (
		.clk                (clk_0_clk_clk),                                                             //       clk.clk
		.reset              (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_010_src_ready),                                                   //      sink.ready
		.sink_channel       (id_router_010_src_channel),                                                 //          .channel
		.sink_data          (id_router_010_src_data),                                                    //          .data
		.sink_startofpacket (id_router_010_src_startofpacket),                                           //          .startofpacket
		.sink_endofpacket   (id_router_010_src_endofpacket),                                             //          .endofpacket
		.sink_valid         (id_router_010_src_valid),                                                   //          .valid
		.src0_ready         (rsp_xbar_demux_010_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_xbar_demux_010_src0_valid),                                             //          .valid
		.src0_data          (rsp_xbar_demux_010_src0_data),                                              //          .data
		.src0_channel       (rsp_xbar_demux_010_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_xbar_demux_010_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_010_src0_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_cmd_xbar_demux_003 rsp_xbar_demux_011 (
		.clk                (clk_0_clk_clk),                                                                  //       clk.clk
		.reset              (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_011_src_ready),                                                        //      sink.ready
		.sink_channel       (id_router_011_src_channel),                                                      //          .channel
		.sink_data          (id_router_011_src_data),                                                         //          .data
		.sink_startofpacket (id_router_011_src_startofpacket),                                                //          .startofpacket
		.sink_endofpacket   (id_router_011_src_endofpacket),                                                  //          .endofpacket
		.sink_valid         (id_router_011_src_valid),                                                        //          .valid
		.src0_ready         (rsp_xbar_demux_011_src0_ready),                                                  //      src0.ready
		.src0_valid         (rsp_xbar_demux_011_src0_valid),                                                  //          .valid
		.src0_data          (rsp_xbar_demux_011_src0_data),                                                   //          .data
		.src0_channel       (rsp_xbar_demux_011_src0_channel),                                                //          .channel
		.src0_startofpacket (rsp_xbar_demux_011_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_011_src0_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                                                    //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                                                    //          .valid
		.src_data            (rsp_xbar_mux_src_data),                                                     //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                                                 //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                                                 //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                                               //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                                                  //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                                           //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                                             //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                                             //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),                                           //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                                              //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),                                       //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),                                             //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),                                             //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),                                           //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),                                              //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),                                     //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),                                       //          .endofpacket
		.sink3_ready         (rsp_xbar_demux_003_src0_ready),                                             //     sink3.ready
		.sink3_valid         (rsp_xbar_demux_003_src0_valid),                                             //          .valid
		.sink3_channel       (rsp_xbar_demux_003_src0_channel),                                           //          .channel
		.sink3_data          (rsp_xbar_demux_003_src0_data),                                              //          .data
		.sink3_startofpacket (rsp_xbar_demux_003_src0_startofpacket),                                     //          .startofpacket
		.sink3_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),                                       //          .endofpacket
		.sink4_ready         (rsp_xbar_demux_004_src0_ready),                                             //     sink4.ready
		.sink4_valid         (rsp_xbar_demux_004_src0_valid),                                             //          .valid
		.sink4_channel       (rsp_xbar_demux_004_src0_channel),                                           //          .channel
		.sink4_data          (rsp_xbar_demux_004_src0_data),                                              //          .data
		.sink4_startofpacket (rsp_xbar_demux_004_src0_startofpacket),                                     //          .startofpacket
		.sink4_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),                                       //          .endofpacket
		.sink5_ready         (rsp_xbar_demux_005_src0_ready),                                             //     sink5.ready
		.sink5_valid         (rsp_xbar_demux_005_src0_valid),                                             //          .valid
		.sink5_channel       (rsp_xbar_demux_005_src0_channel),                                           //          .channel
		.sink5_data          (rsp_xbar_demux_005_src0_data),                                              //          .data
		.sink5_startofpacket (rsp_xbar_demux_005_src0_startofpacket),                                     //          .startofpacket
		.sink5_endofpacket   (rsp_xbar_demux_005_src0_endofpacket),                                       //          .endofpacket
		.sink6_ready         (rsp_xbar_demux_006_src0_ready),                                             //     sink6.ready
		.sink6_valid         (rsp_xbar_demux_006_src0_valid),                                             //          .valid
		.sink6_channel       (rsp_xbar_demux_006_src0_channel),                                           //          .channel
		.sink6_data          (rsp_xbar_demux_006_src0_data),                                              //          .data
		.sink6_startofpacket (rsp_xbar_demux_006_src0_startofpacket),                                     //          .startofpacket
		.sink6_endofpacket   (rsp_xbar_demux_006_src0_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                                                                  //       clk.clk
		.reset               (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                                                     //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                                                     //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                                                      //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                                                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                                                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                                                    //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                                                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),                                                //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),                                                  //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),                                                  //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),                                                //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),                                                   //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),                                          //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),                                            //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src1_ready),                                                  //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src1_valid),                                                  //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src1_channel),                                                //          .channel
		.sink2_data          (rsp_xbar_demux_002_src1_data),                                                   //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src1_startofpacket),                                          //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src1_endofpacket),                                            //          .endofpacket
		.sink3_ready         (rsp_xbar_demux_003_src1_ready),                                                  //     sink3.ready
		.sink3_valid         (rsp_xbar_demux_003_src1_valid),                                                  //          .valid
		.sink3_channel       (rsp_xbar_demux_003_src1_channel),                                                //          .channel
		.sink3_data          (rsp_xbar_demux_003_src1_data),                                                   //          .data
		.sink3_startofpacket (rsp_xbar_demux_003_src1_startofpacket),                                          //          .startofpacket
		.sink3_endofpacket   (rsp_xbar_demux_003_src1_endofpacket),                                            //          .endofpacket
		.sink4_ready         (rsp_xbar_demux_004_src1_ready),                                                  //     sink4.ready
		.sink4_valid         (rsp_xbar_demux_004_src1_valid),                                                  //          .valid
		.sink4_channel       (rsp_xbar_demux_004_src1_channel),                                                //          .channel
		.sink4_data          (rsp_xbar_demux_004_src1_data),                                                   //          .data
		.sink4_startofpacket (rsp_xbar_demux_004_src1_startofpacket),                                          //          .startofpacket
		.sink4_endofpacket   (rsp_xbar_demux_004_src1_endofpacket),                                            //          .endofpacket
		.sink5_ready         (rsp_xbar_demux_005_src1_ready),                                                  //     sink5.ready
		.sink5_valid         (rsp_xbar_demux_005_src1_valid),                                                  //          .valid
		.sink5_channel       (rsp_xbar_demux_005_src1_channel),                                                //          .channel
		.sink5_data          (rsp_xbar_demux_005_src1_data),                                                   //          .data
		.sink5_startofpacket (rsp_xbar_demux_005_src1_startofpacket),                                          //          .startofpacket
		.sink5_endofpacket   (rsp_xbar_demux_005_src1_endofpacket),                                            //          .endofpacket
		.sink6_ready         (rsp_xbar_demux_006_src1_ready),                                                  //     sink6.ready
		.sink6_valid         (rsp_xbar_demux_006_src1_valid),                                                  //          .valid
		.sink6_channel       (rsp_xbar_demux_006_src1_channel),                                                //          .channel
		.sink6_data          (rsp_xbar_demux_006_src1_data),                                                   //          .data
		.sink6_startofpacket (rsp_xbar_demux_006_src1_startofpacket),                                          //          .startofpacket
		.sink6_endofpacket   (rsp_xbar_demux_006_src1_endofpacket)                                             //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_mux_002 rsp_xbar_mux_002 (
		.clk                  (clk_0_clk_clk),                             //       clk.clk
		.reset                (mutex_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_002_src_ready),                //       src.ready
		.src_valid            (rsp_xbar_mux_002_src_valid),                //          .valid
		.src_data             (rsp_xbar_mux_002_src_data),                 //          .data
		.src_channel          (rsp_xbar_mux_002_src_channel),              //          .channel
		.src_startofpacket    (rsp_xbar_mux_002_src_startofpacket),        //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_002_src_endofpacket),          //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_src2_ready),                 //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_src2_valid),                 //          .valid
		.sink0_channel        (rsp_xbar_demux_src2_channel),               //          .channel
		.sink0_data           (rsp_xbar_demux_src2_data),                  //          .data
		.sink0_startofpacket  (rsp_xbar_demux_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_src2_endofpacket),           //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src2_ready),             //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src2_valid),             //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src2_channel),           //          .channel
		.sink1_data           (rsp_xbar_demux_001_src2_data),              //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src2_startofpacket),     //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src2_endofpacket),       //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src2_ready),             //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src2_valid),             //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src2_channel),           //          .channel
		.sink2_data           (rsp_xbar_demux_002_src2_data),              //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src2_startofpacket),     //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src2_endofpacket),       //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src2_ready),             //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src2_valid),             //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src2_channel),           //          .channel
		.sink3_data           (rsp_xbar_demux_003_src2_data),              //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src2_startofpacket),     //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src2_endofpacket),       //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src2_ready),             //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src2_valid),             //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src2_channel),           //          .channel
		.sink4_data           (rsp_xbar_demux_004_src2_data),              //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src2_startofpacket),     //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src2_endofpacket),       //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src2_ready),             //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src2_valid),             //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src2_channel),           //          .channel
		.sink5_data           (rsp_xbar_demux_005_src2_data),              //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src2_startofpacket),     //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src2_endofpacket),       //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src2_ready),             //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src2_valid),             //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src2_channel),           //          .channel
		.sink6_data           (rsp_xbar_demux_006_src2_data),              //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src2_startofpacket),     //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src2_endofpacket),       //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src0_ready),             //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src0_valid),             //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src0_channel),           //          .channel
		.sink7_data           (rsp_xbar_demux_007_src0_data),              //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src0_startofpacket),     //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src0_endofpacket),       //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src0_ready),             //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src0_valid),             //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src0_channel),           //          .channel
		.sink8_data           (rsp_xbar_demux_008_src0_data),              //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src0_startofpacket),     //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src0_endofpacket),       //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src0_ready),             //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src0_valid),             //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src0_channel),           //          .channel
		.sink9_data           (rsp_xbar_demux_009_src0_data),              //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src0_startofpacket),     //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src0_endofpacket),       //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src0_ready),             //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src0_valid),             //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src0_channel),           //          .channel
		.sink10_data          (rsp_xbar_demux_010_src0_data),              //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src0_startofpacket),     //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),       //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_011_src0_ready),             //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_011_src0_valid),             //          .valid
		.sink11_channel       (rsp_xbar_demux_011_src0_channel),           //          .channel
		.sink11_data          (rsp_xbar_demux_011_src0_data),              //          .data
		.sink11_startofpacket (rsp_xbar_demux_011_src0_startofpacket),     //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_011_src0_endofpacket)        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_mux_003 rsp_xbar_mux_003 (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (processor1_0_outgoing_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_003_src_ready),                                                //       src.ready
		.src_valid           (rsp_xbar_mux_003_src_valid),                                                //          .valid
		.src_data            (rsp_xbar_mux_003_src_data),                                                 //          .data
		.src_channel         (rsp_xbar_mux_003_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_xbar_mux_003_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_003_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_003_src3_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_003_src3_valid),                                             //          .valid
		.sink0_channel       (rsp_xbar_demux_003_src3_channel),                                           //          .channel
		.sink0_data          (rsp_xbar_demux_003_src3_data),                                              //          .data
		.sink0_startofpacket (rsp_xbar_demux_003_src3_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_003_src3_endofpacket)                                        //          .endofpacket
	);

	nios_fprint_mm_interconnect_1_rsp_xbar_mux_003 rsp_xbar_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                  //       clk.clk
		.reset               (processor0_0_out_system_bridge_m0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_004_src_ready),                                                     //       src.ready
		.src_valid           (rsp_xbar_mux_004_src_valid),                                                     //          .valid
		.src_data            (rsp_xbar_mux_004_src_data),                                                      //          .data
		.src_channel         (rsp_xbar_mux_004_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_004_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_004_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_003_src4_ready),                                                  //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_003_src4_valid),                                                  //          .valid
		.sink0_channel       (rsp_xbar_demux_003_src4_channel),                                                //          .channel
		.sink0_data          (rsp_xbar_demux_003_src4_data),                                                   //          .data
		.sink0_startofpacket (rsp_xbar_demux_003_src4_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_003_src4_endofpacket)                                             //          .endofpacket
	);

endmodule
