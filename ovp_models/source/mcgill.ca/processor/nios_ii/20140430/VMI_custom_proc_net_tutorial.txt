How to set processor for fingerprinting


1. cd ${IMPERAS_HOME}/ImperasLib/source/altera.ovpworld.org/processor/nios_ii/1.0/model

2. open the file Nios_IIStructure.h

3. Find typedef struct Nios_IIS{...}

4. Add a type Uns32 for each net:


    //FINGERPRINT SIGNAL ADDED
    Uns32 fprint_write_out;
    Uns32 fprint_write_out_address;
    Uns32 fprint_write_out_data;
    Uns32 fprint_write_in_address;
    Uns32 fprint_write_in;
    Uns32 fprint_write_in_data;

5. Open Nios_IIPorts.c

6. Find the function:

	void Nios_IINewNetPorts(Nios_IIP Nios_II){...}

7. Change the following:

	Nios_IINetPort template[] = {
	        { {"reset_n", vmi_NP_INPUT, (void*)0,  reset_n_event}, (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq0",  vmi_NP_INPUT, (void*)0,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq1",  vmi_NP_INPUT, (void*)1,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq2",  vmi_NP_INPUT, (void*)2,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq3",  vmi_NP_INPUT, (void*)3,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq4",  vmi_NP_INPUT, (void*)4,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq5",  vmi_NP_INPUT, (void*)5,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq6",  vmi_NP_INPUT, (void*)6,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq7",  vmi_NP_INPUT, (void*)7,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq8",  vmi_NP_INPUT, (void*)8,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq9",  vmi_NP_INPUT, (void*)9,  irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq10", vmi_NP_INPUT, (void*)10, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq11", vmi_NP_INPUT, (void*)11, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq12", vmi_NP_INPUT, (void*)12, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq13", vmi_NP_INPUT, (void*)13, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq14", vmi_NP_INPUT, (void*)14, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq15", vmi_NP_INPUT, (void*)15, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq16", vmi_NP_INPUT, (void*)16, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq17", vmi_NP_INPUT, (void*)17, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq18", vmi_NP_INPUT, (void*)18, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq19", vmi_NP_INPUT, (void*)19, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq20", vmi_NP_INPUT, (void*)20, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq21", vmi_NP_INPUT, (void*)21, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq22", vmi_NP_INPUT, (void*)22, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq23", vmi_NP_INPUT, (void*)23, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq24", vmi_NP_INPUT, (void*)24, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq25", vmi_NP_INPUT, (void*)25, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq26", vmi_NP_INPUT, (void*)26, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq27", vmi_NP_INPUT, (void*)27, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq28", vmi_NP_INPUT, (void*)28, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq29", vmi_NP_INPUT, (void*)29, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq30", vmi_NP_INPUT, (void*)30, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"d_irq31", vmi_NP_INPUT, (void*)31, irq_event},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"fprint_write_out", vmi_NP_OUTPUT, (void*)0, 0, &Nios_II->fprint_write_out},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"fprint_write_out_address", vmi_NP_OUTPUT, (void*)1, 0, &Nios_II->fprint_write_out_address},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"fprint_write_out_data", vmi_NP_OUTPUT, (void*)2, 0, &Nios_II->fprint_write_out_data},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"fprint_write_in", vmi_NP_INPUT, (void*)0, fprint_write_in, 0},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"fprint_write_in_data", vmi_NP_INPUT, (void*)1, fprint_write_in_data, 0},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        { {"fprint_write_in_address", vmi_NP_INPUT, (void*)2, fprint_write_in_address, 0},     (NIOS_II_E | NIOS_II_S | NIOS_II_F) },
	        
	        { { 0 } }
	    };



8. To call a function that executes whenever the input changes, add functions like so (still in Nios_IIPorts.c, BEFORE the Nios_IINewNetPorts(Nios_IIP Nios_II) code):

	static VMI_NET_CHANGE_FN(fprint_write_in_address) {
	    Nios_IIP Nios_II = (Nios_IIP)processor;
	    Nios_II->fprint_write_in_address = newValue;
	}

	static VMI_NET_CHANGE_FN(fprint_write_in_data) {
	    Nios_IIP Nios_II = (Nios_IIP)processor;
	    Nios_II->fprint_write_in_data = newValue;
	}

	static VMI_NET_CHANGE_FN(fprint_write_in) {

   	    Nios_IIP Nios_II = (Nios_IIP)processor;

	    vmiPrintf("fprint event = %d,%x,%x\n",newValue,Nios_II->fprint_write_in_address,Nios_II->fprint_write_in_data);
	    

	}


**** Note*** : We assume that fprint_write_in will be written AFTER data and address

**** Note*** : We never update fprint_write_in with newValue so writing 1 always causes an event


9. In the same folder from the command line:
	make NOVLNV=1

10. Copy the new version to the library used by the simulator:

	cp model.so $IMPERAS_HOME/lib/Linux32/ImperasLib/altera.ovpworld.org/processor/nios_ii/1.0/

**** Note*** : Maybe save a copy of the original model.so first so you can undo your changes


9. In the intercept.c file in your project folder, to change the value of the output net:

    vmirtWriteNetPort(processor, vmirtGetNetPortHandle(processor, "fprint_write_out_address"), address);
    vmirtWriteNetPort(processor, vmirtGetNetPortHandle(processor, "fprint_write_out_data"), *((unsigned *)value));
    vmirtWriteNetPort(processor, vmirtGetNetPortHandle(processor, "fprint_write_out"), 1);



10. If we were to write 1 to the output net every time a store happened:

	static VMI_MEM_WATCH_FN(writeCB) {

	    if(processor) {
	        
	        vmirtWriteNetPort(processor, vmirtGetNetPortHandle(processor, "fprint_write_out_address"), address);
	        vmirtWriteNetPort(processor, vmirtGetNetPortHandle(processor, "fprint_write_out_data"), *((unsigned *)value));
	        vmirtWriteNetPort(processor, vmirtGetNetPortHandle(processor, "fprint_write_out"), 1);


	    }

    }


11. To test that the output and input are working properly, connect them in your platform:

    icmNetP fprint = icmNewNet("fprint_irq");
    icmConnectProcessorNet(handles.cpu_c, fprint, "fprint_write_out",ICM_OUTPUT);
    icmConnectProcessorNet(handles.cpu_c, fprint, "fprint_write_in",ICM_INPUT);
    icmNetP fprint_address = icmNewNet("fprint_address");
    icmConnectProcessorNet(handles.cpu_c, fprint_address, "fprint_write_out_address",ICM_OUTPUT);
    icmConnectProcessorNet(handles.cpu_c, fprint_address, "fprint_write_in_address",ICM_INPUT);
    icmNetP fprint_data = icmNewNet("fprint_data");
    icmConnectProcessorNet(handles.cpu_c, fprint_data, "fprint_write_out_data",ICM_OUTPUT);
    icmConnectProcessorNet(handles.cpu_c, fprint_data, "fprint_write_in_data",ICM_INPUT);
      
12. When you run your simulation, it should print the address and data continuously (this time from inside the processor model)

13. Disconnect the fprint_write_in ports in the platform

14. Instantiate the fprint peripheral:

         const char *fprint_path = icmGetVlnvString(
        0                   ,    // path (0 if from the product directory)
        "mcgill.ca",    // vendor
        0                   ,    // library
        "fprint"      ,    // name
        0                   ,    // version
        "pse"                    // model
    );

    icmAttrListP fprint_attrList = icmNewAttrList();

    handles.fprint_p = icmNewPSE(
        "fprint"             ,   // name
        fprint_path          ,   // model
        fprint_attrList      ,   // attrlist
        0,       // unused
        0        // unused  
    );

    

      icmNetP fprint = icmNewNet("fprint_irq");
    icmConnectProcessorNet(handles.cpu_c, fprint, "fprint_write_out",ICM_OUTPUT);
    icmConnectPSENet(handles.fprint_p, fprint, "FPRINT_WRITE",ICM_INPUT);
    icmNetP fprint_address = icmNewNet("fprint_address");
    icmConnectProcessorNet(handles.cpu_c, fprint_address, "fprint_write_out_address",ICM_OUTPUT);
    icmConnectPSENet(handles.fprint_p, fprint_address, "FPRINT_WRITE_ADDRESS",ICM_INPUT);
    icmNetP fprint_data = icmNewNet("fprint_data");
    icmConnectProcessorNet(handles.cpu_c, fprint_data, "fprint_write_out_data",ICM_OUTPUT);
    icmConnectPSENet(handles.fprint_p, fprint_data, "FPRINT_WRITE_DATA",ICM_INPUT);

    icmConnectPSEBus( handles.fprint_p,     handles.dbus_b, "FPRINT_CSR_SLAVE", 0, 0x1001020, 0x100115F);
    icmConnectPSEBus( handles.fprint_p,     handles.dbus_b, "FPRINT_MASTER",    1, 0x0000000, 0xFFFFFFF);

15. If the peripheral is modified:
	10. Copy the new version to the library used by the simulator:

	igen.exe --batch mutex.tcl --writec mutex --writexml periph.xml 
	cp pse.pse $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/mutex/1.0/
	cp periph.xml $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/mutex/1.0/

	igen.exe --batch cpu_irq.tcl --writec cpu_irq --writexml periph.xml 
	cp periph.xml $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/cpu_irq/1.0/
--overwrite
	
	igen.exe --batch fprint.tcl --writec fprint --writexml periph.xml
	cp pse.pse $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/fprint/1.0/
	cp periph.xml $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/fprint/1.0/

	igen.exe --batch comparator.tcl --writec comparator --writexml periph.xml
	cp pse.pse $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/comparator/1.0/
	cp periph.xml $IMPERAS_HOME/lib/Linux32/ImperasLib/mcgill.ca/peripheral/comparator/1.0/


