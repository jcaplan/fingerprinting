% Autogenerated file: Mon May  4 13:55:04 2015
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('/data/jcapla9/fingerprinting/automotive_control/CompiledC/TractionControl_ert_rtw/tlc/codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;




skippedParameters = [];
                
% Built-In Type: 0
Type_0_R0_V0 = numerictype('double');
  Type_0_R0_V0.Name = 'double';
  Type_0_R0_V0.Identifier = 'real_T';
  Type_0_R0_V0.ReadOnly   = 0;
  Type_0_R0_V0.Volatile   = 0;
    
  % Matrix Type
  Type_20_R0_V0 = embedded.matrixtype;
  Type_20_R0_V0.BaseType   = Type_0_R0_V0;
    Type_20_R0_V0.Dimensions = [1, 1];
    
  tmpParams = [];
if ~isempty(tmpParams)
codeInfo.Parameters = [codeInfo.Parameters; tmpParams];
end

    tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  
        
      
% Opaque Data Type
type_RTModel  = embedded.opaquetype('RT_MODEL_TractionControl_T');
      

% Pointer Type: Pointer to type_RTModel    
Ptrtype_RTModel_1_0 = embedded.pointertype;
   Ptrtype_RTModel_1_0.BaseType = type_RTModel;
    Ptrtype_RTModel_1_0.ReadOnly = 1;
    Ptrtype_RTModel_1_0.Volatile = 0;
    
      Ptrtype_RTModel_1_0.ReadOnly = 1;
    
% Variable: Var_RTModel
Var_RTModel = RTW.Variable(type_RTModel, 'TractionControl_M_');
    Var_RTModel.Owner           = '';
    Var_RTModel.DeclarationFile = '';
    
    
% Pointer Variable: PtrVar_RTModel
PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'TractionControl_M', Var_RTModel);
    
    
% Data Interface: idata_RTModel
idata_RTModel = RTW.DataInterface('', 'Real-time model', PtrVar_RTModel, []);
    
    
        Initialize_RTArg = RTW.Argument;
        Initialize_RTArg.Type   = Ptrtype_RTModel_1_0;
        Initialize_RTArg.Name   = 'TractionControl_M';
        Initialize_RTArg.IOType = 'RTW_IO_INPUT_OUTPUT';    
        
        tmpArgs    = [tmpArgs; Initialize_RTArg];
        tmpActualArgs = [tmpActualArgs; idata_RTModel];

  
  % Data Interface: ExternalInput
  idata_ExternalInput = getInternalDataByName(codeInfo.InternalData, 'ExternalInput');
  
  % Type of : idata_ExternalInput
  if isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')
  type_idata_ExternalInput = idata_ExternalInput.Implementation.TargetRegion.Type;
  else
  type_idata_ExternalInput = idata_ExternalInput.Implementation.Type;
  end

% Pointer Type: Pointer to type_idata_ExternalInput    
Ptrtype_idata_ExternalInput_0_0 = embedded.pointertype;
   Ptrtype_idata_ExternalInput_0_0.BaseType = type_idata_ExternalInput;
    Ptrtype_idata_ExternalInput_0_0.ReadOnly = 0;
    Ptrtype_idata_ExternalInput_0_0.Volatile = 0;
    
          Initialize_EIArg = RTW.Argument;
          Initialize_EIArg.Type = Ptrtype_idata_ExternalInput_0_0;
          Initialize_EIArg.Name = 'TractionControl_U';
          tmpArgs    = [tmpArgs; Initialize_EIArg];
          tmpActualArgs = [tmpActualArgs; idata_ExternalInput];
  
  % Data Interface: ExternalOutput
  idata_ExternalOutput = getInternalDataByName(codeInfo.InternalData, 'ExternalOutput');
  
  % Type of : idata_ExternalOutput
  if isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')
  type_idata_ExternalOutput = idata_ExternalOutput.Implementation.TargetRegion.Type;
  else
  type_idata_ExternalOutput = idata_ExternalOutput.Implementation.Type;
  end

% Pointer Type: Pointer to type_idata_ExternalOutput    
Ptrtype_idata_ExternalOutput_0_0 = embedded.pointertype;
   Ptrtype_idata_ExternalOutput_0_0.BaseType = type_idata_ExternalOutput;
    Ptrtype_idata_ExternalOutput_0_0.ReadOnly = 0;
    Ptrtype_idata_ExternalOutput_0_0.Volatile = 0;
    
          rtYArg = RTW.Argument;
          rtYArg.Type = Ptrtype_idata_ExternalOutput_0_0;
          rtYArg.Name = 'TractionControl_Y';
          rtYArg.IOType = 'RTW_IO_OUTPUT';
 
          tmpArgs    = [tmpArgs; rtYArg];
          tmpActualArgs = [tmpActualArgs; idata_ExternalOutput];
  
  

    

  Initialize_Prototype = RTW.CImplementation;
  Initialize_Prototype.Arguments  = tmpArgs;
  Initialize_Prototype.Return     = tmpRet;
    Initialize_Prototype.HeaderFile = ['TractionControl', '.h'];
  Initialize_Prototype.SourceFile = ['TractionControl', '.c'];

  Initialize_Interface = RTW.FunctionInterface;
  Initialize_Interface.Prototype    = Initialize_Prototype;
  Initialize_Interface.ActualArgs   = tmpActualArgs;
  Initialize_Interface.ActualReturn = tmpActualReturn;

      Initialize_Prototype.Name = 'TractionControl_initialize';
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Initialize_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions; Initialize_Interface'];

          tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  
        
      Ptrtype_RTModel_1_0.ReadOnly = 1;
    
        OutputUpdate_RTArg = RTW.Argument;
        OutputUpdate_RTArg.Type   = Ptrtype_RTModel_1_0;
        OutputUpdate_RTArg.Name   = 'TractionControl_M';
        OutputUpdate_RTArg.IOType = 'RTW_IO_INPUT_OUTPUT';    
        
        tmpArgs    = [tmpArgs; OutputUpdate_RTArg];
        tmpActualArgs = [tmpActualArgs; idata_RTModel];

  
  % Data Interface: Parameter
  idata_Parameter = getInternalDataByName(codeInfo.InternalData, 'Parameter');
    if ~isa(idata_Parameter.Implementation,'RTW.PointerExpression') 
        idata_Parameter.Implementation.Identifier = 'TractionControl_P';
    end
  
  % Type of : idata_Parameter
  if isa(idata_Parameter.Implementation,'RTW.PointerExpression')
  type_idata_Parameter = idata_Parameter.Implementation.TargetRegion.Type;
  else
  type_idata_Parameter = idata_Parameter.Implementation.Type;
  end

% Pointer Type: Pointer to type_idata_Parameter    
Ptrtype_idata_Parameter_0_0 = embedded.pointertype;
   Ptrtype_idata_Parameter_0_0.BaseType = type_idata_Parameter;
    Ptrtype_idata_Parameter_0_0.ReadOnly = 0;
    Ptrtype_idata_Parameter_0_0.Volatile = 0;
    
      
      if ~isa(idata_Parameter.Implementation,'RTW.PointerExpression') 
                 
  
    % Structure Element: StructElem_PointerExpr_rt_Parameter
    StructElem_PointerExpr_rt_Parameter = embedded.structelement;
    StructElem_PointerExpr_rt_Parameter.Identifier = 'ModelData.defaultParam';
    StructElem_PointerExpr_rt_Parameter.Type = Ptrtype_idata_Parameter_0_0;
    
    
    % Pointer Expression: PointerExpr_rt_Parameter
    PointerExpr_rt_Parameter = RTW.PointerExpression(StructElem_PointerExpr_rt_Parameter, PtrVar_RTModel, idata_Parameter.Implementation);
    
    
          
         idata_Parameter.Implementation = PointerExpr_rt_Parameter;      
      end
     
  
  % Data Interface: ExternalInput
  idata_ExternalInput = getInternalDataByName(codeInfo.InternalData, 'ExternalInput');
  
  % Type of : idata_ExternalInput
  if isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')
  type_idata_ExternalInput = idata_ExternalInput.Implementation.TargetRegion.Type;
  else
  type_idata_ExternalInput = idata_ExternalInput.Implementation.Type;
  end
          OutputUpdate_EIArg = RTW.Argument;
          OutputUpdate_EIArg.Type = Ptrtype_idata_ExternalInput_0_0;
          OutputUpdate_EIArg.Name = 'TractionControl_U';
          tmpArgs    = [tmpArgs; OutputUpdate_EIArg];
          tmpActualArgs = [tmpActualArgs; idata_ExternalInput];
  
  % Data Interface: ExternalOutput
  idata_ExternalOutput = getInternalDataByName(codeInfo.InternalData, 'ExternalOutput');
  
  % Type of : idata_ExternalOutput
  if isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')
  type_idata_ExternalOutput = idata_ExternalOutput.Implementation.TargetRegion.Type;
  else
  type_idata_ExternalOutput = idata_ExternalOutput.Implementation.Type;
  end
          rtYArg = RTW.Argument;
          rtYArg.Type = Ptrtype_idata_ExternalOutput_0_0;
          rtYArg.Name = 'TractionControl_Y';
          rtYArg.IOType = 'RTW_IO_OUTPUT';
 
          tmpArgs    = [tmpArgs; rtYArg];
          tmpActualArgs = [tmpActualArgs; idata_ExternalOutput];
  
  

    

  OutputUpdate_Prototype = RTW.CImplementation;
  OutputUpdate_Prototype.Arguments  = tmpArgs;
  OutputUpdate_Prototype.Return     = tmpRet;
    OutputUpdate_Prototype.HeaderFile = ['TractionControl', '.h'];
  OutputUpdate_Prototype.SourceFile = ['TractionControl', '.c'];

  OutputUpdate_Interface = RTW.FunctionInterface;
  OutputUpdate_Interface.Prototype    = OutputUpdate_Prototype;
  OutputUpdate_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate_Interface.ActualReturn = tmpActualReturn;

      OutputUpdate_Prototype.Name = 'TractionControl_step';
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      OutputUpdate_Interface.Timing = time_0;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdate_Interface'];

      tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  
        
      Ptrtype_RTModel_1_0.ReadOnly = 1;
    
        Terminate_RTArg = RTW.Argument;
        Terminate_RTArg.Type   = Ptrtype_RTModel_1_0;
        Terminate_RTArg.Name   = 'TractionControl_M';
        Terminate_RTArg.IOType = 'RTW_IO_INPUT_OUTPUT';    
        
        tmpArgs    = [tmpArgs; Terminate_RTArg];
        tmpActualArgs = [tmpActualArgs; idata_RTModel];

  
  

    

  Terminate_Prototype = RTW.CImplementation;
  Terminate_Prototype.Arguments  = tmpArgs;
  Terminate_Prototype.Return     = tmpRet;
    Terminate_Prototype.HeaderFile = ['TractionControl', '.h'];
  Terminate_Prototype.SourceFile = ['TractionControl', '.c'];

  Terminate_Interface = RTW.FunctionInterface;
  Terminate_Interface.Prototype    = Terminate_Prototype;
  Terminate_Interface.ActualArgs   = tmpActualArgs;
  Terminate_Interface.ActualReturn = tmpActualReturn;

  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Terminate_Interface.Timing = time_constant;
      Terminate_Prototype.Name = [codeInfo.Name, '_terminate'];
      codeInfo.TerminateFunctions =  [codeInfo.TerminateFunctions; Terminate_Interface'];


  



if ~isempty(skippedParameters)
codeInfo.Parameters(skippedParameters) = [];
end

codeInfo.InternalData = [codeInfo.InternalData; idata_RTModel];

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

    lookupTableArray = [];         
  if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports  lookupTableArray;
  else
    save codeInfo.mat codeInfo  lookupTableArray;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = find(iDataVec, 'GraphicalName', iDataName);
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = [];
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
    
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end
    
% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end
    
% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;
        
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end
    
% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;
 
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    
   
